
Application_F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08014000  08014000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c5c  08014190  08014190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08017dec  08017dec  00004dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017e80  08017e80  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08017e80  08017e80  00004e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017e88  08017e88  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017e88  08017e88  00004e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017e8c  08017e8c  00004e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08017e90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          000001f8  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000920b  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000172b  00000000  00000000  0000e2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  0000f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000579  00000000  00000000  00010108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001da82  00000000  00000000  00010681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a43a  00000000  00000000  0002e103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aed43  00000000  00000000  0003853d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e7280  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002378  00000000  00000000  000e72c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  000e963c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08014190 <__do_global_dtors_aux>:
 8014190:	b510      	push	{r4, lr}
 8014192:	4c05      	ldr	r4, [pc, #20]	@ (80141a8 <__do_global_dtors_aux+0x18>)
 8014194:	7823      	ldrb	r3, [r4, #0]
 8014196:	b933      	cbnz	r3, 80141a6 <__do_global_dtors_aux+0x16>
 8014198:	4b04      	ldr	r3, [pc, #16]	@ (80141ac <__do_global_dtors_aux+0x1c>)
 801419a:	b113      	cbz	r3, 80141a2 <__do_global_dtors_aux+0x12>
 801419c:	4804      	ldr	r0, [pc, #16]	@ (80141b0 <__do_global_dtors_aux+0x20>)
 801419e:	f3af 8000 	nop.w
 80141a2:	2301      	movs	r3, #1
 80141a4:	7023      	strb	r3, [r4, #0]
 80141a6:	bd10      	pop	{r4, pc}
 80141a8:	20000068 	.word	0x20000068
 80141ac:	00000000 	.word	0x00000000
 80141b0:	08017dd4 	.word	0x08017dd4

080141b4 <frame_dummy>:
 80141b4:	b508      	push	{r3, lr}
 80141b6:	4b03      	ldr	r3, [pc, #12]	@ (80141c4 <frame_dummy+0x10>)
 80141b8:	b11b      	cbz	r3, 80141c2 <frame_dummy+0xe>
 80141ba:	4903      	ldr	r1, [pc, #12]	@ (80141c8 <frame_dummy+0x14>)
 80141bc:	4803      	ldr	r0, [pc, #12]	@ (80141cc <frame_dummy+0x18>)
 80141be:	f3af 8000 	nop.w
 80141c2:	bd08      	pop	{r3, pc}
 80141c4:	00000000 	.word	0x00000000
 80141c8:	2000006c 	.word	0x2000006c
 80141cc:	08017dd4 	.word	0x08017dd4

080141d0 <memchr>:
 80141d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80141d4:	2a10      	cmp	r2, #16
 80141d6:	db2b      	blt.n	8014230 <memchr+0x60>
 80141d8:	f010 0f07 	tst.w	r0, #7
 80141dc:	d008      	beq.n	80141f0 <memchr+0x20>
 80141de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80141e2:	3a01      	subs	r2, #1
 80141e4:	428b      	cmp	r3, r1
 80141e6:	d02d      	beq.n	8014244 <memchr+0x74>
 80141e8:	f010 0f07 	tst.w	r0, #7
 80141ec:	b342      	cbz	r2, 8014240 <memchr+0x70>
 80141ee:	d1f6      	bne.n	80141de <memchr+0xe>
 80141f0:	b4f0      	push	{r4, r5, r6, r7}
 80141f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80141f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80141fa:	f022 0407 	bic.w	r4, r2, #7
 80141fe:	f07f 0700 	mvns.w	r7, #0
 8014202:	2300      	movs	r3, #0
 8014204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8014208:	3c08      	subs	r4, #8
 801420a:	ea85 0501 	eor.w	r5, r5, r1
 801420e:	ea86 0601 	eor.w	r6, r6, r1
 8014212:	fa85 f547 	uadd8	r5, r5, r7
 8014216:	faa3 f587 	sel	r5, r3, r7
 801421a:	fa86 f647 	uadd8	r6, r6, r7
 801421e:	faa5 f687 	sel	r6, r5, r7
 8014222:	b98e      	cbnz	r6, 8014248 <memchr+0x78>
 8014224:	d1ee      	bne.n	8014204 <memchr+0x34>
 8014226:	bcf0      	pop	{r4, r5, r6, r7}
 8014228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801422c:	f002 0207 	and.w	r2, r2, #7
 8014230:	b132      	cbz	r2, 8014240 <memchr+0x70>
 8014232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014236:	3a01      	subs	r2, #1
 8014238:	ea83 0301 	eor.w	r3, r3, r1
 801423c:	b113      	cbz	r3, 8014244 <memchr+0x74>
 801423e:	d1f8      	bne.n	8014232 <memchr+0x62>
 8014240:	2000      	movs	r0, #0
 8014242:	4770      	bx	lr
 8014244:	3801      	subs	r0, #1
 8014246:	4770      	bx	lr
 8014248:	2d00      	cmp	r5, #0
 801424a:	bf06      	itte	eq
 801424c:	4635      	moveq	r5, r6
 801424e:	3803      	subeq	r0, #3
 8014250:	3807      	subne	r0, #7
 8014252:	f015 0f01 	tst.w	r5, #1
 8014256:	d107      	bne.n	8014268 <memchr+0x98>
 8014258:	3001      	adds	r0, #1
 801425a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801425e:	bf02      	ittt	eq
 8014260:	3001      	addeq	r0, #1
 8014262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8014266:	3001      	addeq	r0, #1
 8014268:	bcf0      	pop	{r4, r5, r6, r7}
 801426a:	3801      	subs	r0, #1
 801426c:	4770      	bx	lr
 801426e:	bf00      	nop

08014270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b082      	sub	sp, #8
 8014274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8014276:	f000 faa5 	bl	80147c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801427a:	f000 f837 	bl	80142ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801427e:	f000 f8b5 	bl	80143ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8014282:	f000 f883 	bl	801438c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application(%d.%d)\n", APP_Version[0], APP_Version[1] );
 8014286:	2300      	movs	r3, #0
 8014288:	2201      	movs	r2, #1
 801428a:	4619      	mov	r1, r3
 801428c:	4813      	ldr	r0, [pc, #76]	@ (80142dc <main+0x6c>)
 801428e:	f002 ff33 	bl	80170f8 <iprintf>
  uint8_t buffer[]="test\n";
 8014292:	4a13      	ldr	r2, [pc, #76]	@ (80142e0 <main+0x70>)
 8014294:	463b      	mov	r3, r7
 8014296:	e892 0003 	ldmia.w	r2, {r0, r1}
 801429a:	6018      	str	r0, [r3, #0]
 801429c:	3304      	adds	r3, #4
 801429e:	8019      	strh	r1, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin( GPIOE, GPIO_PIN_10, GPIO_PIN_SET );
 80142a0:	2201      	movs	r2, #1
 80142a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80142a6:	480f      	ldr	r0, [pc, #60]	@ (80142e4 <main+0x74>)
 80142a8:	f000 fd76 	bl	8014d98 <HAL_GPIO_WritePin>
	    HAL_Delay(1000);    //1 Sec delay
 80142ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80142b0:	f000 faee 	bl	8014890 <HAL_Delay>
		HAL_GPIO_WritePin( GPIOE, GPIO_PIN_10, GPIO_PIN_RESET );
 80142b4:	2200      	movs	r2, #0
 80142b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80142ba:	480a      	ldr	r0, [pc, #40]	@ (80142e4 <main+0x74>)
 80142bc:	f000 fd6c 	bl	8014d98 <HAL_GPIO_WritePin>
		HAL_Delay(1000);	//1 Sec delay
 80142c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80142c4:	f000 fae4 	bl	8014890 <HAL_Delay>
		HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80142c8:	4639      	mov	r1, r7
 80142ca:	f04f 33ff 	mov.w	r3, #4294967295
 80142ce:	2206      	movs	r2, #6
 80142d0:	4805      	ldr	r0, [pc, #20]	@ (80142e8 <main+0x78>)
 80142d2:	f002 f9d5 	bl	8016680 <HAL_UART_Transmit>
		HAL_GPIO_WritePin( GPIOE, GPIO_PIN_10, GPIO_PIN_SET );
 80142d6:	bf00      	nop
 80142d8:	e7e2      	b.n	80142a0 <main+0x30>
 80142da:	bf00      	nop
 80142dc:	08017dec 	.word	0x08017dec
 80142e0:	08017e0c 	.word	0x08017e0c
 80142e4:	48001000 	.word	0x48001000
 80142e8:	20000084 	.word	0x20000084

080142ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b09e      	sub	sp, #120	@ 0x78
 80142f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80142f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80142f6:	2228      	movs	r2, #40	@ 0x28
 80142f8:	2100      	movs	r1, #0
 80142fa:	4618      	mov	r0, r3
 80142fc:	f002 ff51 	bl	80171a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8014300:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8014304:	2200      	movs	r2, #0
 8014306:	601a      	str	r2, [r3, #0]
 8014308:	605a      	str	r2, [r3, #4]
 801430a:	609a      	str	r2, [r3, #8]
 801430c:	60da      	str	r2, [r3, #12]
 801430e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8014310:	463b      	mov	r3, r7
 8014312:	223c      	movs	r2, #60	@ 0x3c
 8014314:	2100      	movs	r1, #0
 8014316:	4618      	mov	r0, r3
 8014318:	f002 ff43 	bl	80171a2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 801431c:	2302      	movs	r3, #2
 801431e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8014320:	2301      	movs	r3, #1
 8014322:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8014324:	2310      	movs	r3, #16
 8014326:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8014328:	2300      	movs	r3, #0
 801432a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801432c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8014330:	4618      	mov	r0, r3
 8014332:	f000 fd49 	bl	8014dc8 <HAL_RCC_OscConfig>
 8014336:	4603      	mov	r3, r0
 8014338:	2b00      	cmp	r3, #0
 801433a:	d001      	beq.n	8014340 <SystemClock_Config+0x54>
  {
    Error_Handler();
 801433c:	f000 f8c2 	bl	80144c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014340:	230f      	movs	r3, #15
 8014342:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8014344:	2300      	movs	r3, #0
 8014346:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8014348:	2300      	movs	r3, #0
 801434a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801434c:	2300      	movs	r3, #0
 801434e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8014350:	2300      	movs	r3, #0
 8014352:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8014354:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8014358:	2100      	movs	r1, #0
 801435a:	4618      	mov	r0, r3
 801435c:	f001 fd72 	bl	8015e44 <HAL_RCC_ClockConfig>
 8014360:	4603      	mov	r3, r0
 8014362:	2b00      	cmp	r3, #0
 8014364:	d001      	beq.n	801436a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8014366:	f000 f8ad 	bl	80144c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801436a:	2301      	movs	r3, #1
 801436c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801436e:	2300      	movs	r3, #0
 8014370:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8014372:	463b      	mov	r3, r7
 8014374:	4618      	mov	r0, r3
 8014376:	f001 ff85 	bl	8016284 <HAL_RCCEx_PeriphCLKConfig>
 801437a:	4603      	mov	r3, r0
 801437c:	2b00      	cmp	r3, #0
 801437e:	d001      	beq.n	8014384 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8014380:	f000 f8a0 	bl	80144c4 <Error_Handler>
  }
}
 8014384:	bf00      	nop
 8014386:	3778      	adds	r7, #120	@ 0x78
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}

0801438c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8014390:	4b14      	ldr	r3, [pc, #80]	@ (80143e4 <MX_USART1_UART_Init+0x58>)
 8014392:	4a15      	ldr	r2, [pc, #84]	@ (80143e8 <MX_USART1_UART_Init+0x5c>)
 8014394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8014396:	4b13      	ldr	r3, [pc, #76]	@ (80143e4 <MX_USART1_UART_Init+0x58>)
 8014398:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 801439c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801439e:	4b11      	ldr	r3, [pc, #68]	@ (80143e4 <MX_USART1_UART_Init+0x58>)
 80143a0:	2200      	movs	r2, #0
 80143a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80143a4:	4b0f      	ldr	r3, [pc, #60]	@ (80143e4 <MX_USART1_UART_Init+0x58>)
 80143a6:	2200      	movs	r2, #0
 80143a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80143aa:	4b0e      	ldr	r3, [pc, #56]	@ (80143e4 <MX_USART1_UART_Init+0x58>)
 80143ac:	2200      	movs	r2, #0
 80143ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80143b0:	4b0c      	ldr	r3, [pc, #48]	@ (80143e4 <MX_USART1_UART_Init+0x58>)
 80143b2:	220c      	movs	r2, #12
 80143b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80143b6:	4b0b      	ldr	r3, [pc, #44]	@ (80143e4 <MX_USART1_UART_Init+0x58>)
 80143b8:	2200      	movs	r2, #0
 80143ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80143bc:	4b09      	ldr	r3, [pc, #36]	@ (80143e4 <MX_USART1_UART_Init+0x58>)
 80143be:	2200      	movs	r2, #0
 80143c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80143c2:	4b08      	ldr	r3, [pc, #32]	@ (80143e4 <MX_USART1_UART_Init+0x58>)
 80143c4:	2200      	movs	r2, #0
 80143c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80143c8:	4b06      	ldr	r3, [pc, #24]	@ (80143e4 <MX_USART1_UART_Init+0x58>)
 80143ca:	2200      	movs	r2, #0
 80143cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80143ce:	4805      	ldr	r0, [pc, #20]	@ (80143e4 <MX_USART1_UART_Init+0x58>)
 80143d0:	f002 f908 	bl	80165e4 <HAL_UART_Init>
 80143d4:	4603      	mov	r3, r0
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d001      	beq.n	80143de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80143da:	f000 f873 	bl	80144c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80143de:	bf00      	nop
 80143e0:	bd80      	pop	{r7, pc}
 80143e2:	bf00      	nop
 80143e4:	20000084 	.word	0x20000084
 80143e8:	40013800 	.word	0x40013800

080143ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b088      	sub	sp, #32
 80143f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80143f2:	f107 030c 	add.w	r3, r7, #12
 80143f6:	2200      	movs	r2, #0
 80143f8:	601a      	str	r2, [r3, #0]
 80143fa:	605a      	str	r2, [r3, #4]
 80143fc:	609a      	str	r2, [r3, #8]
 80143fe:	60da      	str	r2, [r3, #12]
 8014400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014402:	4b25      	ldr	r3, [pc, #148]	@ (8014498 <MX_GPIO_Init+0xac>)
 8014404:	695b      	ldr	r3, [r3, #20]
 8014406:	4a24      	ldr	r2, [pc, #144]	@ (8014498 <MX_GPIO_Init+0xac>)
 8014408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801440c:	6153      	str	r3, [r2, #20]
 801440e:	4b22      	ldr	r3, [pc, #136]	@ (8014498 <MX_GPIO_Init+0xac>)
 8014410:	695b      	ldr	r3, [r3, #20]
 8014412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014416:	60bb      	str	r3, [r7, #8]
 8014418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801441a:	4b1f      	ldr	r3, [pc, #124]	@ (8014498 <MX_GPIO_Init+0xac>)
 801441c:	695b      	ldr	r3, [r3, #20]
 801441e:	4a1e      	ldr	r2, [pc, #120]	@ (8014498 <MX_GPIO_Init+0xac>)
 8014420:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014424:	6153      	str	r3, [r2, #20]
 8014426:	4b1c      	ldr	r3, [pc, #112]	@ (8014498 <MX_GPIO_Init+0xac>)
 8014428:	695b      	ldr	r3, [r3, #20]
 801442a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801442e:	607b      	str	r3, [r7, #4]
 8014430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8014432:	4b19      	ldr	r3, [pc, #100]	@ (8014498 <MX_GPIO_Init+0xac>)
 8014434:	695b      	ldr	r3, [r3, #20]
 8014436:	4a18      	ldr	r2, [pc, #96]	@ (8014498 <MX_GPIO_Init+0xac>)
 8014438:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801443c:	6153      	str	r3, [r2, #20]
 801443e:	4b16      	ldr	r3, [pc, #88]	@ (8014498 <MX_GPIO_Init+0xac>)
 8014440:	695b      	ldr	r3, [r3, #20]
 8014442:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8014446:	603b      	str	r3, [r7, #0]
 8014448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 801444a:	2200      	movs	r2, #0
 801444c:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8014450:	4812      	ldr	r0, [pc, #72]	@ (801449c <MX_GPIO_Init+0xb0>)
 8014452:	f000 fca1 	bl	8014d98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8014456:	2301      	movs	r3, #1
 8014458:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801445a:	2300      	movs	r3, #0
 801445c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801445e:	2300      	movs	r3, #0
 8014460:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014462:	f107 030c 	add.w	r3, r7, #12
 8014466:	4619      	mov	r1, r3
 8014468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801446c:	f000 fb1a 	bl	8014aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8014470:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8014474:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014476:	2301      	movs	r3, #1
 8014478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801447a:	2300      	movs	r3, #0
 801447c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801447e:	2300      	movs	r3, #0
 8014480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014482:	f107 030c 	add.w	r3, r7, #12
 8014486:	4619      	mov	r1, r3
 8014488:	4804      	ldr	r0, [pc, #16]	@ (801449c <MX_GPIO_Init+0xb0>)
 801448a:	f000 fb0b 	bl	8014aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 801448e:	bf00      	nop
 8014490:	3720      	adds	r7, #32
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}
 8014496:	bf00      	nop
 8014498:	40021000 	.word	0x40021000
 801449c:	48001000 	.word	0x48001000

080144a0 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80144a8:	1d39      	adds	r1, r7, #4
 80144aa:	f04f 33ff 	mov.w	r3, #4294967295
 80144ae:	2201      	movs	r2, #1
 80144b0:	4803      	ldr	r0, [pc, #12]	@ (80144c0 <__io_putchar+0x20>)
 80144b2:	f002 f8e5 	bl	8016680 <HAL_UART_Transmit>

  return ch;
 80144b6:	687b      	ldr	r3, [r7, #4]
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	3708      	adds	r7, #8
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}
 80144c0:	20000084 	.word	0x20000084

080144c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80144c4:	b480      	push	{r7}
 80144c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80144c8:	b672      	cpsid	i
}
 80144ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80144cc:	bf00      	nop
 80144ce:	e7fd      	b.n	80144cc <Error_Handler+0x8>

080144d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80144d0:	b480      	push	{r7}
 80144d2:	b083      	sub	sp, #12
 80144d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80144d6:	4b0f      	ldr	r3, [pc, #60]	@ (8014514 <HAL_MspInit+0x44>)
 80144d8:	699b      	ldr	r3, [r3, #24]
 80144da:	4a0e      	ldr	r2, [pc, #56]	@ (8014514 <HAL_MspInit+0x44>)
 80144dc:	f043 0301 	orr.w	r3, r3, #1
 80144e0:	6193      	str	r3, [r2, #24]
 80144e2:	4b0c      	ldr	r3, [pc, #48]	@ (8014514 <HAL_MspInit+0x44>)
 80144e4:	699b      	ldr	r3, [r3, #24]
 80144e6:	f003 0301 	and.w	r3, r3, #1
 80144ea:	607b      	str	r3, [r7, #4]
 80144ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80144ee:	4b09      	ldr	r3, [pc, #36]	@ (8014514 <HAL_MspInit+0x44>)
 80144f0:	69db      	ldr	r3, [r3, #28]
 80144f2:	4a08      	ldr	r2, [pc, #32]	@ (8014514 <HAL_MspInit+0x44>)
 80144f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80144f8:	61d3      	str	r3, [r2, #28]
 80144fa:	4b06      	ldr	r3, [pc, #24]	@ (8014514 <HAL_MspInit+0x44>)
 80144fc:	69db      	ldr	r3, [r3, #28]
 80144fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014502:	603b      	str	r3, [r7, #0]
 8014504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014506:	bf00      	nop
 8014508:	370c      	adds	r7, #12
 801450a:	46bd      	mov	sp, r7
 801450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014510:	4770      	bx	lr
 8014512:	bf00      	nop
 8014514:	40021000 	.word	0x40021000

08014518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b08a      	sub	sp, #40	@ 0x28
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014520:	f107 0314 	add.w	r3, r7, #20
 8014524:	2200      	movs	r2, #0
 8014526:	601a      	str	r2, [r3, #0]
 8014528:	605a      	str	r2, [r3, #4]
 801452a:	609a      	str	r2, [r3, #8]
 801452c:	60da      	str	r2, [r3, #12]
 801452e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	4a17      	ldr	r2, [pc, #92]	@ (8014594 <HAL_UART_MspInit+0x7c>)
 8014536:	4293      	cmp	r3, r2
 8014538:	d127      	bne.n	801458a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801453a:	4b17      	ldr	r3, [pc, #92]	@ (8014598 <HAL_UART_MspInit+0x80>)
 801453c:	699b      	ldr	r3, [r3, #24]
 801453e:	4a16      	ldr	r2, [pc, #88]	@ (8014598 <HAL_UART_MspInit+0x80>)
 8014540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8014544:	6193      	str	r3, [r2, #24]
 8014546:	4b14      	ldr	r3, [pc, #80]	@ (8014598 <HAL_UART_MspInit+0x80>)
 8014548:	699b      	ldr	r3, [r3, #24]
 801454a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801454e:	613b      	str	r3, [r7, #16]
 8014550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014552:	4b11      	ldr	r3, [pc, #68]	@ (8014598 <HAL_UART_MspInit+0x80>)
 8014554:	695b      	ldr	r3, [r3, #20]
 8014556:	4a10      	ldr	r2, [pc, #64]	@ (8014598 <HAL_UART_MspInit+0x80>)
 8014558:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801455c:	6153      	str	r3, [r2, #20]
 801455e:	4b0e      	ldr	r3, [pc, #56]	@ (8014598 <HAL_UART_MspInit+0x80>)
 8014560:	695b      	ldr	r3, [r3, #20]
 8014562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8014566:	60fb      	str	r3, [r7, #12]
 8014568:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 801456a:	2330      	movs	r3, #48	@ 0x30
 801456c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801456e:	2302      	movs	r3, #2
 8014570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014572:	2300      	movs	r3, #0
 8014574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8014576:	2303      	movs	r3, #3
 8014578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801457a:	2307      	movs	r3, #7
 801457c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801457e:	f107 0314 	add.w	r3, r7, #20
 8014582:	4619      	mov	r1, r3
 8014584:	4805      	ldr	r0, [pc, #20]	@ (801459c <HAL_UART_MspInit+0x84>)
 8014586:	f000 fa8d 	bl	8014aa4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 801458a:	bf00      	nop
 801458c:	3728      	adds	r7, #40	@ 0x28
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	40013800 	.word	0x40013800
 8014598:	40021000 	.word	0x40021000
 801459c:	48000800 	.word	0x48000800

080145a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80145a0:	b480      	push	{r7}
 80145a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80145a4:	bf00      	nop
 80145a6:	e7fd      	b.n	80145a4 <NMI_Handler+0x4>

080145a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80145a8:	b480      	push	{r7}
 80145aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80145ac:	bf00      	nop
 80145ae:	e7fd      	b.n	80145ac <HardFault_Handler+0x4>

080145b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80145b0:	b480      	push	{r7}
 80145b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80145b4:	bf00      	nop
 80145b6:	e7fd      	b.n	80145b4 <MemManage_Handler+0x4>

080145b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80145b8:	b480      	push	{r7}
 80145ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80145bc:	bf00      	nop
 80145be:	e7fd      	b.n	80145bc <BusFault_Handler+0x4>

080145c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80145c0:	b480      	push	{r7}
 80145c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80145c4:	bf00      	nop
 80145c6:	e7fd      	b.n	80145c4 <UsageFault_Handler+0x4>

080145c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80145c8:	b480      	push	{r7}
 80145ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80145cc:	bf00      	nop
 80145ce:	46bd      	mov	sp, r7
 80145d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d4:	4770      	bx	lr

080145d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80145d6:	b480      	push	{r7}
 80145d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80145da:	bf00      	nop
 80145dc:	46bd      	mov	sp, r7
 80145de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e2:	4770      	bx	lr

080145e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80145e4:	b480      	push	{r7}
 80145e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80145e8:	bf00      	nop
 80145ea:	46bd      	mov	sp, r7
 80145ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f0:	4770      	bx	lr

080145f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80145f2:	b580      	push	{r7, lr}
 80145f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80145f6:	f000 f92b 	bl	8014850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80145fa:	bf00      	nop
 80145fc:	bd80      	pop	{r7, pc}

080145fe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80145fe:	b580      	push	{r7, lr}
 8014600:	b086      	sub	sp, #24
 8014602:	af00      	add	r7, sp, #0
 8014604:	60f8      	str	r0, [r7, #12]
 8014606:	60b9      	str	r1, [r7, #8]
 8014608:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801460a:	2300      	movs	r3, #0
 801460c:	617b      	str	r3, [r7, #20]
 801460e:	e00a      	b.n	8014626 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8014610:	f3af 8000 	nop.w
 8014614:	4601      	mov	r1, r0
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	1c5a      	adds	r2, r3, #1
 801461a:	60ba      	str	r2, [r7, #8]
 801461c:	b2ca      	uxtb	r2, r1
 801461e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	3301      	adds	r3, #1
 8014624:	617b      	str	r3, [r7, #20]
 8014626:	697a      	ldr	r2, [r7, #20]
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	429a      	cmp	r2, r3
 801462c:	dbf0      	blt.n	8014610 <_read+0x12>
  }

  return len;
 801462e:	687b      	ldr	r3, [r7, #4]
}
 8014630:	4618      	mov	r0, r3
 8014632:	3718      	adds	r7, #24
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}

08014638 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b086      	sub	sp, #24
 801463c:	af00      	add	r7, sp, #0
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	60b9      	str	r1, [r7, #8]
 8014642:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014644:	2300      	movs	r3, #0
 8014646:	617b      	str	r3, [r7, #20]
 8014648:	e009      	b.n	801465e <_write+0x26>
  {
    __io_putchar(*ptr++);
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	1c5a      	adds	r2, r3, #1
 801464e:	60ba      	str	r2, [r7, #8]
 8014650:	781b      	ldrb	r3, [r3, #0]
 8014652:	4618      	mov	r0, r3
 8014654:	f7ff ff24 	bl	80144a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014658:	697b      	ldr	r3, [r7, #20]
 801465a:	3301      	adds	r3, #1
 801465c:	617b      	str	r3, [r7, #20]
 801465e:	697a      	ldr	r2, [r7, #20]
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	429a      	cmp	r2, r3
 8014664:	dbf1      	blt.n	801464a <_write+0x12>
  }
  return len;
 8014666:	687b      	ldr	r3, [r7, #4]
}
 8014668:	4618      	mov	r0, r3
 801466a:	3718      	adds	r7, #24
 801466c:	46bd      	mov	sp, r7
 801466e:	bd80      	pop	{r7, pc}

08014670 <_close>:

int _close(int file)
{
 8014670:	b480      	push	{r7}
 8014672:	b083      	sub	sp, #12
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8014678:	f04f 33ff 	mov.w	r3, #4294967295
}
 801467c:	4618      	mov	r0, r3
 801467e:	370c      	adds	r7, #12
 8014680:	46bd      	mov	sp, r7
 8014682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014686:	4770      	bx	lr

08014688 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014688:	b480      	push	{r7}
 801468a:	b083      	sub	sp, #12
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8014698:	605a      	str	r2, [r3, #4]
  return 0;
 801469a:	2300      	movs	r3, #0
}
 801469c:	4618      	mov	r0, r3
 801469e:	370c      	adds	r7, #12
 80146a0:	46bd      	mov	sp, r7
 80146a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a6:	4770      	bx	lr

080146a8 <_isatty>:

int _isatty(int file)
{
 80146a8:	b480      	push	{r7}
 80146aa:	b083      	sub	sp, #12
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80146b0:	2301      	movs	r3, #1
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	370c      	adds	r7, #12
 80146b6:	46bd      	mov	sp, r7
 80146b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146bc:	4770      	bx	lr

080146be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80146be:	b480      	push	{r7}
 80146c0:	b085      	sub	sp, #20
 80146c2:	af00      	add	r7, sp, #0
 80146c4:	60f8      	str	r0, [r7, #12]
 80146c6:	60b9      	str	r1, [r7, #8]
 80146c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80146ca:	2300      	movs	r3, #0
}
 80146cc:	4618      	mov	r0, r3
 80146ce:	3714      	adds	r7, #20
 80146d0:	46bd      	mov	sp, r7
 80146d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d6:	4770      	bx	lr

080146d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b086      	sub	sp, #24
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80146e0:	4a14      	ldr	r2, [pc, #80]	@ (8014734 <_sbrk+0x5c>)
 80146e2:	4b15      	ldr	r3, [pc, #84]	@ (8014738 <_sbrk+0x60>)
 80146e4:	1ad3      	subs	r3, r2, r3
 80146e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80146ec:	4b13      	ldr	r3, [pc, #76]	@ (801473c <_sbrk+0x64>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d102      	bne.n	80146fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80146f4:	4b11      	ldr	r3, [pc, #68]	@ (801473c <_sbrk+0x64>)
 80146f6:	4a12      	ldr	r2, [pc, #72]	@ (8014740 <_sbrk+0x68>)
 80146f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80146fa:	4b10      	ldr	r3, [pc, #64]	@ (801473c <_sbrk+0x64>)
 80146fc:	681a      	ldr	r2, [r3, #0]
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	4413      	add	r3, r2
 8014702:	693a      	ldr	r2, [r7, #16]
 8014704:	429a      	cmp	r2, r3
 8014706:	d207      	bcs.n	8014718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8014708:	f002 fd9a 	bl	8017240 <__errno>
 801470c:	4603      	mov	r3, r0
 801470e:	220c      	movs	r2, #12
 8014710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8014712:	f04f 33ff 	mov.w	r3, #4294967295
 8014716:	e009      	b.n	801472c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8014718:	4b08      	ldr	r3, [pc, #32]	@ (801473c <_sbrk+0x64>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801471e:	4b07      	ldr	r3, [pc, #28]	@ (801473c <_sbrk+0x64>)
 8014720:	681a      	ldr	r2, [r3, #0]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	4413      	add	r3, r2
 8014726:	4a05      	ldr	r2, [pc, #20]	@ (801473c <_sbrk+0x64>)
 8014728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801472a:	68fb      	ldr	r3, [r7, #12]
}
 801472c:	4618      	mov	r0, r3
 801472e:	3718      	adds	r7, #24
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	2000a000 	.word	0x2000a000
 8014738:	00000400 	.word	0x00000400
 801473c:	2000010c 	.word	0x2000010c
 8014740:	20000260 	.word	0x20000260

08014744 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014744:	b480      	push	{r7}
 8014746:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014748:	4b07      	ldr	r3, [pc, #28]	@ (8014768 <SystemInit+0x24>)
 801474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801474e:	4a06      	ldr	r2, [pc, #24]	@ (8014768 <SystemInit+0x24>)
 8014750:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014754:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8014758:	4b03      	ldr	r3, [pc, #12]	@ (8014768 <SystemInit+0x24>)
 801475a:	4a04      	ldr	r2, [pc, #16]	@ (801476c <SystemInit+0x28>)
 801475c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 801475e:	bf00      	nop
 8014760:	46bd      	mov	sp, r7
 8014762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014766:	4770      	bx	lr
 8014768:	e000ed00 	.word	0xe000ed00
 801476c:	08014000 	.word	0x08014000

08014770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8014770:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80147a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8014774:	f7ff ffe6 	bl	8014744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8014778:	480c      	ldr	r0, [pc, #48]	@ (80147ac <LoopForever+0x6>)
  ldr r1, =_edata
 801477a:	490d      	ldr	r1, [pc, #52]	@ (80147b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 801477c:	4a0d      	ldr	r2, [pc, #52]	@ (80147b4 <LoopForever+0xe>)
  movs r3, #0
 801477e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8014780:	e002      	b.n	8014788 <LoopCopyDataInit>

08014782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8014786:	3304      	adds	r3, #4

08014788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801478a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801478c:	d3f9      	bcc.n	8014782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801478e:	4a0a      	ldr	r2, [pc, #40]	@ (80147b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8014790:	4c0a      	ldr	r4, [pc, #40]	@ (80147bc <LoopForever+0x16>)
  movs r3, #0
 8014792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014794:	e001      	b.n	801479a <LoopFillZerobss>

08014796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014798:	3204      	adds	r2, #4

0801479a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801479a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801479c:	d3fb      	bcc.n	8014796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801479e:	f002 fd55 	bl	801724c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80147a2:	f7ff fd65 	bl	8014270 <main>

080147a6 <LoopForever>:

LoopForever:
    b LoopForever
 80147a6:	e7fe      	b.n	80147a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80147a8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80147ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80147b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80147b4:	08017e90 	.word	0x08017e90
  ldr r2, =_sbss
 80147b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80147bc:	20000260 	.word	0x20000260

080147c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80147c0:	e7fe      	b.n	80147c0 <ADC1_2_IRQHandler>
	...

080147c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80147c8:	4b08      	ldr	r3, [pc, #32]	@ (80147ec <HAL_Init+0x28>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	4a07      	ldr	r2, [pc, #28]	@ (80147ec <HAL_Init+0x28>)
 80147ce:	f043 0310 	orr.w	r3, r3, #16
 80147d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80147d4:	2003      	movs	r0, #3
 80147d6:	f000 f931 	bl	8014a3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80147da:	200f      	movs	r0, #15
 80147dc:	f000 f808 	bl	80147f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80147e0:	f7ff fe76 	bl	80144d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80147e4:	2300      	movs	r3, #0
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	bd80      	pop	{r7, pc}
 80147ea:	bf00      	nop
 80147ec:	40022000 	.word	0x40022000

080147f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b082      	sub	sp, #8
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80147f8:	4b12      	ldr	r3, [pc, #72]	@ (8014844 <HAL_InitTick+0x54>)
 80147fa:	681a      	ldr	r2, [r3, #0]
 80147fc:	4b12      	ldr	r3, [pc, #72]	@ (8014848 <HAL_InitTick+0x58>)
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	4619      	mov	r1, r3
 8014802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014806:	fbb3 f3f1 	udiv	r3, r3, r1
 801480a:	fbb2 f3f3 	udiv	r3, r2, r3
 801480e:	4618      	mov	r0, r3
 8014810:	f000 f93b 	bl	8014a8a <HAL_SYSTICK_Config>
 8014814:	4603      	mov	r3, r0
 8014816:	2b00      	cmp	r3, #0
 8014818:	d001      	beq.n	801481e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801481a:	2301      	movs	r3, #1
 801481c:	e00e      	b.n	801483c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2b0f      	cmp	r3, #15
 8014822:	d80a      	bhi.n	801483a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8014824:	2200      	movs	r2, #0
 8014826:	6879      	ldr	r1, [r7, #4]
 8014828:	f04f 30ff 	mov.w	r0, #4294967295
 801482c:	f000 f911 	bl	8014a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8014830:	4a06      	ldr	r2, [pc, #24]	@ (801484c <HAL_InitTick+0x5c>)
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8014836:	2300      	movs	r3, #0
 8014838:	e000      	b.n	801483c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801483a:	2301      	movs	r3, #1
}
 801483c:	4618      	mov	r0, r3
 801483e:	3708      	adds	r7, #8
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	20000000 	.word	0x20000000
 8014848:	20000008 	.word	0x20000008
 801484c:	20000004 	.word	0x20000004

08014850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014850:	b480      	push	{r7}
 8014852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8014854:	4b06      	ldr	r3, [pc, #24]	@ (8014870 <HAL_IncTick+0x20>)
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	461a      	mov	r2, r3
 801485a:	4b06      	ldr	r3, [pc, #24]	@ (8014874 <HAL_IncTick+0x24>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	4413      	add	r3, r2
 8014860:	4a04      	ldr	r2, [pc, #16]	@ (8014874 <HAL_IncTick+0x24>)
 8014862:	6013      	str	r3, [r2, #0]
}
 8014864:	bf00      	nop
 8014866:	46bd      	mov	sp, r7
 8014868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486c:	4770      	bx	lr
 801486e:	bf00      	nop
 8014870:	20000008 	.word	0x20000008
 8014874:	20000110 	.word	0x20000110

08014878 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014878:	b480      	push	{r7}
 801487a:	af00      	add	r7, sp, #0
  return uwTick;  
 801487c:	4b03      	ldr	r3, [pc, #12]	@ (801488c <HAL_GetTick+0x14>)
 801487e:	681b      	ldr	r3, [r3, #0]
}
 8014880:	4618      	mov	r0, r3
 8014882:	46bd      	mov	sp, r7
 8014884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014888:	4770      	bx	lr
 801488a:	bf00      	nop
 801488c:	20000110 	.word	0x20000110

08014890 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b084      	sub	sp, #16
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014898:	f7ff ffee 	bl	8014878 <HAL_GetTick>
 801489c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148a8:	d005      	beq.n	80148b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80148aa:	4b0a      	ldr	r3, [pc, #40]	@ (80148d4 <HAL_Delay+0x44>)
 80148ac:	781b      	ldrb	r3, [r3, #0]
 80148ae:	461a      	mov	r2, r3
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	4413      	add	r3, r2
 80148b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80148b6:	bf00      	nop
 80148b8:	f7ff ffde 	bl	8014878 <HAL_GetTick>
 80148bc:	4602      	mov	r2, r0
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	1ad3      	subs	r3, r2, r3
 80148c2:	68fa      	ldr	r2, [r7, #12]
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d8f7      	bhi.n	80148b8 <HAL_Delay+0x28>
  {
  }
}
 80148c8:	bf00      	nop
 80148ca:	bf00      	nop
 80148cc:	3710      	adds	r7, #16
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	20000008 	.word	0x20000008

080148d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80148d8:	b480      	push	{r7}
 80148da:	b085      	sub	sp, #20
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	f003 0307 	and.w	r3, r3, #7
 80148e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80148e8:	4b0c      	ldr	r3, [pc, #48]	@ (801491c <__NVIC_SetPriorityGrouping+0x44>)
 80148ea:	68db      	ldr	r3, [r3, #12]
 80148ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80148ee:	68ba      	ldr	r2, [r7, #8]
 80148f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80148f4:	4013      	ands	r3, r2
 80148f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8014900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8014904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801490a:	4a04      	ldr	r2, [pc, #16]	@ (801491c <__NVIC_SetPriorityGrouping+0x44>)
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	60d3      	str	r3, [r2, #12]
}
 8014910:	bf00      	nop
 8014912:	3714      	adds	r7, #20
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr
 801491c:	e000ed00 	.word	0xe000ed00

08014920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8014920:	b480      	push	{r7}
 8014922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014924:	4b04      	ldr	r3, [pc, #16]	@ (8014938 <__NVIC_GetPriorityGrouping+0x18>)
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	0a1b      	lsrs	r3, r3, #8
 801492a:	f003 0307 	and.w	r3, r3, #7
}
 801492e:	4618      	mov	r0, r3
 8014930:	46bd      	mov	sp, r7
 8014932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014936:	4770      	bx	lr
 8014938:	e000ed00 	.word	0xe000ed00

0801493c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801493c:	b480      	push	{r7}
 801493e:	b083      	sub	sp, #12
 8014940:	af00      	add	r7, sp, #0
 8014942:	4603      	mov	r3, r0
 8014944:	6039      	str	r1, [r7, #0]
 8014946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801494c:	2b00      	cmp	r3, #0
 801494e:	db0a      	blt.n	8014966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	b2da      	uxtb	r2, r3
 8014954:	490c      	ldr	r1, [pc, #48]	@ (8014988 <__NVIC_SetPriority+0x4c>)
 8014956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801495a:	0112      	lsls	r2, r2, #4
 801495c:	b2d2      	uxtb	r2, r2
 801495e:	440b      	add	r3, r1
 8014960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8014964:	e00a      	b.n	801497c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	b2da      	uxtb	r2, r3
 801496a:	4908      	ldr	r1, [pc, #32]	@ (801498c <__NVIC_SetPriority+0x50>)
 801496c:	79fb      	ldrb	r3, [r7, #7]
 801496e:	f003 030f 	and.w	r3, r3, #15
 8014972:	3b04      	subs	r3, #4
 8014974:	0112      	lsls	r2, r2, #4
 8014976:	b2d2      	uxtb	r2, r2
 8014978:	440b      	add	r3, r1
 801497a:	761a      	strb	r2, [r3, #24]
}
 801497c:	bf00      	nop
 801497e:	370c      	adds	r7, #12
 8014980:	46bd      	mov	sp, r7
 8014982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014986:	4770      	bx	lr
 8014988:	e000e100 	.word	0xe000e100
 801498c:	e000ed00 	.word	0xe000ed00

08014990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014990:	b480      	push	{r7}
 8014992:	b089      	sub	sp, #36	@ 0x24
 8014994:	af00      	add	r7, sp, #0
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	60b9      	str	r1, [r7, #8]
 801499a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	f003 0307 	and.w	r3, r3, #7
 80149a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80149a4:	69fb      	ldr	r3, [r7, #28]
 80149a6:	f1c3 0307 	rsb	r3, r3, #7
 80149aa:	2b04      	cmp	r3, #4
 80149ac:	bf28      	it	cs
 80149ae:	2304      	movcs	r3, #4
 80149b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80149b2:	69fb      	ldr	r3, [r7, #28]
 80149b4:	3304      	adds	r3, #4
 80149b6:	2b06      	cmp	r3, #6
 80149b8:	d902      	bls.n	80149c0 <NVIC_EncodePriority+0x30>
 80149ba:	69fb      	ldr	r3, [r7, #28]
 80149bc:	3b03      	subs	r3, #3
 80149be:	e000      	b.n	80149c2 <NVIC_EncodePriority+0x32>
 80149c0:	2300      	movs	r3, #0
 80149c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80149c4:	f04f 32ff 	mov.w	r2, #4294967295
 80149c8:	69bb      	ldr	r3, [r7, #24]
 80149ca:	fa02 f303 	lsl.w	r3, r2, r3
 80149ce:	43da      	mvns	r2, r3
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	401a      	ands	r2, r3
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80149d8:	f04f 31ff 	mov.w	r1, #4294967295
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	fa01 f303 	lsl.w	r3, r1, r3
 80149e2:	43d9      	mvns	r1, r3
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80149e8:	4313      	orrs	r3, r2
         );
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3724      	adds	r7, #36	@ 0x24
 80149ee:	46bd      	mov	sp, r7
 80149f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f4:	4770      	bx	lr
	...

080149f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	3b01      	subs	r3, #1
 8014a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014a08:	d301      	bcc.n	8014a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	e00f      	b.n	8014a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8014a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8014a38 <SysTick_Config+0x40>)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	3b01      	subs	r3, #1
 8014a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8014a16:	210f      	movs	r1, #15
 8014a18:	f04f 30ff 	mov.w	r0, #4294967295
 8014a1c:	f7ff ff8e 	bl	801493c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8014a20:	4b05      	ldr	r3, [pc, #20]	@ (8014a38 <SysTick_Config+0x40>)
 8014a22:	2200      	movs	r2, #0
 8014a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8014a26:	4b04      	ldr	r3, [pc, #16]	@ (8014a38 <SysTick_Config+0x40>)
 8014a28:	2207      	movs	r2, #7
 8014a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8014a2c:	2300      	movs	r3, #0
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3708      	adds	r7, #8
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}
 8014a36:	bf00      	nop
 8014a38:	e000e010 	.word	0xe000e010

08014a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b082      	sub	sp, #8
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7ff ff47 	bl	80148d8 <__NVIC_SetPriorityGrouping>
}
 8014a4a:	bf00      	nop
 8014a4c:	3708      	adds	r7, #8
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}

08014a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014a52:	b580      	push	{r7, lr}
 8014a54:	b086      	sub	sp, #24
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	4603      	mov	r3, r0
 8014a5a:	60b9      	str	r1, [r7, #8]
 8014a5c:	607a      	str	r2, [r7, #4]
 8014a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8014a60:	2300      	movs	r3, #0
 8014a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8014a64:	f7ff ff5c 	bl	8014920 <__NVIC_GetPriorityGrouping>
 8014a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	68b9      	ldr	r1, [r7, #8]
 8014a6e:	6978      	ldr	r0, [r7, #20]
 8014a70:	f7ff ff8e 	bl	8014990 <NVIC_EncodePriority>
 8014a74:	4602      	mov	r2, r0
 8014a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a7a:	4611      	mov	r1, r2
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f7ff ff5d 	bl	801493c <__NVIC_SetPriority>
}
 8014a82:	bf00      	nop
 8014a84:	3718      	adds	r7, #24
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}

08014a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8014a8a:	b580      	push	{r7, lr}
 8014a8c:	b082      	sub	sp, #8
 8014a8e:	af00      	add	r7, sp, #0
 8014a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f7ff ffb0 	bl	80149f8 <SysTick_Config>
 8014a98:	4603      	mov	r3, r0
}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	3708      	adds	r7, #8
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}
	...

08014aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b087      	sub	sp, #28
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
 8014aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8014aae:	2300      	movs	r3, #0
 8014ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8014ab2:	e154      	b.n	8014d5e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	681a      	ldr	r2, [r3, #0]
 8014ab8:	2101      	movs	r1, #1
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	fa01 f303 	lsl.w	r3, r1, r3
 8014ac0:	4013      	ands	r3, r2
 8014ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	f000 8146 	beq.w	8014d58 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	685b      	ldr	r3, [r3, #4]
 8014ad0:	f003 0303 	and.w	r3, r3, #3
 8014ad4:	2b01      	cmp	r3, #1
 8014ad6:	d005      	beq.n	8014ae4 <HAL_GPIO_Init+0x40>
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	685b      	ldr	r3, [r3, #4]
 8014adc:	f003 0303 	and.w	r3, r3, #3
 8014ae0:	2b02      	cmp	r3, #2
 8014ae2:	d130      	bne.n	8014b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	689b      	ldr	r3, [r3, #8]
 8014ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	005b      	lsls	r3, r3, #1
 8014aee:	2203      	movs	r2, #3
 8014af0:	fa02 f303 	lsl.w	r3, r2, r3
 8014af4:	43db      	mvns	r3, r3
 8014af6:	693a      	ldr	r2, [r7, #16]
 8014af8:	4013      	ands	r3, r2
 8014afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	68da      	ldr	r2, [r3, #12]
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	005b      	lsls	r3, r3, #1
 8014b04:	fa02 f303 	lsl.w	r3, r2, r3
 8014b08:	693a      	ldr	r2, [r7, #16]
 8014b0a:	4313      	orrs	r3, r2
 8014b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	693a      	ldr	r2, [r7, #16]
 8014b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	685b      	ldr	r3, [r3, #4]
 8014b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014b1a:	2201      	movs	r2, #1
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8014b22:	43db      	mvns	r3, r3
 8014b24:	693a      	ldr	r2, [r7, #16]
 8014b26:	4013      	ands	r3, r2
 8014b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	091b      	lsrs	r3, r3, #4
 8014b30:	f003 0201 	and.w	r2, r3, #1
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	fa02 f303 	lsl.w	r3, r2, r3
 8014b3a:	693a      	ldr	r2, [r7, #16]
 8014b3c:	4313      	orrs	r3, r2
 8014b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	693a      	ldr	r2, [r7, #16]
 8014b44:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	685b      	ldr	r3, [r3, #4]
 8014b4a:	f003 0303 	and.w	r3, r3, #3
 8014b4e:	2b03      	cmp	r3, #3
 8014b50:	d017      	beq.n	8014b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	68db      	ldr	r3, [r3, #12]
 8014b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	005b      	lsls	r3, r3, #1
 8014b5c:	2203      	movs	r2, #3
 8014b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8014b62:	43db      	mvns	r3, r3
 8014b64:	693a      	ldr	r2, [r7, #16]
 8014b66:	4013      	ands	r3, r2
 8014b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	689a      	ldr	r2, [r3, #8]
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	005b      	lsls	r3, r3, #1
 8014b72:	fa02 f303 	lsl.w	r3, r2, r3
 8014b76:	693a      	ldr	r2, [r7, #16]
 8014b78:	4313      	orrs	r3, r2
 8014b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	693a      	ldr	r2, [r7, #16]
 8014b80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	685b      	ldr	r3, [r3, #4]
 8014b86:	f003 0303 	and.w	r3, r3, #3
 8014b8a:	2b02      	cmp	r3, #2
 8014b8c:	d123      	bne.n	8014bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	08da      	lsrs	r2, r3, #3
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	3208      	adds	r2, #8
 8014b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	f003 0307 	and.w	r3, r3, #7
 8014ba2:	009b      	lsls	r3, r3, #2
 8014ba4:	220f      	movs	r2, #15
 8014ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8014baa:	43db      	mvns	r3, r3
 8014bac:	693a      	ldr	r2, [r7, #16]
 8014bae:	4013      	ands	r3, r2
 8014bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	691a      	ldr	r2, [r3, #16]
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	f003 0307 	and.w	r3, r3, #7
 8014bbc:	009b      	lsls	r3, r3, #2
 8014bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8014bc2:	693a      	ldr	r2, [r7, #16]
 8014bc4:	4313      	orrs	r3, r2
 8014bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8014bc8:	697b      	ldr	r3, [r7, #20]
 8014bca:	08da      	lsrs	r2, r3, #3
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	3208      	adds	r2, #8
 8014bd0:	6939      	ldr	r1, [r7, #16]
 8014bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	005b      	lsls	r3, r3, #1
 8014be0:	2203      	movs	r2, #3
 8014be2:	fa02 f303 	lsl.w	r3, r2, r3
 8014be6:	43db      	mvns	r3, r3
 8014be8:	693a      	ldr	r2, [r7, #16]
 8014bea:	4013      	ands	r3, r2
 8014bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	685b      	ldr	r3, [r3, #4]
 8014bf2:	f003 0203 	and.w	r2, r3, #3
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	005b      	lsls	r3, r3, #1
 8014bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8014bfe:	693a      	ldr	r2, [r7, #16]
 8014c00:	4313      	orrs	r3, r2
 8014c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	693a      	ldr	r2, [r7, #16]
 8014c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	f000 80a0 	beq.w	8014d58 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014c18:	4b58      	ldr	r3, [pc, #352]	@ (8014d7c <HAL_GPIO_Init+0x2d8>)
 8014c1a:	699b      	ldr	r3, [r3, #24]
 8014c1c:	4a57      	ldr	r2, [pc, #348]	@ (8014d7c <HAL_GPIO_Init+0x2d8>)
 8014c1e:	f043 0301 	orr.w	r3, r3, #1
 8014c22:	6193      	str	r3, [r2, #24]
 8014c24:	4b55      	ldr	r3, [pc, #340]	@ (8014d7c <HAL_GPIO_Init+0x2d8>)
 8014c26:	699b      	ldr	r3, [r3, #24]
 8014c28:	f003 0301 	and.w	r3, r3, #1
 8014c2c:	60bb      	str	r3, [r7, #8]
 8014c2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8014c30:	4a53      	ldr	r2, [pc, #332]	@ (8014d80 <HAL_GPIO_Init+0x2dc>)
 8014c32:	697b      	ldr	r3, [r7, #20]
 8014c34:	089b      	lsrs	r3, r3, #2
 8014c36:	3302      	adds	r3, #2
 8014c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	f003 0303 	and.w	r3, r3, #3
 8014c44:	009b      	lsls	r3, r3, #2
 8014c46:	220f      	movs	r2, #15
 8014c48:	fa02 f303 	lsl.w	r3, r2, r3
 8014c4c:	43db      	mvns	r3, r3
 8014c4e:	693a      	ldr	r2, [r7, #16]
 8014c50:	4013      	ands	r3, r2
 8014c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8014c5a:	d019      	beq.n	8014c90 <HAL_GPIO_Init+0x1ec>
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	4a49      	ldr	r2, [pc, #292]	@ (8014d84 <HAL_GPIO_Init+0x2e0>)
 8014c60:	4293      	cmp	r3, r2
 8014c62:	d013      	beq.n	8014c8c <HAL_GPIO_Init+0x1e8>
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	4a48      	ldr	r2, [pc, #288]	@ (8014d88 <HAL_GPIO_Init+0x2e4>)
 8014c68:	4293      	cmp	r3, r2
 8014c6a:	d00d      	beq.n	8014c88 <HAL_GPIO_Init+0x1e4>
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	4a47      	ldr	r2, [pc, #284]	@ (8014d8c <HAL_GPIO_Init+0x2e8>)
 8014c70:	4293      	cmp	r3, r2
 8014c72:	d007      	beq.n	8014c84 <HAL_GPIO_Init+0x1e0>
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	4a46      	ldr	r2, [pc, #280]	@ (8014d90 <HAL_GPIO_Init+0x2ec>)
 8014c78:	4293      	cmp	r3, r2
 8014c7a:	d101      	bne.n	8014c80 <HAL_GPIO_Init+0x1dc>
 8014c7c:	2304      	movs	r3, #4
 8014c7e:	e008      	b.n	8014c92 <HAL_GPIO_Init+0x1ee>
 8014c80:	2305      	movs	r3, #5
 8014c82:	e006      	b.n	8014c92 <HAL_GPIO_Init+0x1ee>
 8014c84:	2303      	movs	r3, #3
 8014c86:	e004      	b.n	8014c92 <HAL_GPIO_Init+0x1ee>
 8014c88:	2302      	movs	r3, #2
 8014c8a:	e002      	b.n	8014c92 <HAL_GPIO_Init+0x1ee>
 8014c8c:	2301      	movs	r3, #1
 8014c8e:	e000      	b.n	8014c92 <HAL_GPIO_Init+0x1ee>
 8014c90:	2300      	movs	r3, #0
 8014c92:	697a      	ldr	r2, [r7, #20]
 8014c94:	f002 0203 	and.w	r2, r2, #3
 8014c98:	0092      	lsls	r2, r2, #2
 8014c9a:	4093      	lsls	r3, r2
 8014c9c:	693a      	ldr	r2, [r7, #16]
 8014c9e:	4313      	orrs	r3, r2
 8014ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8014ca2:	4937      	ldr	r1, [pc, #220]	@ (8014d80 <HAL_GPIO_Init+0x2dc>)
 8014ca4:	697b      	ldr	r3, [r7, #20]
 8014ca6:	089b      	lsrs	r3, r3, #2
 8014ca8:	3302      	adds	r3, #2
 8014caa:	693a      	ldr	r2, [r7, #16]
 8014cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8014cb0:	4b38      	ldr	r3, [pc, #224]	@ (8014d94 <HAL_GPIO_Init+0x2f0>)
 8014cb2:	689b      	ldr	r3, [r3, #8]
 8014cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	43db      	mvns	r3, r3
 8014cba:	693a      	ldr	r2, [r7, #16]
 8014cbc:	4013      	ands	r3, r2
 8014cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	685b      	ldr	r3, [r3, #4]
 8014cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d003      	beq.n	8014cd4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8014ccc:	693a      	ldr	r2, [r7, #16]
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	4313      	orrs	r3, r2
 8014cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8014cd4:	4a2f      	ldr	r2, [pc, #188]	@ (8014d94 <HAL_GPIO_Init+0x2f0>)
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8014cda:	4b2e      	ldr	r3, [pc, #184]	@ (8014d94 <HAL_GPIO_Init+0x2f0>)
 8014cdc:	68db      	ldr	r3, [r3, #12]
 8014cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	43db      	mvns	r3, r3
 8014ce4:	693a      	ldr	r2, [r7, #16]
 8014ce6:	4013      	ands	r3, r2
 8014ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d003      	beq.n	8014cfe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8014cf6:	693a      	ldr	r2, [r7, #16]
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	4313      	orrs	r3, r2
 8014cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8014cfe:	4a25      	ldr	r2, [pc, #148]	@ (8014d94 <HAL_GPIO_Init+0x2f0>)
 8014d00:	693b      	ldr	r3, [r7, #16]
 8014d02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8014d04:	4b23      	ldr	r3, [pc, #140]	@ (8014d94 <HAL_GPIO_Init+0x2f0>)
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	43db      	mvns	r3, r3
 8014d0e:	693a      	ldr	r2, [r7, #16]
 8014d10:	4013      	ands	r3, r2
 8014d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	685b      	ldr	r3, [r3, #4]
 8014d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d003      	beq.n	8014d28 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8014d20:	693a      	ldr	r2, [r7, #16]
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	4313      	orrs	r3, r2
 8014d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8014d28:	4a1a      	ldr	r2, [pc, #104]	@ (8014d94 <HAL_GPIO_Init+0x2f0>)
 8014d2a:	693b      	ldr	r3, [r7, #16]
 8014d2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8014d2e:	4b19      	ldr	r3, [pc, #100]	@ (8014d94 <HAL_GPIO_Init+0x2f0>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	43db      	mvns	r3, r3
 8014d38:	693a      	ldr	r2, [r7, #16]
 8014d3a:	4013      	ands	r3, r2
 8014d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	685b      	ldr	r3, [r3, #4]
 8014d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d003      	beq.n	8014d52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8014d4a:	693a      	ldr	r2, [r7, #16]
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	4313      	orrs	r3, r2
 8014d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8014d52:	4a10      	ldr	r2, [pc, #64]	@ (8014d94 <HAL_GPIO_Init+0x2f0>)
 8014d54:	693b      	ldr	r3, [r7, #16]
 8014d56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	3301      	adds	r3, #1
 8014d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8014d5e:	683b      	ldr	r3, [r7, #0]
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	697b      	ldr	r3, [r7, #20]
 8014d64:	fa22 f303 	lsr.w	r3, r2, r3
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	f47f aea3 	bne.w	8014ab4 <HAL_GPIO_Init+0x10>
  }
}
 8014d6e:	bf00      	nop
 8014d70:	bf00      	nop
 8014d72:	371c      	adds	r7, #28
 8014d74:	46bd      	mov	sp, r7
 8014d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7a:	4770      	bx	lr
 8014d7c:	40021000 	.word	0x40021000
 8014d80:	40010000 	.word	0x40010000
 8014d84:	48000400 	.word	0x48000400
 8014d88:	48000800 	.word	0x48000800
 8014d8c:	48000c00 	.word	0x48000c00
 8014d90:	48001000 	.word	0x48001000
 8014d94:	40010400 	.word	0x40010400

08014d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b083      	sub	sp, #12
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	460b      	mov	r3, r1
 8014da2:	807b      	strh	r3, [r7, #2]
 8014da4:	4613      	mov	r3, r2
 8014da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8014da8:	787b      	ldrb	r3, [r7, #1]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d003      	beq.n	8014db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8014dae:	887a      	ldrh	r2, [r7, #2]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8014db4:	e002      	b.n	8014dbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8014db6:	887a      	ldrh	r2, [r7, #2]
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8014dbc:	bf00      	nop
 8014dbe:	370c      	adds	r7, #12
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc6:	4770      	bx	lr

08014dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8014dce:	af00      	add	r7, sp, #0
 8014dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8014dd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8014dd8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8014dde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d102      	bne.n	8014dee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8014de8:	2301      	movs	r3, #1
 8014dea:	f001 b823 	b.w	8015e34 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8014df2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	f003 0301 	and.w	r3, r3, #1
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	f000 817d 	beq.w	80150fe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8014e04:	4bbc      	ldr	r3, [pc, #752]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014e06:	685b      	ldr	r3, [r3, #4]
 8014e08:	f003 030c 	and.w	r3, r3, #12
 8014e0c:	2b04      	cmp	r3, #4
 8014e0e:	d00c      	beq.n	8014e2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8014e10:	4bb9      	ldr	r3, [pc, #740]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014e12:	685b      	ldr	r3, [r3, #4]
 8014e14:	f003 030c 	and.w	r3, r3, #12
 8014e18:	2b08      	cmp	r3, #8
 8014e1a:	d15c      	bne.n	8014ed6 <HAL_RCC_OscConfig+0x10e>
 8014e1c:	4bb6      	ldr	r3, [pc, #728]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014e1e:	685b      	ldr	r3, [r3, #4]
 8014e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014e28:	d155      	bne.n	8014ed6 <HAL_RCC_OscConfig+0x10e>
 8014e2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014e2e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014e32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8014e36:	fa93 f3a3 	rbit	r3, r3
 8014e3a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8014e3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014e42:	fab3 f383 	clz	r3, r3
 8014e46:	b2db      	uxtb	r3, r3
 8014e48:	095b      	lsrs	r3, r3, #5
 8014e4a:	b2db      	uxtb	r3, r3
 8014e4c:	f043 0301 	orr.w	r3, r3, #1
 8014e50:	b2db      	uxtb	r3, r3
 8014e52:	2b01      	cmp	r3, #1
 8014e54:	d102      	bne.n	8014e5c <HAL_RCC_OscConfig+0x94>
 8014e56:	4ba8      	ldr	r3, [pc, #672]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	e015      	b.n	8014e88 <HAL_RCC_OscConfig+0xc0>
 8014e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014e60:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014e64:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8014e68:	fa93 f3a3 	rbit	r3, r3
 8014e6c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8014e70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014e74:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8014e78:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8014e7c:	fa93 f3a3 	rbit	r3, r3
 8014e80:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8014e84:	4b9c      	ldr	r3, [pc, #624]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8014e8c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8014e90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8014e94:	fa92 f2a2 	rbit	r2, r2
 8014e98:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8014e9c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8014ea0:	fab2 f282 	clz	r2, r2
 8014ea4:	b2d2      	uxtb	r2, r2
 8014ea6:	f042 0220 	orr.w	r2, r2, #32
 8014eaa:	b2d2      	uxtb	r2, r2
 8014eac:	f002 021f 	and.w	r2, r2, #31
 8014eb0:	2101      	movs	r1, #1
 8014eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8014eb6:	4013      	ands	r3, r2
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	f000 811f 	beq.w	80150fc <HAL_RCC_OscConfig+0x334>
 8014ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8014ec2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	685b      	ldr	r3, [r3, #4]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	f040 8116 	bne.w	80150fc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8014ed0:	2301      	movs	r3, #1
 8014ed2:	f000 bfaf 	b.w	8015e34 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8014eda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	685b      	ldr	r3, [r3, #4]
 8014ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014ee6:	d106      	bne.n	8014ef6 <HAL_RCC_OscConfig+0x12e>
 8014ee8:	4b83      	ldr	r3, [pc, #524]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	4a82      	ldr	r2, [pc, #520]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014ef2:	6013      	str	r3, [r2, #0]
 8014ef4:	e036      	b.n	8014f64 <HAL_RCC_OscConfig+0x19c>
 8014ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8014efa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d10c      	bne.n	8014f20 <HAL_RCC_OscConfig+0x158>
 8014f06:	4b7c      	ldr	r3, [pc, #496]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	4a7b      	ldr	r2, [pc, #492]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014f10:	6013      	str	r3, [r2, #0]
 8014f12:	4b79      	ldr	r3, [pc, #484]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	4a78      	ldr	r2, [pc, #480]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8014f1c:	6013      	str	r3, [r2, #0]
 8014f1e:	e021      	b.n	8014f64 <HAL_RCC_OscConfig+0x19c>
 8014f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8014f24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	685b      	ldr	r3, [r3, #4]
 8014f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014f30:	d10c      	bne.n	8014f4c <HAL_RCC_OscConfig+0x184>
 8014f32:	4b71      	ldr	r3, [pc, #452]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	4a70      	ldr	r2, [pc, #448]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8014f3c:	6013      	str	r3, [r2, #0]
 8014f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	4a6d      	ldr	r2, [pc, #436]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014f48:	6013      	str	r3, [r2, #0]
 8014f4a:	e00b      	b.n	8014f64 <HAL_RCC_OscConfig+0x19c>
 8014f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	4a69      	ldr	r2, [pc, #420]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014f56:	6013      	str	r3, [r2, #0]
 8014f58:	4b67      	ldr	r3, [pc, #412]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	4a66      	ldr	r2, [pc, #408]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8014f62:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8014f64:	4b64      	ldr	r3, [pc, #400]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f68:	f023 020f 	bic.w	r2, r3, #15
 8014f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8014f70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	689b      	ldr	r3, [r3, #8]
 8014f78:	495f      	ldr	r1, [pc, #380]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014f7a:	4313      	orrs	r3, r2
 8014f7c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8014f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	685b      	ldr	r3, [r3, #4]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d059      	beq.n	8015042 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014f8e:	f7ff fc73 	bl	8014878 <HAL_GetTick>
 8014f92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014f96:	e00a      	b.n	8014fae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014f98:	f7ff fc6e 	bl	8014878 <HAL_GetTick>
 8014f9c:	4602      	mov	r2, r0
 8014f9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8014fa2:	1ad3      	subs	r3, r2, r3
 8014fa4:	2b64      	cmp	r3, #100	@ 0x64
 8014fa6:	d902      	bls.n	8014fae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8014fa8:	2303      	movs	r3, #3
 8014faa:	f000 bf43 	b.w	8015e34 <HAL_RCC_OscConfig+0x106c>
 8014fae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014fb2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014fb6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8014fba:	fa93 f3a3 	rbit	r3, r3
 8014fbe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8014fc2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014fc6:	fab3 f383 	clz	r3, r3
 8014fca:	b2db      	uxtb	r3, r3
 8014fcc:	095b      	lsrs	r3, r3, #5
 8014fce:	b2db      	uxtb	r3, r3
 8014fd0:	f043 0301 	orr.w	r3, r3, #1
 8014fd4:	b2db      	uxtb	r3, r3
 8014fd6:	2b01      	cmp	r3, #1
 8014fd8:	d102      	bne.n	8014fe0 <HAL_RCC_OscConfig+0x218>
 8014fda:	4b47      	ldr	r3, [pc, #284]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	e015      	b.n	801500c <HAL_RCC_OscConfig+0x244>
 8014fe0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014fe4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014fe8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8014fec:	fa93 f3a3 	rbit	r3, r3
 8014ff0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8014ff4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014ff8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8014ffc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8015000:	fa93 f3a3 	rbit	r3, r3
 8015004:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8015008:	4b3b      	ldr	r3, [pc, #236]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 801500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801500c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8015010:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8015014:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8015018:	fa92 f2a2 	rbit	r2, r2
 801501c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8015020:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8015024:	fab2 f282 	clz	r2, r2
 8015028:	b2d2      	uxtb	r2, r2
 801502a:	f042 0220 	orr.w	r2, r2, #32
 801502e:	b2d2      	uxtb	r2, r2
 8015030:	f002 021f 	and.w	r2, r2, #31
 8015034:	2101      	movs	r1, #1
 8015036:	fa01 f202 	lsl.w	r2, r1, r2
 801503a:	4013      	ands	r3, r2
 801503c:	2b00      	cmp	r3, #0
 801503e:	d0ab      	beq.n	8014f98 <HAL_RCC_OscConfig+0x1d0>
 8015040:	e05d      	b.n	80150fe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015042:	f7ff fc19 	bl	8014878 <HAL_GetTick>
 8015046:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801504a:	e00a      	b.n	8015062 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801504c:	f7ff fc14 	bl	8014878 <HAL_GetTick>
 8015050:	4602      	mov	r2, r0
 8015052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8015056:	1ad3      	subs	r3, r2, r3
 8015058:	2b64      	cmp	r3, #100	@ 0x64
 801505a:	d902      	bls.n	8015062 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 801505c:	2303      	movs	r3, #3
 801505e:	f000 bee9 	b.w	8015e34 <HAL_RCC_OscConfig+0x106c>
 8015062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8015066:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801506a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801506e:	fa93 f3a3 	rbit	r3, r3
 8015072:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8015076:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801507a:	fab3 f383 	clz	r3, r3
 801507e:	b2db      	uxtb	r3, r3
 8015080:	095b      	lsrs	r3, r3, #5
 8015082:	b2db      	uxtb	r3, r3
 8015084:	f043 0301 	orr.w	r3, r3, #1
 8015088:	b2db      	uxtb	r3, r3
 801508a:	2b01      	cmp	r3, #1
 801508c:	d102      	bne.n	8015094 <HAL_RCC_OscConfig+0x2cc>
 801508e:	4b1a      	ldr	r3, [pc, #104]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	e015      	b.n	80150c0 <HAL_RCC_OscConfig+0x2f8>
 8015094:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8015098:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801509c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80150a0:	fa93 f3a3 	rbit	r3, r3
 80150a4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80150a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80150ac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80150b0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80150b4:	fa93 f3a3 	rbit	r3, r3
 80150b8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80150bc:	4b0e      	ldr	r3, [pc, #56]	@ (80150f8 <HAL_RCC_OscConfig+0x330>)
 80150be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80150c4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80150c8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80150cc:	fa92 f2a2 	rbit	r2, r2
 80150d0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80150d4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80150d8:	fab2 f282 	clz	r2, r2
 80150dc:	b2d2      	uxtb	r2, r2
 80150de:	f042 0220 	orr.w	r2, r2, #32
 80150e2:	b2d2      	uxtb	r2, r2
 80150e4:	f002 021f 	and.w	r2, r2, #31
 80150e8:	2101      	movs	r1, #1
 80150ea:	fa01 f202 	lsl.w	r2, r1, r2
 80150ee:	4013      	ands	r3, r2
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d1ab      	bne.n	801504c <HAL_RCC_OscConfig+0x284>
 80150f4:	e003      	b.n	80150fe <HAL_RCC_OscConfig+0x336>
 80150f6:	bf00      	nop
 80150f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80150fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80150fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015102:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	f003 0302 	and.w	r3, r3, #2
 801510e:	2b00      	cmp	r3, #0
 8015110:	f000 817d 	beq.w	801540e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8015114:	4ba6      	ldr	r3, [pc, #664]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	f003 030c 	and.w	r3, r3, #12
 801511c:	2b00      	cmp	r3, #0
 801511e:	d00b      	beq.n	8015138 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8015120:	4ba3      	ldr	r3, [pc, #652]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 8015122:	685b      	ldr	r3, [r3, #4]
 8015124:	f003 030c 	and.w	r3, r3, #12
 8015128:	2b08      	cmp	r3, #8
 801512a:	d172      	bne.n	8015212 <HAL_RCC_OscConfig+0x44a>
 801512c:	4ba0      	ldr	r3, [pc, #640]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 801512e:	685b      	ldr	r3, [r3, #4]
 8015130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015134:	2b00      	cmp	r3, #0
 8015136:	d16c      	bne.n	8015212 <HAL_RCC_OscConfig+0x44a>
 8015138:	2302      	movs	r3, #2
 801513a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801513e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8015142:	fa93 f3a3 	rbit	r3, r3
 8015146:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 801514a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801514e:	fab3 f383 	clz	r3, r3
 8015152:	b2db      	uxtb	r3, r3
 8015154:	095b      	lsrs	r3, r3, #5
 8015156:	b2db      	uxtb	r3, r3
 8015158:	f043 0301 	orr.w	r3, r3, #1
 801515c:	b2db      	uxtb	r3, r3
 801515e:	2b01      	cmp	r3, #1
 8015160:	d102      	bne.n	8015168 <HAL_RCC_OscConfig+0x3a0>
 8015162:	4b93      	ldr	r3, [pc, #588]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	e013      	b.n	8015190 <HAL_RCC_OscConfig+0x3c8>
 8015168:	2302      	movs	r3, #2
 801516a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801516e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8015172:	fa93 f3a3 	rbit	r3, r3
 8015176:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 801517a:	2302      	movs	r3, #2
 801517c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8015180:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8015184:	fa93 f3a3 	rbit	r3, r3
 8015188:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 801518c:	4b88      	ldr	r3, [pc, #544]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 801518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015190:	2202      	movs	r2, #2
 8015192:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8015196:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 801519a:	fa92 f2a2 	rbit	r2, r2
 801519e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80151a2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80151a6:	fab2 f282 	clz	r2, r2
 80151aa:	b2d2      	uxtb	r2, r2
 80151ac:	f042 0220 	orr.w	r2, r2, #32
 80151b0:	b2d2      	uxtb	r2, r2
 80151b2:	f002 021f 	and.w	r2, r2, #31
 80151b6:	2101      	movs	r1, #1
 80151b8:	fa01 f202 	lsl.w	r2, r1, r2
 80151bc:	4013      	ands	r3, r2
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d00a      	beq.n	80151d8 <HAL_RCC_OscConfig+0x410>
 80151c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80151c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	691b      	ldr	r3, [r3, #16]
 80151ce:	2b01      	cmp	r3, #1
 80151d0:	d002      	beq.n	80151d8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80151d2:	2301      	movs	r3, #1
 80151d4:	f000 be2e 	b.w	8015e34 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80151d8:	4b75      	ldr	r3, [pc, #468]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80151e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80151e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	695b      	ldr	r3, [r3, #20]
 80151ec:	21f8      	movs	r1, #248	@ 0xf8
 80151ee:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80151f2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80151f6:	fa91 f1a1 	rbit	r1, r1
 80151fa:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80151fe:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8015202:	fab1 f181 	clz	r1, r1
 8015206:	b2c9      	uxtb	r1, r1
 8015208:	408b      	lsls	r3, r1
 801520a:	4969      	ldr	r1, [pc, #420]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 801520c:	4313      	orrs	r3, r2
 801520e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015210:	e0fd      	b.n	801540e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8015212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015216:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	691b      	ldr	r3, [r3, #16]
 801521e:	2b00      	cmp	r3, #0
 8015220:	f000 8088 	beq.w	8015334 <HAL_RCC_OscConfig+0x56c>
 8015224:	2301      	movs	r3, #1
 8015226:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801522a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801522e:	fa93 f3a3 	rbit	r3, r3
 8015232:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8015236:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801523a:	fab3 f383 	clz	r3, r3
 801523e:	b2db      	uxtb	r3, r3
 8015240:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8015244:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8015248:	009b      	lsls	r3, r3, #2
 801524a:	461a      	mov	r2, r3
 801524c:	2301      	movs	r3, #1
 801524e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015250:	f7ff fb12 	bl	8014878 <HAL_GetTick>
 8015254:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015258:	e00a      	b.n	8015270 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801525a:	f7ff fb0d 	bl	8014878 <HAL_GetTick>
 801525e:	4602      	mov	r2, r0
 8015260:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8015264:	1ad3      	subs	r3, r2, r3
 8015266:	2b02      	cmp	r3, #2
 8015268:	d902      	bls.n	8015270 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 801526a:	2303      	movs	r3, #3
 801526c:	f000 bde2 	b.w	8015e34 <HAL_RCC_OscConfig+0x106c>
 8015270:	2302      	movs	r3, #2
 8015272:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015276:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801527a:	fa93 f3a3 	rbit	r3, r3
 801527e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8015282:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015286:	fab3 f383 	clz	r3, r3
 801528a:	b2db      	uxtb	r3, r3
 801528c:	095b      	lsrs	r3, r3, #5
 801528e:	b2db      	uxtb	r3, r3
 8015290:	f043 0301 	orr.w	r3, r3, #1
 8015294:	b2db      	uxtb	r3, r3
 8015296:	2b01      	cmp	r3, #1
 8015298:	d102      	bne.n	80152a0 <HAL_RCC_OscConfig+0x4d8>
 801529a:	4b45      	ldr	r3, [pc, #276]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	e013      	b.n	80152c8 <HAL_RCC_OscConfig+0x500>
 80152a0:	2302      	movs	r3, #2
 80152a2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80152a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80152aa:	fa93 f3a3 	rbit	r3, r3
 80152ae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80152b2:	2302      	movs	r3, #2
 80152b4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80152b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80152bc:	fa93 f3a3 	rbit	r3, r3
 80152c0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80152c4:	4b3a      	ldr	r3, [pc, #232]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 80152c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152c8:	2202      	movs	r2, #2
 80152ca:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80152ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80152d2:	fa92 f2a2 	rbit	r2, r2
 80152d6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80152da:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80152de:	fab2 f282 	clz	r2, r2
 80152e2:	b2d2      	uxtb	r2, r2
 80152e4:	f042 0220 	orr.w	r2, r2, #32
 80152e8:	b2d2      	uxtb	r2, r2
 80152ea:	f002 021f 	and.w	r2, r2, #31
 80152ee:	2101      	movs	r1, #1
 80152f0:	fa01 f202 	lsl.w	r2, r1, r2
 80152f4:	4013      	ands	r3, r2
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d0af      	beq.n	801525a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80152fa:	4b2d      	ldr	r3, [pc, #180]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8015302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015306:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	695b      	ldr	r3, [r3, #20]
 801530e:	21f8      	movs	r1, #248	@ 0xf8
 8015310:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015314:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8015318:	fa91 f1a1 	rbit	r1, r1
 801531c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8015320:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8015324:	fab1 f181 	clz	r1, r1
 8015328:	b2c9      	uxtb	r1, r1
 801532a:	408b      	lsls	r3, r1
 801532c:	4920      	ldr	r1, [pc, #128]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 801532e:	4313      	orrs	r3, r2
 8015330:	600b      	str	r3, [r1, #0]
 8015332:	e06c      	b.n	801540e <HAL_RCC_OscConfig+0x646>
 8015334:	2301      	movs	r3, #1
 8015336:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801533a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801533e:	fa93 f3a3 	rbit	r3, r3
 8015342:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8015346:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801534a:	fab3 f383 	clz	r3, r3
 801534e:	b2db      	uxtb	r3, r3
 8015350:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8015354:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8015358:	009b      	lsls	r3, r3, #2
 801535a:	461a      	mov	r2, r3
 801535c:	2300      	movs	r3, #0
 801535e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015360:	f7ff fa8a 	bl	8014878 <HAL_GetTick>
 8015364:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015368:	e00a      	b.n	8015380 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801536a:	f7ff fa85 	bl	8014878 <HAL_GetTick>
 801536e:	4602      	mov	r2, r0
 8015370:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8015374:	1ad3      	subs	r3, r2, r3
 8015376:	2b02      	cmp	r3, #2
 8015378:	d902      	bls.n	8015380 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 801537a:	2303      	movs	r3, #3
 801537c:	f000 bd5a 	b.w	8015e34 <HAL_RCC_OscConfig+0x106c>
 8015380:	2302      	movs	r3, #2
 8015382:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015386:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801538a:	fa93 f3a3 	rbit	r3, r3
 801538e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8015392:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015396:	fab3 f383 	clz	r3, r3
 801539a:	b2db      	uxtb	r3, r3
 801539c:	095b      	lsrs	r3, r3, #5
 801539e:	b2db      	uxtb	r3, r3
 80153a0:	f043 0301 	orr.w	r3, r3, #1
 80153a4:	b2db      	uxtb	r3, r3
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	d104      	bne.n	80153b4 <HAL_RCC_OscConfig+0x5ec>
 80153aa:	4b01      	ldr	r3, [pc, #4]	@ (80153b0 <HAL_RCC_OscConfig+0x5e8>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	e015      	b.n	80153dc <HAL_RCC_OscConfig+0x614>
 80153b0:	40021000 	.word	0x40021000
 80153b4:	2302      	movs	r3, #2
 80153b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80153ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153be:	fa93 f3a3 	rbit	r3, r3
 80153c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80153c6:	2302      	movs	r3, #2
 80153c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80153cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80153d0:	fa93 f3a3 	rbit	r3, r3
 80153d4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80153d8:	4bc8      	ldr	r3, [pc, #800]	@ (80156fc <HAL_RCC_OscConfig+0x934>)
 80153da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153dc:	2202      	movs	r2, #2
 80153de:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80153e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80153e6:	fa92 f2a2 	rbit	r2, r2
 80153ea:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80153ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80153f2:	fab2 f282 	clz	r2, r2
 80153f6:	b2d2      	uxtb	r2, r2
 80153f8:	f042 0220 	orr.w	r2, r2, #32
 80153fc:	b2d2      	uxtb	r2, r2
 80153fe:	f002 021f 	and.w	r2, r2, #31
 8015402:	2101      	movs	r1, #1
 8015404:	fa01 f202 	lsl.w	r2, r1, r2
 8015408:	4013      	ands	r3, r2
 801540a:	2b00      	cmp	r3, #0
 801540c:	d1ad      	bne.n	801536a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801540e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015412:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	f003 0308 	and.w	r3, r3, #8
 801541e:	2b00      	cmp	r3, #0
 8015420:	f000 8110 	beq.w	8015644 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015428:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	699b      	ldr	r3, [r3, #24]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d079      	beq.n	8015528 <HAL_RCC_OscConfig+0x760>
 8015434:	2301      	movs	r3, #1
 8015436:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801543a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801543e:	fa93 f3a3 	rbit	r3, r3
 8015442:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8015446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801544a:	fab3 f383 	clz	r3, r3
 801544e:	b2db      	uxtb	r3, r3
 8015450:	461a      	mov	r2, r3
 8015452:	4bab      	ldr	r3, [pc, #684]	@ (8015700 <HAL_RCC_OscConfig+0x938>)
 8015454:	4413      	add	r3, r2
 8015456:	009b      	lsls	r3, r3, #2
 8015458:	461a      	mov	r2, r3
 801545a:	2301      	movs	r3, #1
 801545c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801545e:	f7ff fa0b 	bl	8014878 <HAL_GetTick>
 8015462:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015466:	e00a      	b.n	801547e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015468:	f7ff fa06 	bl	8014878 <HAL_GetTick>
 801546c:	4602      	mov	r2, r0
 801546e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8015472:	1ad3      	subs	r3, r2, r3
 8015474:	2b02      	cmp	r3, #2
 8015476:	d902      	bls.n	801547e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8015478:	2303      	movs	r3, #3
 801547a:	f000 bcdb 	b.w	8015e34 <HAL_RCC_OscConfig+0x106c>
 801547e:	2302      	movs	r3, #2
 8015480:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015484:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8015488:	fa93 f3a3 	rbit	r3, r3
 801548c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8015490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015494:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8015498:	2202      	movs	r2, #2
 801549a:	601a      	str	r2, [r3, #0]
 801549c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80154a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	fa93 f2a3 	rbit	r2, r3
 80154aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80154ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80154b2:	601a      	str	r2, [r3, #0]
 80154b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80154b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80154bc:	2202      	movs	r2, #2
 80154be:	601a      	str	r2, [r3, #0]
 80154c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80154c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	fa93 f2a3 	rbit	r2, r3
 80154ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80154d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80154d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80154d8:	4b88      	ldr	r3, [pc, #544]	@ (80156fc <HAL_RCC_OscConfig+0x934>)
 80154da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80154dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80154e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80154e4:	2102      	movs	r1, #2
 80154e6:	6019      	str	r1, [r3, #0]
 80154e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80154ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	fa93 f1a3 	rbit	r1, r3
 80154f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80154fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80154fe:	6019      	str	r1, [r3, #0]
  return result;
 8015500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015504:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	fab3 f383 	clz	r3, r3
 801550e:	b2db      	uxtb	r3, r3
 8015510:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8015514:	b2db      	uxtb	r3, r3
 8015516:	f003 031f 	and.w	r3, r3, #31
 801551a:	2101      	movs	r1, #1
 801551c:	fa01 f303 	lsl.w	r3, r1, r3
 8015520:	4013      	ands	r3, r2
 8015522:	2b00      	cmp	r3, #0
 8015524:	d0a0      	beq.n	8015468 <HAL_RCC_OscConfig+0x6a0>
 8015526:	e08d      	b.n	8015644 <HAL_RCC_OscConfig+0x87c>
 8015528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 801552c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015530:	2201      	movs	r2, #1
 8015532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015538:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	fa93 f2a3 	rbit	r2, r3
 8015542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015546:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801554a:	601a      	str	r2, [r3, #0]
  return result;
 801554c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015550:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015554:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015556:	fab3 f383 	clz	r3, r3
 801555a:	b2db      	uxtb	r3, r3
 801555c:	461a      	mov	r2, r3
 801555e:	4b68      	ldr	r3, [pc, #416]	@ (8015700 <HAL_RCC_OscConfig+0x938>)
 8015560:	4413      	add	r3, r2
 8015562:	009b      	lsls	r3, r3, #2
 8015564:	461a      	mov	r2, r3
 8015566:	2300      	movs	r3, #0
 8015568:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801556a:	f7ff f985 	bl	8014878 <HAL_GetTick>
 801556e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015572:	e00a      	b.n	801558a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015574:	f7ff f980 	bl	8014878 <HAL_GetTick>
 8015578:	4602      	mov	r2, r0
 801557a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 801557e:	1ad3      	subs	r3, r2, r3
 8015580:	2b02      	cmp	r3, #2
 8015582:	d902      	bls.n	801558a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8015584:	2303      	movs	r3, #3
 8015586:	f000 bc55 	b.w	8015e34 <HAL_RCC_OscConfig+0x106c>
 801558a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 801558e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015592:	2202      	movs	r2, #2
 8015594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 801559a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	fa93 f2a3 	rbit	r2, r3
 80155a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80155a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80155ac:	601a      	str	r2, [r3, #0]
 80155ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80155b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80155b6:	2202      	movs	r2, #2
 80155b8:	601a      	str	r2, [r3, #0]
 80155ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80155be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	fa93 f2a3 	rbit	r2, r3
 80155c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80155cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80155d0:	601a      	str	r2, [r3, #0]
 80155d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80155d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80155da:	2202      	movs	r2, #2
 80155dc:	601a      	str	r2, [r3, #0]
 80155de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80155e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	fa93 f2a3 	rbit	r2, r3
 80155ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80155f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80155f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80155f6:	4b41      	ldr	r3, [pc, #260]	@ (80156fc <HAL_RCC_OscConfig+0x934>)
 80155f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80155fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80155fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015602:	2102      	movs	r1, #2
 8015604:	6019      	str	r1, [r3, #0]
 8015606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 801560a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	fa93 f1a3 	rbit	r1, r3
 8015614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015618:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801561c:	6019      	str	r1, [r3, #0]
  return result;
 801561e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015622:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	fab3 f383 	clz	r3, r3
 801562c:	b2db      	uxtb	r3, r3
 801562e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8015632:	b2db      	uxtb	r3, r3
 8015634:	f003 031f 	and.w	r3, r3, #31
 8015638:	2101      	movs	r1, #1
 801563a:	fa01 f303 	lsl.w	r3, r1, r3
 801563e:	4013      	ands	r3, r2
 8015640:	2b00      	cmp	r3, #0
 8015642:	d197      	bne.n	8015574 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015648:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	f003 0304 	and.w	r3, r3, #4
 8015654:	2b00      	cmp	r3, #0
 8015656:	f000 81a1 	beq.w	801599c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 801565a:	2300      	movs	r3, #0
 801565c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015660:	4b26      	ldr	r3, [pc, #152]	@ (80156fc <HAL_RCC_OscConfig+0x934>)
 8015662:	69db      	ldr	r3, [r3, #28]
 8015664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8015668:	2b00      	cmp	r3, #0
 801566a:	d116      	bne.n	801569a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801566c:	4b23      	ldr	r3, [pc, #140]	@ (80156fc <HAL_RCC_OscConfig+0x934>)
 801566e:	69db      	ldr	r3, [r3, #28]
 8015670:	4a22      	ldr	r2, [pc, #136]	@ (80156fc <HAL_RCC_OscConfig+0x934>)
 8015672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015676:	61d3      	str	r3, [r2, #28]
 8015678:	4b20      	ldr	r3, [pc, #128]	@ (80156fc <HAL_RCC_OscConfig+0x934>)
 801567a:	69db      	ldr	r3, [r3, #28]
 801567c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8015680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015684:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8015688:	601a      	str	r2, [r3, #0]
 801568a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 801568e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8015692:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8015694:	2301      	movs	r3, #1
 8015696:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801569a:	4b1a      	ldr	r3, [pc, #104]	@ (8015704 <HAL_RCC_OscConfig+0x93c>)
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d11a      	bne.n	80156dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80156a6:	4b17      	ldr	r3, [pc, #92]	@ (8015704 <HAL_RCC_OscConfig+0x93c>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	4a16      	ldr	r2, [pc, #88]	@ (8015704 <HAL_RCC_OscConfig+0x93c>)
 80156ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80156b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80156b2:	f7ff f8e1 	bl	8014878 <HAL_GetTick>
 80156b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80156ba:	e009      	b.n	80156d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80156bc:	f7ff f8dc 	bl	8014878 <HAL_GetTick>
 80156c0:	4602      	mov	r2, r0
 80156c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80156c6:	1ad3      	subs	r3, r2, r3
 80156c8:	2b64      	cmp	r3, #100	@ 0x64
 80156ca:	d901      	bls.n	80156d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80156cc:	2303      	movs	r3, #3
 80156ce:	e3b1      	b.n	8015e34 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80156d0:	4b0c      	ldr	r3, [pc, #48]	@ (8015704 <HAL_RCC_OscConfig+0x93c>)
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d0ef      	beq.n	80156bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80156dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80156e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	68db      	ldr	r3, [r3, #12]
 80156e8:	2b01      	cmp	r3, #1
 80156ea:	d10d      	bne.n	8015708 <HAL_RCC_OscConfig+0x940>
 80156ec:	4b03      	ldr	r3, [pc, #12]	@ (80156fc <HAL_RCC_OscConfig+0x934>)
 80156ee:	6a1b      	ldr	r3, [r3, #32]
 80156f0:	4a02      	ldr	r2, [pc, #8]	@ (80156fc <HAL_RCC_OscConfig+0x934>)
 80156f2:	f043 0301 	orr.w	r3, r3, #1
 80156f6:	6213      	str	r3, [r2, #32]
 80156f8:	e03c      	b.n	8015774 <HAL_RCC_OscConfig+0x9ac>
 80156fa:	bf00      	nop
 80156fc:	40021000 	.word	0x40021000
 8015700:	10908120 	.word	0x10908120
 8015704:	40007000 	.word	0x40007000
 8015708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 801570c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	68db      	ldr	r3, [r3, #12]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d10c      	bne.n	8015732 <HAL_RCC_OscConfig+0x96a>
 8015718:	4bc1      	ldr	r3, [pc, #772]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 801571a:	6a1b      	ldr	r3, [r3, #32]
 801571c:	4ac0      	ldr	r2, [pc, #768]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 801571e:	f023 0301 	bic.w	r3, r3, #1
 8015722:	6213      	str	r3, [r2, #32]
 8015724:	4bbe      	ldr	r3, [pc, #760]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 8015726:	6a1b      	ldr	r3, [r3, #32]
 8015728:	4abd      	ldr	r2, [pc, #756]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 801572a:	f023 0304 	bic.w	r3, r3, #4
 801572e:	6213      	str	r3, [r2, #32]
 8015730:	e020      	b.n	8015774 <HAL_RCC_OscConfig+0x9ac>
 8015732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015736:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	68db      	ldr	r3, [r3, #12]
 801573e:	2b05      	cmp	r3, #5
 8015740:	d10c      	bne.n	801575c <HAL_RCC_OscConfig+0x994>
 8015742:	4bb7      	ldr	r3, [pc, #732]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 8015744:	6a1b      	ldr	r3, [r3, #32]
 8015746:	4ab6      	ldr	r2, [pc, #728]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 8015748:	f043 0304 	orr.w	r3, r3, #4
 801574c:	6213      	str	r3, [r2, #32]
 801574e:	4bb4      	ldr	r3, [pc, #720]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 8015750:	6a1b      	ldr	r3, [r3, #32]
 8015752:	4ab3      	ldr	r2, [pc, #716]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 8015754:	f043 0301 	orr.w	r3, r3, #1
 8015758:	6213      	str	r3, [r2, #32]
 801575a:	e00b      	b.n	8015774 <HAL_RCC_OscConfig+0x9ac>
 801575c:	4bb0      	ldr	r3, [pc, #704]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 801575e:	6a1b      	ldr	r3, [r3, #32]
 8015760:	4aaf      	ldr	r2, [pc, #700]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 8015762:	f023 0301 	bic.w	r3, r3, #1
 8015766:	6213      	str	r3, [r2, #32]
 8015768:	4bad      	ldr	r3, [pc, #692]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 801576a:	6a1b      	ldr	r3, [r3, #32]
 801576c:	4aac      	ldr	r2, [pc, #688]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 801576e:	f023 0304 	bic.w	r3, r3, #4
 8015772:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015778:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	68db      	ldr	r3, [r3, #12]
 8015780:	2b00      	cmp	r3, #0
 8015782:	f000 8081 	beq.w	8015888 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015786:	f7ff f877 	bl	8014878 <HAL_GetTick>
 801578a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801578e:	e00b      	b.n	80157a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015790:	f7ff f872 	bl	8014878 <HAL_GetTick>
 8015794:	4602      	mov	r2, r0
 8015796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 801579a:	1ad3      	subs	r3, r2, r3
 801579c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80157a0:	4293      	cmp	r3, r2
 80157a2:	d901      	bls.n	80157a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80157a4:	2303      	movs	r3, #3
 80157a6:	e345      	b.n	8015e34 <HAL_RCC_OscConfig+0x106c>
 80157a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80157ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80157b0:	2202      	movs	r2, #2
 80157b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80157b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80157b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	fa93 f2a3 	rbit	r2, r3
 80157c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80157c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80157ca:	601a      	str	r2, [r3, #0]
 80157cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80157d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80157d4:	2202      	movs	r2, #2
 80157d6:	601a      	str	r2, [r3, #0]
 80157d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80157dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	fa93 f2a3 	rbit	r2, r3
 80157e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80157ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80157ee:	601a      	str	r2, [r3, #0]
  return result;
 80157f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80157f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80157f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80157fa:	fab3 f383 	clz	r3, r3
 80157fe:	b2db      	uxtb	r3, r3
 8015800:	095b      	lsrs	r3, r3, #5
 8015802:	b2db      	uxtb	r3, r3
 8015804:	f043 0302 	orr.w	r3, r3, #2
 8015808:	b2db      	uxtb	r3, r3
 801580a:	2b02      	cmp	r3, #2
 801580c:	d102      	bne.n	8015814 <HAL_RCC_OscConfig+0xa4c>
 801580e:	4b84      	ldr	r3, [pc, #528]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 8015810:	6a1b      	ldr	r3, [r3, #32]
 8015812:	e013      	b.n	801583c <HAL_RCC_OscConfig+0xa74>
 8015814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015818:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801581c:	2202      	movs	r2, #2
 801581e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015824:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	fa93 f2a3 	rbit	r2, r3
 801582e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015832:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8015836:	601a      	str	r2, [r3, #0]
 8015838:	4b79      	ldr	r3, [pc, #484]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 801583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801583c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015840:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8015844:	2102      	movs	r1, #2
 8015846:	6011      	str	r1, [r2, #0]
 8015848:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 801584c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8015850:	6812      	ldr	r2, [r2, #0]
 8015852:	fa92 f1a2 	rbit	r1, r2
 8015856:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 801585a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 801585e:	6011      	str	r1, [r2, #0]
  return result;
 8015860:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015864:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8015868:	6812      	ldr	r2, [r2, #0]
 801586a:	fab2 f282 	clz	r2, r2
 801586e:	b2d2      	uxtb	r2, r2
 8015870:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015874:	b2d2      	uxtb	r2, r2
 8015876:	f002 021f 	and.w	r2, r2, #31
 801587a:	2101      	movs	r1, #1
 801587c:	fa01 f202 	lsl.w	r2, r1, r2
 8015880:	4013      	ands	r3, r2
 8015882:	2b00      	cmp	r3, #0
 8015884:	d084      	beq.n	8015790 <HAL_RCC_OscConfig+0x9c8>
 8015886:	e07f      	b.n	8015988 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015888:	f7fe fff6 	bl	8014878 <HAL_GetTick>
 801588c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015890:	e00b      	b.n	80158aa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015892:	f7fe fff1 	bl	8014878 <HAL_GetTick>
 8015896:	4602      	mov	r2, r0
 8015898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 801589c:	1ad3      	subs	r3, r2, r3
 801589e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80158a2:	4293      	cmp	r3, r2
 80158a4:	d901      	bls.n	80158aa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80158a6:	2303      	movs	r3, #3
 80158a8:	e2c4      	b.n	8015e34 <HAL_RCC_OscConfig+0x106c>
 80158aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80158ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80158b2:	2202      	movs	r2, #2
 80158b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80158b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80158ba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	fa93 f2a3 	rbit	r2, r3
 80158c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80158c8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80158cc:	601a      	str	r2, [r3, #0]
 80158ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80158d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80158d6:	2202      	movs	r2, #2
 80158d8:	601a      	str	r2, [r3, #0]
 80158da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80158de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	fa93 f2a3 	rbit	r2, r3
 80158e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80158ec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80158f0:	601a      	str	r2, [r3, #0]
  return result;
 80158f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80158f6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80158fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80158fc:	fab3 f383 	clz	r3, r3
 8015900:	b2db      	uxtb	r3, r3
 8015902:	095b      	lsrs	r3, r3, #5
 8015904:	b2db      	uxtb	r3, r3
 8015906:	f043 0302 	orr.w	r3, r3, #2
 801590a:	b2db      	uxtb	r3, r3
 801590c:	2b02      	cmp	r3, #2
 801590e:	d102      	bne.n	8015916 <HAL_RCC_OscConfig+0xb4e>
 8015910:	4b43      	ldr	r3, [pc, #268]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 8015912:	6a1b      	ldr	r3, [r3, #32]
 8015914:	e013      	b.n	801593e <HAL_RCC_OscConfig+0xb76>
 8015916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 801591a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801591e:	2202      	movs	r2, #2
 8015920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015926:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	fa93 f2a3 	rbit	r2, r3
 8015930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015934:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8015938:	601a      	str	r2, [r3, #0]
 801593a:	4b39      	ldr	r3, [pc, #228]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 801593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801593e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015942:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8015946:	2102      	movs	r1, #2
 8015948:	6011      	str	r1, [r2, #0]
 801594a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 801594e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8015952:	6812      	ldr	r2, [r2, #0]
 8015954:	fa92 f1a2 	rbit	r1, r2
 8015958:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 801595c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8015960:	6011      	str	r1, [r2, #0]
  return result;
 8015962:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015966:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 801596a:	6812      	ldr	r2, [r2, #0]
 801596c:	fab2 f282 	clz	r2, r2
 8015970:	b2d2      	uxtb	r2, r2
 8015972:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015976:	b2d2      	uxtb	r2, r2
 8015978:	f002 021f 	and.w	r2, r2, #31
 801597c:	2101      	movs	r1, #1
 801597e:	fa01 f202 	lsl.w	r2, r1, r2
 8015982:	4013      	ands	r3, r2
 8015984:	2b00      	cmp	r3, #0
 8015986:	d184      	bne.n	8015892 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015988:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 801598c:	2b01      	cmp	r3, #1
 801598e:	d105      	bne.n	801599c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015990:	4b23      	ldr	r3, [pc, #140]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 8015992:	69db      	ldr	r3, [r3, #28]
 8015994:	4a22      	ldr	r2, [pc, #136]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 8015996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801599a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801599c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80159a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	69db      	ldr	r3, [r3, #28]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	f000 8242 	beq.w	8015e32 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80159ae:	4b1c      	ldr	r3, [pc, #112]	@ (8015a20 <HAL_RCC_OscConfig+0xc58>)
 80159b0:	685b      	ldr	r3, [r3, #4]
 80159b2:	f003 030c 	and.w	r3, r3, #12
 80159b6:	2b08      	cmp	r3, #8
 80159b8:	f000 8213 	beq.w	8015de2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80159bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80159c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	69db      	ldr	r3, [r3, #28]
 80159c8:	2b02      	cmp	r3, #2
 80159ca:	f040 8162 	bne.w	8015c92 <HAL_RCC_OscConfig+0xeca>
 80159ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80159d2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80159d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80159da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80159dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80159e0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	fa93 f2a3 	rbit	r2, r3
 80159ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80159ee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80159f2:	601a      	str	r2, [r3, #0]
  return result;
 80159f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80159f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80159fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80159fe:	fab3 f383 	clz	r3, r3
 8015a02:	b2db      	uxtb	r3, r3
 8015a04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8015a08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8015a0c:	009b      	lsls	r3, r3, #2
 8015a0e:	461a      	mov	r2, r3
 8015a10:	2300      	movs	r3, #0
 8015a12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015a14:	f7fe ff30 	bl	8014878 <HAL_GetTick>
 8015a18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8015a1c:	e00c      	b.n	8015a38 <HAL_RCC_OscConfig+0xc70>
 8015a1e:	bf00      	nop
 8015a20:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015a24:	f7fe ff28 	bl	8014878 <HAL_GetTick>
 8015a28:	4602      	mov	r2, r0
 8015a2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8015a2e:	1ad3      	subs	r3, r2, r3
 8015a30:	2b02      	cmp	r3, #2
 8015a32:	d901      	bls.n	8015a38 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8015a34:	2303      	movs	r3, #3
 8015a36:	e1fd      	b.n	8015e34 <HAL_RCC_OscConfig+0x106c>
 8015a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015a3c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8015a40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8015a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015a4a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	fa93 f2a3 	rbit	r2, r3
 8015a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015a58:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8015a5c:	601a      	str	r2, [r3, #0]
  return result;
 8015a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015a62:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8015a66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8015a68:	fab3 f383 	clz	r3, r3
 8015a6c:	b2db      	uxtb	r3, r3
 8015a6e:	095b      	lsrs	r3, r3, #5
 8015a70:	b2db      	uxtb	r3, r3
 8015a72:	f043 0301 	orr.w	r3, r3, #1
 8015a76:	b2db      	uxtb	r3, r3
 8015a78:	2b01      	cmp	r3, #1
 8015a7a:	d102      	bne.n	8015a82 <HAL_RCC_OscConfig+0xcba>
 8015a7c:	4bb0      	ldr	r3, [pc, #704]	@ (8015d40 <HAL_RCC_OscConfig+0xf78>)
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	e027      	b.n	8015ad2 <HAL_RCC_OscConfig+0xd0a>
 8015a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015a86:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8015a8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8015a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015a94:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	fa93 f2a3 	rbit	r2, r3
 8015a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015aa2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8015aa6:	601a      	str	r2, [r3, #0]
 8015aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015aac:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8015ab0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8015ab4:	601a      	str	r2, [r3, #0]
 8015ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015aba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	fa93 f2a3 	rbit	r2, r3
 8015ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015ac8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8015acc:	601a      	str	r2, [r3, #0]
 8015ace:	4b9c      	ldr	r3, [pc, #624]	@ (8015d40 <HAL_RCC_OscConfig+0xf78>)
 8015ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ad2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015ad6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8015ada:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8015ade:	6011      	str	r1, [r2, #0]
 8015ae0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015ae4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8015ae8:	6812      	ldr	r2, [r2, #0]
 8015aea:	fa92 f1a2 	rbit	r1, r2
 8015aee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015af2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8015af6:	6011      	str	r1, [r2, #0]
  return result;
 8015af8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015afc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8015b00:	6812      	ldr	r2, [r2, #0]
 8015b02:	fab2 f282 	clz	r2, r2
 8015b06:	b2d2      	uxtb	r2, r2
 8015b08:	f042 0220 	orr.w	r2, r2, #32
 8015b0c:	b2d2      	uxtb	r2, r2
 8015b0e:	f002 021f 	and.w	r2, r2, #31
 8015b12:	2101      	movs	r1, #1
 8015b14:	fa01 f202 	lsl.w	r2, r1, r2
 8015b18:	4013      	ands	r3, r2
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d182      	bne.n	8015a24 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015b1e:	4b88      	ldr	r3, [pc, #544]	@ (8015d40 <HAL_RCC_OscConfig+0xf78>)
 8015b20:	685b      	ldr	r3, [r3, #4]
 8015b22:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8015b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8015b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015b36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	6a1b      	ldr	r3, [r3, #32]
 8015b3e:	430b      	orrs	r3, r1
 8015b40:	497f      	ldr	r1, [pc, #508]	@ (8015d40 <HAL_RCC_OscConfig+0xf78>)
 8015b42:	4313      	orrs	r3, r2
 8015b44:	604b      	str	r3, [r1, #4]
 8015b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015b4a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8015b4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015b58:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	fa93 f2a3 	rbit	r2, r3
 8015b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015b66:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8015b6a:	601a      	str	r2, [r3, #0]
  return result;
 8015b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015b70:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8015b74:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015b76:	fab3 f383 	clz	r3, r3
 8015b7a:	b2db      	uxtb	r3, r3
 8015b7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8015b80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8015b84:	009b      	lsls	r3, r3, #2
 8015b86:	461a      	mov	r2, r3
 8015b88:	2301      	movs	r3, #1
 8015b8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015b8c:	f7fe fe74 	bl	8014878 <HAL_GetTick>
 8015b90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8015b94:	e009      	b.n	8015baa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015b96:	f7fe fe6f 	bl	8014878 <HAL_GetTick>
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8015ba0:	1ad3      	subs	r3, r2, r3
 8015ba2:	2b02      	cmp	r3, #2
 8015ba4:	d901      	bls.n	8015baa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8015ba6:	2303      	movs	r3, #3
 8015ba8:	e144      	b.n	8015e34 <HAL_RCC_OscConfig+0x106c>
 8015baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015bae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8015bb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8015bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015bbc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	fa93 f2a3 	rbit	r2, r3
 8015bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015bca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8015bce:	601a      	str	r2, [r3, #0]
  return result;
 8015bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015bd4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8015bd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8015bda:	fab3 f383 	clz	r3, r3
 8015bde:	b2db      	uxtb	r3, r3
 8015be0:	095b      	lsrs	r3, r3, #5
 8015be2:	b2db      	uxtb	r3, r3
 8015be4:	f043 0301 	orr.w	r3, r3, #1
 8015be8:	b2db      	uxtb	r3, r3
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d102      	bne.n	8015bf4 <HAL_RCC_OscConfig+0xe2c>
 8015bee:	4b54      	ldr	r3, [pc, #336]	@ (8015d40 <HAL_RCC_OscConfig+0xf78>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	e027      	b.n	8015c44 <HAL_RCC_OscConfig+0xe7c>
 8015bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015bf8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8015bfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8015c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015c06:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	fa93 f2a3 	rbit	r2, r3
 8015c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015c14:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8015c18:	601a      	str	r2, [r3, #0]
 8015c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015c1e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8015c22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8015c26:	601a      	str	r2, [r3, #0]
 8015c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015c2c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	fa93 f2a3 	rbit	r2, r3
 8015c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015c3a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8015c3e:	601a      	str	r2, [r3, #0]
 8015c40:	4b3f      	ldr	r3, [pc, #252]	@ (8015d40 <HAL_RCC_OscConfig+0xf78>)
 8015c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015c48:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8015c4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8015c50:	6011      	str	r1, [r2, #0]
 8015c52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015c56:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8015c5a:	6812      	ldr	r2, [r2, #0]
 8015c5c:	fa92 f1a2 	rbit	r1, r2
 8015c60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015c64:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8015c68:	6011      	str	r1, [r2, #0]
  return result;
 8015c6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015c6e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8015c72:	6812      	ldr	r2, [r2, #0]
 8015c74:	fab2 f282 	clz	r2, r2
 8015c78:	b2d2      	uxtb	r2, r2
 8015c7a:	f042 0220 	orr.w	r2, r2, #32
 8015c7e:	b2d2      	uxtb	r2, r2
 8015c80:	f002 021f 	and.w	r2, r2, #31
 8015c84:	2101      	movs	r1, #1
 8015c86:	fa01 f202 	lsl.w	r2, r1, r2
 8015c8a:	4013      	ands	r3, r2
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d082      	beq.n	8015b96 <HAL_RCC_OscConfig+0xdce>
 8015c90:	e0cf      	b.n	8015e32 <HAL_RCC_OscConfig+0x106a>
 8015c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015c96:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8015c9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015ca4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	fa93 f2a3 	rbit	r2, r3
 8015cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015cb2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8015cb6:	601a      	str	r2, [r3, #0]
  return result;
 8015cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015cbc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8015cc0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015cc2:	fab3 f383 	clz	r3, r3
 8015cc6:	b2db      	uxtb	r3, r3
 8015cc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8015ccc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8015cd0:	009b      	lsls	r3, r3, #2
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cd8:	f7fe fdce 	bl	8014878 <HAL_GetTick>
 8015cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8015ce0:	e009      	b.n	8015cf6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015ce2:	f7fe fdc9 	bl	8014878 <HAL_GetTick>
 8015ce6:	4602      	mov	r2, r0
 8015ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8015cec:	1ad3      	subs	r3, r2, r3
 8015cee:	2b02      	cmp	r3, #2
 8015cf0:	d901      	bls.n	8015cf6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8015cf2:	2303      	movs	r3, #3
 8015cf4:	e09e      	b.n	8015e34 <HAL_RCC_OscConfig+0x106c>
 8015cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015cfa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8015cfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8015d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015d08:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	fa93 f2a3 	rbit	r2, r3
 8015d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015d16:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8015d1a:	601a      	str	r2, [r3, #0]
  return result;
 8015d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015d20:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8015d24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8015d26:	fab3 f383 	clz	r3, r3
 8015d2a:	b2db      	uxtb	r3, r3
 8015d2c:	095b      	lsrs	r3, r3, #5
 8015d2e:	b2db      	uxtb	r3, r3
 8015d30:	f043 0301 	orr.w	r3, r3, #1
 8015d34:	b2db      	uxtb	r3, r3
 8015d36:	2b01      	cmp	r3, #1
 8015d38:	d104      	bne.n	8015d44 <HAL_RCC_OscConfig+0xf7c>
 8015d3a:	4b01      	ldr	r3, [pc, #4]	@ (8015d40 <HAL_RCC_OscConfig+0xf78>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	e029      	b.n	8015d94 <HAL_RCC_OscConfig+0xfcc>
 8015d40:	40021000 	.word	0x40021000
 8015d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015d48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015d4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8015d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015d56:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	fa93 f2a3 	rbit	r2, r3
 8015d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015d64:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8015d68:	601a      	str	r2, [r3, #0]
 8015d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015d6e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8015d72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8015d76:	601a      	str	r2, [r3, #0]
 8015d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015d7c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	fa93 f2a3 	rbit	r2, r3
 8015d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015d8a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8015d8e:	601a      	str	r2, [r3, #0]
 8015d90:	4b2b      	ldr	r3, [pc, #172]	@ (8015e40 <HAL_RCC_OscConfig+0x1078>)
 8015d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015d98:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8015d9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8015da0:	6011      	str	r1, [r2, #0]
 8015da2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015da6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8015daa:	6812      	ldr	r2, [r2, #0]
 8015dac:	fa92 f1a2 	rbit	r1, r2
 8015db0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015db4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8015db8:	6011      	str	r1, [r2, #0]
  return result;
 8015dba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8015dbe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8015dc2:	6812      	ldr	r2, [r2, #0]
 8015dc4:	fab2 f282 	clz	r2, r2
 8015dc8:	b2d2      	uxtb	r2, r2
 8015dca:	f042 0220 	orr.w	r2, r2, #32
 8015dce:	b2d2      	uxtb	r2, r2
 8015dd0:	f002 021f 	and.w	r2, r2, #31
 8015dd4:	2101      	movs	r1, #1
 8015dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8015dda:	4013      	ands	r3, r2
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d180      	bne.n	8015ce2 <HAL_RCC_OscConfig+0xf1a>
 8015de0:	e027      	b.n	8015e32 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8015de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015de6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	69db      	ldr	r3, [r3, #28]
 8015dee:	2b01      	cmp	r3, #1
 8015df0:	d101      	bne.n	8015df6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8015df2:	2301      	movs	r3, #1
 8015df4:	e01e      	b.n	8015e34 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8015df6:	4b12      	ldr	r3, [pc, #72]	@ (8015e40 <HAL_RCC_OscConfig+0x1078>)
 8015df8:	685b      	ldr	r3, [r3, #4]
 8015dfa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8015dfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8015e02:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8015e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	6a1b      	ldr	r3, [r3, #32]
 8015e12:	429a      	cmp	r2, r3
 8015e14:	d10b      	bne.n	8015e2e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8015e16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8015e1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8015e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8015e22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d001      	beq.n	8015e32 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8015e2e:	2301      	movs	r3, #1
 8015e30:	e000      	b.n	8015e34 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8015e32:	2300      	movs	r3, #0
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}
 8015e3e:	bf00      	nop
 8015e40:	40021000 	.word	0x40021000

08015e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b09e      	sub	sp, #120	@ 0x78
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
 8015e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d101      	bne.n	8015e5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8015e58:	2301      	movs	r3, #1
 8015e5a:	e162      	b.n	8016122 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8015e5c:	4b90      	ldr	r3, [pc, #576]	@ (80160a0 <HAL_RCC_ClockConfig+0x25c>)
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	f003 0307 	and.w	r3, r3, #7
 8015e64:	683a      	ldr	r2, [r7, #0]
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d910      	bls.n	8015e8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80160a0 <HAL_RCC_ClockConfig+0x25c>)
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	f023 0207 	bic.w	r2, r3, #7
 8015e72:	498b      	ldr	r1, [pc, #556]	@ (80160a0 <HAL_RCC_ClockConfig+0x25c>)
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	4313      	orrs	r3, r2
 8015e78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8015e7a:	4b89      	ldr	r3, [pc, #548]	@ (80160a0 <HAL_RCC_ClockConfig+0x25c>)
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f003 0307 	and.w	r3, r3, #7
 8015e82:	683a      	ldr	r2, [r7, #0]
 8015e84:	429a      	cmp	r2, r3
 8015e86:	d001      	beq.n	8015e8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8015e88:	2301      	movs	r3, #1
 8015e8a:	e14a      	b.n	8016122 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	f003 0302 	and.w	r3, r3, #2
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d008      	beq.n	8015eaa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015e98:	4b82      	ldr	r3, [pc, #520]	@ (80160a4 <HAL_RCC_ClockConfig+0x260>)
 8015e9a:	685b      	ldr	r3, [r3, #4]
 8015e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	689b      	ldr	r3, [r3, #8]
 8015ea4:	497f      	ldr	r1, [pc, #508]	@ (80160a4 <HAL_RCC_ClockConfig+0x260>)
 8015ea6:	4313      	orrs	r3, r2
 8015ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	f003 0301 	and.w	r3, r3, #1
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	f000 80dc 	beq.w	8016070 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	2b01      	cmp	r3, #1
 8015ebe:	d13c      	bne.n	8015f3a <HAL_RCC_ClockConfig+0xf6>
 8015ec0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8015ec4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015ec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015ec8:	fa93 f3a3 	rbit	r3, r3
 8015ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8015ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015ed0:	fab3 f383 	clz	r3, r3
 8015ed4:	b2db      	uxtb	r3, r3
 8015ed6:	095b      	lsrs	r3, r3, #5
 8015ed8:	b2db      	uxtb	r3, r3
 8015eda:	f043 0301 	orr.w	r3, r3, #1
 8015ede:	b2db      	uxtb	r3, r3
 8015ee0:	2b01      	cmp	r3, #1
 8015ee2:	d102      	bne.n	8015eea <HAL_RCC_ClockConfig+0xa6>
 8015ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80160a4 <HAL_RCC_ClockConfig+0x260>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	e00f      	b.n	8015f0a <HAL_RCC_ClockConfig+0xc6>
 8015eea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8015eee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015ef2:	fa93 f3a3 	rbit	r3, r3
 8015ef6:	667b      	str	r3, [r7, #100]	@ 0x64
 8015ef8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8015efc:	663b      	str	r3, [r7, #96]	@ 0x60
 8015efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015f00:	fa93 f3a3 	rbit	r3, r3
 8015f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015f06:	4b67      	ldr	r3, [pc, #412]	@ (80160a4 <HAL_RCC_ClockConfig+0x260>)
 8015f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8015f0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8015f10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015f12:	fa92 f2a2 	rbit	r2, r2
 8015f16:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8015f18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015f1a:	fab2 f282 	clz	r2, r2
 8015f1e:	b2d2      	uxtb	r2, r2
 8015f20:	f042 0220 	orr.w	r2, r2, #32
 8015f24:	b2d2      	uxtb	r2, r2
 8015f26:	f002 021f 	and.w	r2, r2, #31
 8015f2a:	2101      	movs	r1, #1
 8015f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8015f30:	4013      	ands	r3, r2
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d17b      	bne.n	801602e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8015f36:	2301      	movs	r3, #1
 8015f38:	e0f3      	b.n	8016122 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	685b      	ldr	r3, [r3, #4]
 8015f3e:	2b02      	cmp	r3, #2
 8015f40:	d13c      	bne.n	8015fbc <HAL_RCC_ClockConfig+0x178>
 8015f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8015f46:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f4a:	fa93 f3a3 	rbit	r3, r3
 8015f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8015f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015f52:	fab3 f383 	clz	r3, r3
 8015f56:	b2db      	uxtb	r3, r3
 8015f58:	095b      	lsrs	r3, r3, #5
 8015f5a:	b2db      	uxtb	r3, r3
 8015f5c:	f043 0301 	orr.w	r3, r3, #1
 8015f60:	b2db      	uxtb	r3, r3
 8015f62:	2b01      	cmp	r3, #1
 8015f64:	d102      	bne.n	8015f6c <HAL_RCC_ClockConfig+0x128>
 8015f66:	4b4f      	ldr	r3, [pc, #316]	@ (80160a4 <HAL_RCC_ClockConfig+0x260>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	e00f      	b.n	8015f8c <HAL_RCC_ClockConfig+0x148>
 8015f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8015f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015f74:	fa93 f3a3 	rbit	r3, r3
 8015f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8015f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8015f7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8015f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015f82:	fa93 f3a3 	rbit	r3, r3
 8015f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015f88:	4b46      	ldr	r3, [pc, #280]	@ (80160a4 <HAL_RCC_ClockConfig+0x260>)
 8015f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8015f90:	63ba      	str	r2, [r7, #56]	@ 0x38
 8015f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015f94:	fa92 f2a2 	rbit	r2, r2
 8015f98:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8015f9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015f9c:	fab2 f282 	clz	r2, r2
 8015fa0:	b2d2      	uxtb	r2, r2
 8015fa2:	f042 0220 	orr.w	r2, r2, #32
 8015fa6:	b2d2      	uxtb	r2, r2
 8015fa8:	f002 021f 	and.w	r2, r2, #31
 8015fac:	2101      	movs	r1, #1
 8015fae:	fa01 f202 	lsl.w	r2, r1, r2
 8015fb2:	4013      	ands	r3, r2
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d13a      	bne.n	801602e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8015fb8:	2301      	movs	r3, #1
 8015fba:	e0b2      	b.n	8016122 <HAL_RCC_ClockConfig+0x2de>
 8015fbc:	2302      	movs	r3, #2
 8015fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fc2:	fa93 f3a3 	rbit	r3, r3
 8015fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8015fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015fca:	fab3 f383 	clz	r3, r3
 8015fce:	b2db      	uxtb	r3, r3
 8015fd0:	095b      	lsrs	r3, r3, #5
 8015fd2:	b2db      	uxtb	r3, r3
 8015fd4:	f043 0301 	orr.w	r3, r3, #1
 8015fd8:	b2db      	uxtb	r3, r3
 8015fda:	2b01      	cmp	r3, #1
 8015fdc:	d102      	bne.n	8015fe4 <HAL_RCC_ClockConfig+0x1a0>
 8015fde:	4b31      	ldr	r3, [pc, #196]	@ (80160a4 <HAL_RCC_ClockConfig+0x260>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	e00d      	b.n	8016000 <HAL_RCC_ClockConfig+0x1bc>
 8015fe4:	2302      	movs	r3, #2
 8015fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fea:	fa93 f3a3 	rbit	r3, r3
 8015fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8015ff0:	2302      	movs	r3, #2
 8015ff2:	623b      	str	r3, [r7, #32]
 8015ff4:	6a3b      	ldr	r3, [r7, #32]
 8015ff6:	fa93 f3a3 	rbit	r3, r3
 8015ffa:	61fb      	str	r3, [r7, #28]
 8015ffc:	4b29      	ldr	r3, [pc, #164]	@ (80160a4 <HAL_RCC_ClockConfig+0x260>)
 8015ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016000:	2202      	movs	r2, #2
 8016002:	61ba      	str	r2, [r7, #24]
 8016004:	69ba      	ldr	r2, [r7, #24]
 8016006:	fa92 f2a2 	rbit	r2, r2
 801600a:	617a      	str	r2, [r7, #20]
  return result;
 801600c:	697a      	ldr	r2, [r7, #20]
 801600e:	fab2 f282 	clz	r2, r2
 8016012:	b2d2      	uxtb	r2, r2
 8016014:	f042 0220 	orr.w	r2, r2, #32
 8016018:	b2d2      	uxtb	r2, r2
 801601a:	f002 021f 	and.w	r2, r2, #31
 801601e:	2101      	movs	r1, #1
 8016020:	fa01 f202 	lsl.w	r2, r1, r2
 8016024:	4013      	ands	r3, r2
 8016026:	2b00      	cmp	r3, #0
 8016028:	d101      	bne.n	801602e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 801602a:	2301      	movs	r3, #1
 801602c:	e079      	b.n	8016122 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801602e:	4b1d      	ldr	r3, [pc, #116]	@ (80160a4 <HAL_RCC_ClockConfig+0x260>)
 8016030:	685b      	ldr	r3, [r3, #4]
 8016032:	f023 0203 	bic.w	r2, r3, #3
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	685b      	ldr	r3, [r3, #4]
 801603a:	491a      	ldr	r1, [pc, #104]	@ (80160a4 <HAL_RCC_ClockConfig+0x260>)
 801603c:	4313      	orrs	r3, r2
 801603e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8016040:	f7fe fc1a 	bl	8014878 <HAL_GetTick>
 8016044:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016046:	e00a      	b.n	801605e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016048:	f7fe fc16 	bl	8014878 <HAL_GetTick>
 801604c:	4602      	mov	r2, r0
 801604e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016050:	1ad3      	subs	r3, r2, r3
 8016052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016056:	4293      	cmp	r3, r2
 8016058:	d901      	bls.n	801605e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 801605a:	2303      	movs	r3, #3
 801605c:	e061      	b.n	8016122 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801605e:	4b11      	ldr	r3, [pc, #68]	@ (80160a4 <HAL_RCC_ClockConfig+0x260>)
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	f003 020c 	and.w	r2, r3, #12
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	685b      	ldr	r3, [r3, #4]
 801606a:	009b      	lsls	r3, r3, #2
 801606c:	429a      	cmp	r2, r3
 801606e:	d1eb      	bne.n	8016048 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8016070:	4b0b      	ldr	r3, [pc, #44]	@ (80160a0 <HAL_RCC_ClockConfig+0x25c>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	f003 0307 	and.w	r3, r3, #7
 8016078:	683a      	ldr	r2, [r7, #0]
 801607a:	429a      	cmp	r2, r3
 801607c:	d214      	bcs.n	80160a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801607e:	4b08      	ldr	r3, [pc, #32]	@ (80160a0 <HAL_RCC_ClockConfig+0x25c>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	f023 0207 	bic.w	r2, r3, #7
 8016086:	4906      	ldr	r1, [pc, #24]	@ (80160a0 <HAL_RCC_ClockConfig+0x25c>)
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	4313      	orrs	r3, r2
 801608c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801608e:	4b04      	ldr	r3, [pc, #16]	@ (80160a0 <HAL_RCC_ClockConfig+0x25c>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	f003 0307 	and.w	r3, r3, #7
 8016096:	683a      	ldr	r2, [r7, #0]
 8016098:	429a      	cmp	r2, r3
 801609a:	d005      	beq.n	80160a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 801609c:	2301      	movs	r3, #1
 801609e:	e040      	b.n	8016122 <HAL_RCC_ClockConfig+0x2de>
 80160a0:	40022000 	.word	0x40022000
 80160a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	f003 0304 	and.w	r3, r3, #4
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d008      	beq.n	80160c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80160b4:	4b1d      	ldr	r3, [pc, #116]	@ (801612c <HAL_RCC_ClockConfig+0x2e8>)
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	68db      	ldr	r3, [r3, #12]
 80160c0:	491a      	ldr	r1, [pc, #104]	@ (801612c <HAL_RCC_ClockConfig+0x2e8>)
 80160c2:	4313      	orrs	r3, r2
 80160c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	f003 0308 	and.w	r3, r3, #8
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d009      	beq.n	80160e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80160d2:	4b16      	ldr	r3, [pc, #88]	@ (801612c <HAL_RCC_ClockConfig+0x2e8>)
 80160d4:	685b      	ldr	r3, [r3, #4]
 80160d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	691b      	ldr	r3, [r3, #16]
 80160de:	00db      	lsls	r3, r3, #3
 80160e0:	4912      	ldr	r1, [pc, #72]	@ (801612c <HAL_RCC_ClockConfig+0x2e8>)
 80160e2:	4313      	orrs	r3, r2
 80160e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80160e6:	f000 f829 	bl	801613c <HAL_RCC_GetSysClockFreq>
 80160ea:	4601      	mov	r1, r0
 80160ec:	4b0f      	ldr	r3, [pc, #60]	@ (801612c <HAL_RCC_ClockConfig+0x2e8>)
 80160ee:	685b      	ldr	r3, [r3, #4]
 80160f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80160f4:	22f0      	movs	r2, #240	@ 0xf0
 80160f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80160f8:	693a      	ldr	r2, [r7, #16]
 80160fa:	fa92 f2a2 	rbit	r2, r2
 80160fe:	60fa      	str	r2, [r7, #12]
  return result;
 8016100:	68fa      	ldr	r2, [r7, #12]
 8016102:	fab2 f282 	clz	r2, r2
 8016106:	b2d2      	uxtb	r2, r2
 8016108:	40d3      	lsrs	r3, r2
 801610a:	4a09      	ldr	r2, [pc, #36]	@ (8016130 <HAL_RCC_ClockConfig+0x2ec>)
 801610c:	5cd3      	ldrb	r3, [r2, r3]
 801610e:	fa21 f303 	lsr.w	r3, r1, r3
 8016112:	4a08      	ldr	r2, [pc, #32]	@ (8016134 <HAL_RCC_ClockConfig+0x2f0>)
 8016114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8016116:	4b08      	ldr	r3, [pc, #32]	@ (8016138 <HAL_RCC_ClockConfig+0x2f4>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	4618      	mov	r0, r3
 801611c:	f7fe fb68 	bl	80147f0 <HAL_InitTick>
  
  return HAL_OK;
 8016120:	2300      	movs	r3, #0
}
 8016122:	4618      	mov	r0, r3
 8016124:	3778      	adds	r7, #120	@ 0x78
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}
 801612a:	bf00      	nop
 801612c:	40021000 	.word	0x40021000
 8016130:	08017e14 	.word	0x08017e14
 8016134:	20000000 	.word	0x20000000
 8016138:	20000004 	.word	0x20000004

0801613c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801613c:	b480      	push	{r7}
 801613e:	b087      	sub	sp, #28
 8016140:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8016142:	2300      	movs	r3, #0
 8016144:	60fb      	str	r3, [r7, #12]
 8016146:	2300      	movs	r3, #0
 8016148:	60bb      	str	r3, [r7, #8]
 801614a:	2300      	movs	r3, #0
 801614c:	617b      	str	r3, [r7, #20]
 801614e:	2300      	movs	r3, #0
 8016150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8016152:	2300      	movs	r3, #0
 8016154:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8016156:	4b1e      	ldr	r3, [pc, #120]	@ (80161d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8016158:	685b      	ldr	r3, [r3, #4]
 801615a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	f003 030c 	and.w	r3, r3, #12
 8016162:	2b04      	cmp	r3, #4
 8016164:	d002      	beq.n	801616c <HAL_RCC_GetSysClockFreq+0x30>
 8016166:	2b08      	cmp	r3, #8
 8016168:	d003      	beq.n	8016172 <HAL_RCC_GetSysClockFreq+0x36>
 801616a:	e026      	b.n	80161ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801616c:	4b19      	ldr	r3, [pc, #100]	@ (80161d4 <HAL_RCC_GetSysClockFreq+0x98>)
 801616e:	613b      	str	r3, [r7, #16]
      break;
 8016170:	e026      	b.n	80161c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	0c9b      	lsrs	r3, r3, #18
 8016176:	f003 030f 	and.w	r3, r3, #15
 801617a:	4a17      	ldr	r2, [pc, #92]	@ (80161d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 801617c:	5cd3      	ldrb	r3, [r2, r3]
 801617e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8016180:	4b13      	ldr	r3, [pc, #76]	@ (80161d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8016182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016184:	f003 030f 	and.w	r3, r3, #15
 8016188:	4a14      	ldr	r2, [pc, #80]	@ (80161dc <HAL_RCC_GetSysClockFreq+0xa0>)
 801618a:	5cd3      	ldrb	r3, [r2, r3]
 801618c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016194:	2b00      	cmp	r3, #0
 8016196:	d008      	beq.n	80161aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8016198:	4a0e      	ldr	r2, [pc, #56]	@ (80161d4 <HAL_RCC_GetSysClockFreq+0x98>)
 801619a:	68bb      	ldr	r3, [r7, #8]
 801619c:	fbb2 f2f3 	udiv	r2, r2, r3
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	fb02 f303 	mul.w	r3, r2, r3
 80161a6:	617b      	str	r3, [r7, #20]
 80161a8:	e004      	b.n	80161b4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	4a0c      	ldr	r2, [pc, #48]	@ (80161e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80161ae:	fb02 f303 	mul.w	r3, r2, r3
 80161b2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	613b      	str	r3, [r7, #16]
      break;
 80161b8:	e002      	b.n	80161c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80161ba:	4b06      	ldr	r3, [pc, #24]	@ (80161d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80161bc:	613b      	str	r3, [r7, #16]
      break;
 80161be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80161c0:	693b      	ldr	r3, [r7, #16]
}
 80161c2:	4618      	mov	r0, r3
 80161c4:	371c      	adds	r7, #28
 80161c6:	46bd      	mov	sp, r7
 80161c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161cc:	4770      	bx	lr
 80161ce:	bf00      	nop
 80161d0:	40021000 	.word	0x40021000
 80161d4:	007a1200 	.word	0x007a1200
 80161d8:	08017e2c 	.word	0x08017e2c
 80161dc:	08017e3c 	.word	0x08017e3c
 80161e0:	003d0900 	.word	0x003d0900

080161e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80161e4:	b480      	push	{r7}
 80161e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80161e8:	4b03      	ldr	r3, [pc, #12]	@ (80161f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80161ea:	681b      	ldr	r3, [r3, #0]
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	46bd      	mov	sp, r7
 80161f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f4:	4770      	bx	lr
 80161f6:	bf00      	nop
 80161f8:	20000000 	.word	0x20000000

080161fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b082      	sub	sp, #8
 8016200:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8016202:	f7ff ffef 	bl	80161e4 <HAL_RCC_GetHCLKFreq>
 8016206:	4601      	mov	r1, r0
 8016208:	4b0b      	ldr	r3, [pc, #44]	@ (8016238 <HAL_RCC_GetPCLK1Freq+0x3c>)
 801620a:	685b      	ldr	r3, [r3, #4]
 801620c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016210:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8016214:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016216:	687a      	ldr	r2, [r7, #4]
 8016218:	fa92 f2a2 	rbit	r2, r2
 801621c:	603a      	str	r2, [r7, #0]
  return result;
 801621e:	683a      	ldr	r2, [r7, #0]
 8016220:	fab2 f282 	clz	r2, r2
 8016224:	b2d2      	uxtb	r2, r2
 8016226:	40d3      	lsrs	r3, r2
 8016228:	4a04      	ldr	r2, [pc, #16]	@ (801623c <HAL_RCC_GetPCLK1Freq+0x40>)
 801622a:	5cd3      	ldrb	r3, [r2, r3]
 801622c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8016230:	4618      	mov	r0, r3
 8016232:	3708      	adds	r7, #8
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}
 8016238:	40021000 	.word	0x40021000
 801623c:	08017e24 	.word	0x08017e24

08016240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b082      	sub	sp, #8
 8016244:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8016246:	f7ff ffcd 	bl	80161e4 <HAL_RCC_GetHCLKFreq>
 801624a:	4601      	mov	r1, r0
 801624c:	4b0b      	ldr	r3, [pc, #44]	@ (801627c <HAL_RCC_GetPCLK2Freq+0x3c>)
 801624e:	685b      	ldr	r3, [r3, #4]
 8016250:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8016254:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8016258:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801625a:	687a      	ldr	r2, [r7, #4]
 801625c:	fa92 f2a2 	rbit	r2, r2
 8016260:	603a      	str	r2, [r7, #0]
  return result;
 8016262:	683a      	ldr	r2, [r7, #0]
 8016264:	fab2 f282 	clz	r2, r2
 8016268:	b2d2      	uxtb	r2, r2
 801626a:	40d3      	lsrs	r3, r2
 801626c:	4a04      	ldr	r2, [pc, #16]	@ (8016280 <HAL_RCC_GetPCLK2Freq+0x40>)
 801626e:	5cd3      	ldrb	r3, [r2, r3]
 8016270:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8016274:	4618      	mov	r0, r3
 8016276:	3708      	adds	r7, #8
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}
 801627c:	40021000 	.word	0x40021000
 8016280:	08017e24 	.word	0x08017e24

08016284 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b092      	sub	sp, #72	@ 0x48
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801628c:	2300      	movs	r3, #0
 801628e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8016290:	2300      	movs	r3, #0
 8016292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8016294:	2300      	movs	r3, #0
 8016296:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	f000 80d4 	beq.w	8016450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80162a8:	4b4e      	ldr	r3, [pc, #312]	@ (80163e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80162aa:	69db      	ldr	r3, [r3, #28]
 80162ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d10e      	bne.n	80162d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80162b4:	4b4b      	ldr	r3, [pc, #300]	@ (80163e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80162b6:	69db      	ldr	r3, [r3, #28]
 80162b8:	4a4a      	ldr	r2, [pc, #296]	@ (80163e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80162ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80162be:	61d3      	str	r3, [r2, #28]
 80162c0:	4b48      	ldr	r3, [pc, #288]	@ (80163e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80162c2:	69db      	ldr	r3, [r3, #28]
 80162c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80162c8:	60bb      	str	r3, [r7, #8]
 80162ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80162cc:	2301      	movs	r3, #1
 80162ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80162d2:	4b45      	ldr	r3, [pc, #276]	@ (80163e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d118      	bne.n	8016310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80162de:	4b42      	ldr	r3, [pc, #264]	@ (80163e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	4a41      	ldr	r2, [pc, #260]	@ (80163e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80162e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80162e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80162ea:	f7fe fac5 	bl	8014878 <HAL_GetTick>
 80162ee:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80162f0:	e008      	b.n	8016304 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80162f2:	f7fe fac1 	bl	8014878 <HAL_GetTick>
 80162f6:	4602      	mov	r2, r0
 80162f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80162fa:	1ad3      	subs	r3, r2, r3
 80162fc:	2b64      	cmp	r3, #100	@ 0x64
 80162fe:	d901      	bls.n	8016304 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8016300:	2303      	movs	r3, #3
 8016302:	e169      	b.n	80165d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016304:	4b38      	ldr	r3, [pc, #224]	@ (80163e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801630c:	2b00      	cmp	r3, #0
 801630e:	d0f0      	beq.n	80162f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8016310:	4b34      	ldr	r3, [pc, #208]	@ (80163e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016312:	6a1b      	ldr	r3, [r3, #32]
 8016314:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016318:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801631a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801631c:	2b00      	cmp	r3, #0
 801631e:	f000 8084 	beq.w	801642a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	685b      	ldr	r3, [r3, #4]
 8016326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801632a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801632c:	429a      	cmp	r2, r3
 801632e:	d07c      	beq.n	801642a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8016330:	4b2c      	ldr	r3, [pc, #176]	@ (80163e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016332:	6a1b      	ldr	r3, [r3, #32]
 8016334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801633a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801633e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016342:	fa93 f3a3 	rbit	r3, r3
 8016346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8016348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801634a:	fab3 f383 	clz	r3, r3
 801634e:	b2db      	uxtb	r3, r3
 8016350:	461a      	mov	r2, r3
 8016352:	4b26      	ldr	r3, [pc, #152]	@ (80163ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8016354:	4413      	add	r3, r2
 8016356:	009b      	lsls	r3, r3, #2
 8016358:	461a      	mov	r2, r3
 801635a:	2301      	movs	r3, #1
 801635c:	6013      	str	r3, [r2, #0]
 801635e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016362:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016366:	fa93 f3a3 	rbit	r3, r3
 801636a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 801636c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 801636e:	fab3 f383 	clz	r3, r3
 8016372:	b2db      	uxtb	r3, r3
 8016374:	461a      	mov	r2, r3
 8016376:	4b1d      	ldr	r3, [pc, #116]	@ (80163ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8016378:	4413      	add	r3, r2
 801637a:	009b      	lsls	r3, r3, #2
 801637c:	461a      	mov	r2, r3
 801637e:	2300      	movs	r3, #0
 8016380:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8016382:	4a18      	ldr	r2, [pc, #96]	@ (80163e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016386:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8016388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801638a:	f003 0301 	and.w	r3, r3, #1
 801638e:	2b00      	cmp	r3, #0
 8016390:	d04b      	beq.n	801642a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016392:	f7fe fa71 	bl	8014878 <HAL_GetTick>
 8016396:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8016398:	e00a      	b.n	80163b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801639a:	f7fe fa6d 	bl	8014878 <HAL_GetTick>
 801639e:	4602      	mov	r2, r0
 80163a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80163a2:	1ad3      	subs	r3, r2, r3
 80163a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80163a8:	4293      	cmp	r3, r2
 80163aa:	d901      	bls.n	80163b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80163ac:	2303      	movs	r3, #3
 80163ae:	e113      	b.n	80165d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80163b0:	2302      	movs	r3, #2
 80163b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80163b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163b6:	fa93 f3a3 	rbit	r3, r3
 80163ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80163bc:	2302      	movs	r3, #2
 80163be:	623b      	str	r3, [r7, #32]
 80163c0:	6a3b      	ldr	r3, [r7, #32]
 80163c2:	fa93 f3a3 	rbit	r3, r3
 80163c6:	61fb      	str	r3, [r7, #28]
  return result;
 80163c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80163ca:	fab3 f383 	clz	r3, r3
 80163ce:	b2db      	uxtb	r3, r3
 80163d0:	095b      	lsrs	r3, r3, #5
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	f043 0302 	orr.w	r3, r3, #2
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	2b02      	cmp	r3, #2
 80163dc:	d108      	bne.n	80163f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80163de:	4b01      	ldr	r3, [pc, #4]	@ (80163e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80163e0:	6a1b      	ldr	r3, [r3, #32]
 80163e2:	e00d      	b.n	8016400 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80163e4:	40021000 	.word	0x40021000
 80163e8:	40007000 	.word	0x40007000
 80163ec:	10908100 	.word	0x10908100
 80163f0:	2302      	movs	r3, #2
 80163f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80163f4:	69bb      	ldr	r3, [r7, #24]
 80163f6:	fa93 f3a3 	rbit	r3, r3
 80163fa:	617b      	str	r3, [r7, #20]
 80163fc:	4b78      	ldr	r3, [pc, #480]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80163fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016400:	2202      	movs	r2, #2
 8016402:	613a      	str	r2, [r7, #16]
 8016404:	693a      	ldr	r2, [r7, #16]
 8016406:	fa92 f2a2 	rbit	r2, r2
 801640a:	60fa      	str	r2, [r7, #12]
  return result;
 801640c:	68fa      	ldr	r2, [r7, #12]
 801640e:	fab2 f282 	clz	r2, r2
 8016412:	b2d2      	uxtb	r2, r2
 8016414:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016418:	b2d2      	uxtb	r2, r2
 801641a:	f002 021f 	and.w	r2, r2, #31
 801641e:	2101      	movs	r1, #1
 8016420:	fa01 f202 	lsl.w	r2, r1, r2
 8016424:	4013      	ands	r3, r2
 8016426:	2b00      	cmp	r3, #0
 8016428:	d0b7      	beq.n	801639a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801642a:	4b6d      	ldr	r3, [pc, #436]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801642c:	6a1b      	ldr	r3, [r3, #32]
 801642e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	685b      	ldr	r3, [r3, #4]
 8016436:	496a      	ldr	r1, [pc, #424]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016438:	4313      	orrs	r3, r2
 801643a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801643c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016440:	2b01      	cmp	r3, #1
 8016442:	d105      	bne.n	8016450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016444:	4b66      	ldr	r3, [pc, #408]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016446:	69db      	ldr	r3, [r3, #28]
 8016448:	4a65      	ldr	r2, [pc, #404]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801644a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801644e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	f003 0301 	and.w	r3, r3, #1
 8016458:	2b00      	cmp	r3, #0
 801645a:	d008      	beq.n	801646e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801645c:	4b60      	ldr	r3, [pc, #384]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801645e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016460:	f023 0203 	bic.w	r2, r3, #3
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	689b      	ldr	r3, [r3, #8]
 8016468:	495d      	ldr	r1, [pc, #372]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801646a:	4313      	orrs	r3, r2
 801646c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	f003 0302 	and.w	r3, r3, #2
 8016476:	2b00      	cmp	r3, #0
 8016478:	d008      	beq.n	801648c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801647a:	4b59      	ldr	r3, [pc, #356]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801647c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801647e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	68db      	ldr	r3, [r3, #12]
 8016486:	4956      	ldr	r1, [pc, #344]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016488:	4313      	orrs	r3, r2
 801648a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	f003 0304 	and.w	r3, r3, #4
 8016494:	2b00      	cmp	r3, #0
 8016496:	d008      	beq.n	80164aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8016498:	4b51      	ldr	r3, [pc, #324]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801649a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801649c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	691b      	ldr	r3, [r3, #16]
 80164a4:	494e      	ldr	r1, [pc, #312]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80164a6:	4313      	orrs	r3, r2
 80164a8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	f003 0320 	and.w	r3, r3, #32
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d008      	beq.n	80164c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80164b6:	4b4a      	ldr	r3, [pc, #296]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80164b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164ba:	f023 0210 	bic.w	r2, r3, #16
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	69db      	ldr	r3, [r3, #28]
 80164c2:	4947      	ldr	r1, [pc, #284]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80164c4:	4313      	orrs	r3, r2
 80164c6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d008      	beq.n	80164e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80164d4:	4b42      	ldr	r3, [pc, #264]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80164d6:	685b      	ldr	r3, [r3, #4]
 80164d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164e0:	493f      	ldr	r1, [pc, #252]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80164e2:	4313      	orrs	r3, r2
 80164e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d008      	beq.n	8016504 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80164f2:	4b3b      	ldr	r3, [pc, #236]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80164f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164f6:	f023 0220 	bic.w	r2, r3, #32
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	6a1b      	ldr	r3, [r3, #32]
 80164fe:	4938      	ldr	r1, [pc, #224]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016500:	4313      	orrs	r3, r2
 8016502:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	f003 0308 	and.w	r3, r3, #8
 801650c:	2b00      	cmp	r3, #0
 801650e:	d008      	beq.n	8016522 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8016510:	4b33      	ldr	r3, [pc, #204]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016514:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	695b      	ldr	r3, [r3, #20]
 801651c:	4930      	ldr	r1, [pc, #192]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801651e:	4313      	orrs	r3, r2
 8016520:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	f003 0310 	and.w	r3, r3, #16
 801652a:	2b00      	cmp	r3, #0
 801652c:	d008      	beq.n	8016540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801652e:	4b2c      	ldr	r3, [pc, #176]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016532:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	699b      	ldr	r3, [r3, #24]
 801653a:	4929      	ldr	r1, [pc, #164]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801653c:	4313      	orrs	r3, r2
 801653e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016548:	2b00      	cmp	r3, #0
 801654a:	d008      	beq.n	801655e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801654c:	4b24      	ldr	r3, [pc, #144]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801654e:	685b      	ldr	r3, [r3, #4]
 8016550:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016558:	4921      	ldr	r1, [pc, #132]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801655a:	4313      	orrs	r3, r2
 801655c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016566:	2b00      	cmp	r3, #0
 8016568:	d008      	beq.n	801657c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801656a:	4b1d      	ldr	r3, [pc, #116]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801656c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801656e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016576:	491a      	ldr	r1, [pc, #104]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016578:	4313      	orrs	r3, r2
 801657a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016584:	2b00      	cmp	r3, #0
 8016586:	d008      	beq.n	801659a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8016588:	4b15      	ldr	r3, [pc, #84]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801658a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801658c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016594:	4912      	ldr	r1, [pc, #72]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016596:	4313      	orrs	r3, r2
 8016598:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d008      	beq.n	80165b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80165a6:	4b0e      	ldr	r3, [pc, #56]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80165a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165b2:	490b      	ldr	r1, [pc, #44]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80165b4:	4313      	orrs	r3, r2
 80165b6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d008      	beq.n	80165d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80165c4:	4b06      	ldr	r3, [pc, #24]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80165c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80165d0:	4903      	ldr	r1, [pc, #12]	@ (80165e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80165d2:	4313      	orrs	r3, r2
 80165d4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80165d6:	2300      	movs	r3, #0
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3748      	adds	r7, #72	@ 0x48
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}
 80165e0:	40021000 	.word	0x40021000

080165e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b082      	sub	sp, #8
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d101      	bne.n	80165f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80165f2:	2301      	movs	r3, #1
 80165f4:	e040      	b.n	8016678 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d106      	bne.n	801660c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2200      	movs	r2, #0
 8016602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	f7fd ff86 	bl	8014518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2224      	movs	r2, #36	@ 0x24
 8016610:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	681a      	ldr	r2, [r3, #0]
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	f022 0201 	bic.w	r2, r2, #1
 8016620:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016626:	2b00      	cmp	r3, #0
 8016628:	d002      	beq.n	8016630 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801662a:	6878      	ldr	r0, [r7, #4]
 801662c:	f000 fa86 	bl	8016b3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f000 f8af 	bl	8016794 <UART_SetConfig>
 8016636:	4603      	mov	r3, r0
 8016638:	2b01      	cmp	r3, #1
 801663a:	d101      	bne.n	8016640 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801663c:	2301      	movs	r3, #1
 801663e:	e01b      	b.n	8016678 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	685a      	ldr	r2, [r3, #4]
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801664e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	689a      	ldr	r2, [r3, #8]
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801665e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	681a      	ldr	r2, [r3, #0]
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	f042 0201 	orr.w	r2, r2, #1
 801666e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f000 fb05 	bl	8016c80 <UART_CheckIdleState>
 8016676:	4603      	mov	r3, r0
}
 8016678:	4618      	mov	r0, r3
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b08a      	sub	sp, #40	@ 0x28
 8016684:	af02      	add	r7, sp, #8
 8016686:	60f8      	str	r0, [r7, #12]
 8016688:	60b9      	str	r1, [r7, #8]
 801668a:	603b      	str	r3, [r7, #0]
 801668c:	4613      	mov	r3, r2
 801668e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016694:	2b20      	cmp	r3, #32
 8016696:	d177      	bne.n	8016788 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8016698:	68bb      	ldr	r3, [r7, #8]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d002      	beq.n	80166a4 <HAL_UART_Transmit+0x24>
 801669e:	88fb      	ldrh	r3, [r7, #6]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d101      	bne.n	80166a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80166a4:	2301      	movs	r3, #1
 80166a6:	e070      	b.n	801678a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	2200      	movs	r2, #0
 80166ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	2221      	movs	r2, #33	@ 0x21
 80166b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80166b6:	f7fe f8df 	bl	8014878 <HAL_GetTick>
 80166ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	88fa      	ldrh	r2, [r7, #6]
 80166c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	88fa      	ldrh	r2, [r7, #6]
 80166c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	689b      	ldr	r3, [r3, #8]
 80166d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80166d4:	d108      	bne.n	80166e8 <HAL_UART_Transmit+0x68>
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	691b      	ldr	r3, [r3, #16]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d104      	bne.n	80166e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80166de:	2300      	movs	r3, #0
 80166e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80166e2:	68bb      	ldr	r3, [r7, #8]
 80166e4:	61bb      	str	r3, [r7, #24]
 80166e6:	e003      	b.n	80166f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80166ec:	2300      	movs	r3, #0
 80166ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80166f0:	e02f      	b.n	8016752 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	9300      	str	r3, [sp, #0]
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	2200      	movs	r2, #0
 80166fa:	2180      	movs	r1, #128	@ 0x80
 80166fc:	68f8      	ldr	r0, [r7, #12]
 80166fe:	f000 fb67 	bl	8016dd0 <UART_WaitOnFlagUntilTimeout>
 8016702:	4603      	mov	r3, r0
 8016704:	2b00      	cmp	r3, #0
 8016706:	d004      	beq.n	8016712 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	2220      	movs	r2, #32
 801670c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801670e:	2303      	movs	r3, #3
 8016710:	e03b      	b.n	801678a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8016712:	69fb      	ldr	r3, [r7, #28]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d10b      	bne.n	8016730 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016718:	69bb      	ldr	r3, [r7, #24]
 801671a:	881a      	ldrh	r2, [r3, #0]
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016724:	b292      	uxth	r2, r2
 8016726:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8016728:	69bb      	ldr	r3, [r7, #24]
 801672a:	3302      	adds	r3, #2
 801672c:	61bb      	str	r3, [r7, #24]
 801672e:	e007      	b.n	8016740 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016730:	69fb      	ldr	r3, [r7, #28]
 8016732:	781a      	ldrb	r2, [r3, #0]
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801673a:	69fb      	ldr	r3, [r7, #28]
 801673c:	3301      	adds	r3, #1
 801673e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8016746:	b29b      	uxth	r3, r3
 8016748:	3b01      	subs	r3, #1
 801674a:	b29a      	uxth	r2, r3
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8016758:	b29b      	uxth	r3, r3
 801675a:	2b00      	cmp	r3, #0
 801675c:	d1c9      	bne.n	80166f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	9300      	str	r3, [sp, #0]
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	2200      	movs	r2, #0
 8016766:	2140      	movs	r1, #64	@ 0x40
 8016768:	68f8      	ldr	r0, [r7, #12]
 801676a:	f000 fb31 	bl	8016dd0 <UART_WaitOnFlagUntilTimeout>
 801676e:	4603      	mov	r3, r0
 8016770:	2b00      	cmp	r3, #0
 8016772:	d004      	beq.n	801677e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	2220      	movs	r2, #32
 8016778:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801677a:	2303      	movs	r3, #3
 801677c:	e005      	b.n	801678a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	2220      	movs	r2, #32
 8016782:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8016784:	2300      	movs	r3, #0
 8016786:	e000      	b.n	801678a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8016788:	2302      	movs	r3, #2
  }
}
 801678a:	4618      	mov	r0, r3
 801678c:	3720      	adds	r7, #32
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}
	...

08016794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b088      	sub	sp, #32
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801679c:	2300      	movs	r3, #0
 801679e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	689a      	ldr	r2, [r3, #8]
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	691b      	ldr	r3, [r3, #16]
 80167a8:	431a      	orrs	r2, r3
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	695b      	ldr	r3, [r3, #20]
 80167ae:	431a      	orrs	r2, r3
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	69db      	ldr	r3, [r3, #28]
 80167b4:	4313      	orrs	r3, r2
 80167b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80167c2:	f023 030c 	bic.w	r3, r3, #12
 80167c6:	687a      	ldr	r2, [r7, #4]
 80167c8:	6812      	ldr	r2, [r2, #0]
 80167ca:	6979      	ldr	r1, [r7, #20]
 80167cc:	430b      	orrs	r3, r1
 80167ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	685b      	ldr	r3, [r3, #4]
 80167d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	68da      	ldr	r2, [r3, #12]
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	430a      	orrs	r2, r1
 80167e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	699b      	ldr	r3, [r3, #24]
 80167ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	6a1b      	ldr	r3, [r3, #32]
 80167f0:	697a      	ldr	r2, [r7, #20]
 80167f2:	4313      	orrs	r3, r2
 80167f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	689b      	ldr	r3, [r3, #8]
 80167fc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	697a      	ldr	r2, [r7, #20]
 8016806:	430a      	orrs	r2, r1
 8016808:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	4aa7      	ldr	r2, [pc, #668]	@ (8016aac <UART_SetConfig+0x318>)
 8016810:	4293      	cmp	r3, r2
 8016812:	d120      	bne.n	8016856 <UART_SetConfig+0xc2>
 8016814:	4ba6      	ldr	r3, [pc, #664]	@ (8016ab0 <UART_SetConfig+0x31c>)
 8016816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016818:	f003 0303 	and.w	r3, r3, #3
 801681c:	2b03      	cmp	r3, #3
 801681e:	d817      	bhi.n	8016850 <UART_SetConfig+0xbc>
 8016820:	a201      	add	r2, pc, #4	@ (adr r2, 8016828 <UART_SetConfig+0x94>)
 8016822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016826:	bf00      	nop
 8016828:	08016839 	.word	0x08016839
 801682c:	08016845 	.word	0x08016845
 8016830:	0801684b 	.word	0x0801684b
 8016834:	0801683f 	.word	0x0801683f
 8016838:	2301      	movs	r3, #1
 801683a:	77fb      	strb	r3, [r7, #31]
 801683c:	e0b5      	b.n	80169aa <UART_SetConfig+0x216>
 801683e:	2302      	movs	r3, #2
 8016840:	77fb      	strb	r3, [r7, #31]
 8016842:	e0b2      	b.n	80169aa <UART_SetConfig+0x216>
 8016844:	2304      	movs	r3, #4
 8016846:	77fb      	strb	r3, [r7, #31]
 8016848:	e0af      	b.n	80169aa <UART_SetConfig+0x216>
 801684a:	2308      	movs	r3, #8
 801684c:	77fb      	strb	r3, [r7, #31]
 801684e:	e0ac      	b.n	80169aa <UART_SetConfig+0x216>
 8016850:	2310      	movs	r3, #16
 8016852:	77fb      	strb	r3, [r7, #31]
 8016854:	e0a9      	b.n	80169aa <UART_SetConfig+0x216>
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	4a96      	ldr	r2, [pc, #600]	@ (8016ab4 <UART_SetConfig+0x320>)
 801685c:	4293      	cmp	r3, r2
 801685e:	d124      	bne.n	80168aa <UART_SetConfig+0x116>
 8016860:	4b93      	ldr	r3, [pc, #588]	@ (8016ab0 <UART_SetConfig+0x31c>)
 8016862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016864:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8016868:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801686c:	d011      	beq.n	8016892 <UART_SetConfig+0xfe>
 801686e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8016872:	d817      	bhi.n	80168a4 <UART_SetConfig+0x110>
 8016874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016878:	d011      	beq.n	801689e <UART_SetConfig+0x10a>
 801687a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801687e:	d811      	bhi.n	80168a4 <UART_SetConfig+0x110>
 8016880:	2b00      	cmp	r3, #0
 8016882:	d003      	beq.n	801688c <UART_SetConfig+0xf8>
 8016884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016888:	d006      	beq.n	8016898 <UART_SetConfig+0x104>
 801688a:	e00b      	b.n	80168a4 <UART_SetConfig+0x110>
 801688c:	2300      	movs	r3, #0
 801688e:	77fb      	strb	r3, [r7, #31]
 8016890:	e08b      	b.n	80169aa <UART_SetConfig+0x216>
 8016892:	2302      	movs	r3, #2
 8016894:	77fb      	strb	r3, [r7, #31]
 8016896:	e088      	b.n	80169aa <UART_SetConfig+0x216>
 8016898:	2304      	movs	r3, #4
 801689a:	77fb      	strb	r3, [r7, #31]
 801689c:	e085      	b.n	80169aa <UART_SetConfig+0x216>
 801689e:	2308      	movs	r3, #8
 80168a0:	77fb      	strb	r3, [r7, #31]
 80168a2:	e082      	b.n	80169aa <UART_SetConfig+0x216>
 80168a4:	2310      	movs	r3, #16
 80168a6:	77fb      	strb	r3, [r7, #31]
 80168a8:	e07f      	b.n	80169aa <UART_SetConfig+0x216>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	4a82      	ldr	r2, [pc, #520]	@ (8016ab8 <UART_SetConfig+0x324>)
 80168b0:	4293      	cmp	r3, r2
 80168b2:	d124      	bne.n	80168fe <UART_SetConfig+0x16a>
 80168b4:	4b7e      	ldr	r3, [pc, #504]	@ (8016ab0 <UART_SetConfig+0x31c>)
 80168b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168b8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80168bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80168c0:	d011      	beq.n	80168e6 <UART_SetConfig+0x152>
 80168c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80168c6:	d817      	bhi.n	80168f8 <UART_SetConfig+0x164>
 80168c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80168cc:	d011      	beq.n	80168f2 <UART_SetConfig+0x15e>
 80168ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80168d2:	d811      	bhi.n	80168f8 <UART_SetConfig+0x164>
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d003      	beq.n	80168e0 <UART_SetConfig+0x14c>
 80168d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80168dc:	d006      	beq.n	80168ec <UART_SetConfig+0x158>
 80168de:	e00b      	b.n	80168f8 <UART_SetConfig+0x164>
 80168e0:	2300      	movs	r3, #0
 80168e2:	77fb      	strb	r3, [r7, #31]
 80168e4:	e061      	b.n	80169aa <UART_SetConfig+0x216>
 80168e6:	2302      	movs	r3, #2
 80168e8:	77fb      	strb	r3, [r7, #31]
 80168ea:	e05e      	b.n	80169aa <UART_SetConfig+0x216>
 80168ec:	2304      	movs	r3, #4
 80168ee:	77fb      	strb	r3, [r7, #31]
 80168f0:	e05b      	b.n	80169aa <UART_SetConfig+0x216>
 80168f2:	2308      	movs	r3, #8
 80168f4:	77fb      	strb	r3, [r7, #31]
 80168f6:	e058      	b.n	80169aa <UART_SetConfig+0x216>
 80168f8:	2310      	movs	r3, #16
 80168fa:	77fb      	strb	r3, [r7, #31]
 80168fc:	e055      	b.n	80169aa <UART_SetConfig+0x216>
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	4a6e      	ldr	r2, [pc, #440]	@ (8016abc <UART_SetConfig+0x328>)
 8016904:	4293      	cmp	r3, r2
 8016906:	d124      	bne.n	8016952 <UART_SetConfig+0x1be>
 8016908:	4b69      	ldr	r3, [pc, #420]	@ (8016ab0 <UART_SetConfig+0x31c>)
 801690a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801690c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8016910:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8016914:	d011      	beq.n	801693a <UART_SetConfig+0x1a6>
 8016916:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801691a:	d817      	bhi.n	801694c <UART_SetConfig+0x1b8>
 801691c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8016920:	d011      	beq.n	8016946 <UART_SetConfig+0x1b2>
 8016922:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8016926:	d811      	bhi.n	801694c <UART_SetConfig+0x1b8>
 8016928:	2b00      	cmp	r3, #0
 801692a:	d003      	beq.n	8016934 <UART_SetConfig+0x1a0>
 801692c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016930:	d006      	beq.n	8016940 <UART_SetConfig+0x1ac>
 8016932:	e00b      	b.n	801694c <UART_SetConfig+0x1b8>
 8016934:	2300      	movs	r3, #0
 8016936:	77fb      	strb	r3, [r7, #31]
 8016938:	e037      	b.n	80169aa <UART_SetConfig+0x216>
 801693a:	2302      	movs	r3, #2
 801693c:	77fb      	strb	r3, [r7, #31]
 801693e:	e034      	b.n	80169aa <UART_SetConfig+0x216>
 8016940:	2304      	movs	r3, #4
 8016942:	77fb      	strb	r3, [r7, #31]
 8016944:	e031      	b.n	80169aa <UART_SetConfig+0x216>
 8016946:	2308      	movs	r3, #8
 8016948:	77fb      	strb	r3, [r7, #31]
 801694a:	e02e      	b.n	80169aa <UART_SetConfig+0x216>
 801694c:	2310      	movs	r3, #16
 801694e:	77fb      	strb	r3, [r7, #31]
 8016950:	e02b      	b.n	80169aa <UART_SetConfig+0x216>
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	4a5a      	ldr	r2, [pc, #360]	@ (8016ac0 <UART_SetConfig+0x32c>)
 8016958:	4293      	cmp	r3, r2
 801695a:	d124      	bne.n	80169a6 <UART_SetConfig+0x212>
 801695c:	4b54      	ldr	r3, [pc, #336]	@ (8016ab0 <UART_SetConfig+0x31c>)
 801695e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016960:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8016964:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8016968:	d011      	beq.n	801698e <UART_SetConfig+0x1fa>
 801696a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801696e:	d817      	bhi.n	80169a0 <UART_SetConfig+0x20c>
 8016970:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8016974:	d011      	beq.n	801699a <UART_SetConfig+0x206>
 8016976:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801697a:	d811      	bhi.n	80169a0 <UART_SetConfig+0x20c>
 801697c:	2b00      	cmp	r3, #0
 801697e:	d003      	beq.n	8016988 <UART_SetConfig+0x1f4>
 8016980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8016984:	d006      	beq.n	8016994 <UART_SetConfig+0x200>
 8016986:	e00b      	b.n	80169a0 <UART_SetConfig+0x20c>
 8016988:	2300      	movs	r3, #0
 801698a:	77fb      	strb	r3, [r7, #31]
 801698c:	e00d      	b.n	80169aa <UART_SetConfig+0x216>
 801698e:	2302      	movs	r3, #2
 8016990:	77fb      	strb	r3, [r7, #31]
 8016992:	e00a      	b.n	80169aa <UART_SetConfig+0x216>
 8016994:	2304      	movs	r3, #4
 8016996:	77fb      	strb	r3, [r7, #31]
 8016998:	e007      	b.n	80169aa <UART_SetConfig+0x216>
 801699a:	2308      	movs	r3, #8
 801699c:	77fb      	strb	r3, [r7, #31]
 801699e:	e004      	b.n	80169aa <UART_SetConfig+0x216>
 80169a0:	2310      	movs	r3, #16
 80169a2:	77fb      	strb	r3, [r7, #31]
 80169a4:	e001      	b.n	80169aa <UART_SetConfig+0x216>
 80169a6:	2310      	movs	r3, #16
 80169a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	69db      	ldr	r3, [r3, #28]
 80169ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80169b2:	d15b      	bne.n	8016a6c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80169b4:	7ffb      	ldrb	r3, [r7, #31]
 80169b6:	2b08      	cmp	r3, #8
 80169b8:	d827      	bhi.n	8016a0a <UART_SetConfig+0x276>
 80169ba:	a201      	add	r2, pc, #4	@ (adr r2, 80169c0 <UART_SetConfig+0x22c>)
 80169bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169c0:	080169e5 	.word	0x080169e5
 80169c4:	080169ed 	.word	0x080169ed
 80169c8:	080169f5 	.word	0x080169f5
 80169cc:	08016a0b 	.word	0x08016a0b
 80169d0:	080169fb 	.word	0x080169fb
 80169d4:	08016a0b 	.word	0x08016a0b
 80169d8:	08016a0b 	.word	0x08016a0b
 80169dc:	08016a0b 	.word	0x08016a0b
 80169e0:	08016a03 	.word	0x08016a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80169e4:	f7ff fc0a 	bl	80161fc <HAL_RCC_GetPCLK1Freq>
 80169e8:	61b8      	str	r0, [r7, #24]
        break;
 80169ea:	e013      	b.n	8016a14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80169ec:	f7ff fc28 	bl	8016240 <HAL_RCC_GetPCLK2Freq>
 80169f0:	61b8      	str	r0, [r7, #24]
        break;
 80169f2:	e00f      	b.n	8016a14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80169f4:	4b33      	ldr	r3, [pc, #204]	@ (8016ac4 <UART_SetConfig+0x330>)
 80169f6:	61bb      	str	r3, [r7, #24]
        break;
 80169f8:	e00c      	b.n	8016a14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80169fa:	f7ff fb9f 	bl	801613c <HAL_RCC_GetSysClockFreq>
 80169fe:	61b8      	str	r0, [r7, #24]
        break;
 8016a00:	e008      	b.n	8016a14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016a02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016a06:	61bb      	str	r3, [r7, #24]
        break;
 8016a08:	e004      	b.n	8016a14 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8016a0e:	2301      	movs	r3, #1
 8016a10:	77bb      	strb	r3, [r7, #30]
        break;
 8016a12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016a14:	69bb      	ldr	r3, [r7, #24]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	f000 8082 	beq.w	8016b20 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8016a1c:	69bb      	ldr	r3, [r7, #24]
 8016a1e:	005a      	lsls	r2, r3, #1
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	685b      	ldr	r3, [r3, #4]
 8016a24:	085b      	lsrs	r3, r3, #1
 8016a26:	441a      	add	r2, r3
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	685b      	ldr	r3, [r3, #4]
 8016a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8016a30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	2b0f      	cmp	r3, #15
 8016a36:	d916      	bls.n	8016a66 <UART_SetConfig+0x2d2>
 8016a38:	693b      	ldr	r3, [r7, #16]
 8016a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016a3e:	d212      	bcs.n	8016a66 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016a40:	693b      	ldr	r3, [r7, #16]
 8016a42:	b29b      	uxth	r3, r3
 8016a44:	f023 030f 	bic.w	r3, r3, #15
 8016a48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016a4a:	693b      	ldr	r3, [r7, #16]
 8016a4c:	085b      	lsrs	r3, r3, #1
 8016a4e:	b29b      	uxth	r3, r3
 8016a50:	f003 0307 	and.w	r3, r3, #7
 8016a54:	b29a      	uxth	r2, r3
 8016a56:	89fb      	ldrh	r3, [r7, #14]
 8016a58:	4313      	orrs	r3, r2
 8016a5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	89fa      	ldrh	r2, [r7, #14]
 8016a62:	60da      	str	r2, [r3, #12]
 8016a64:	e05c      	b.n	8016b20 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8016a66:	2301      	movs	r3, #1
 8016a68:	77bb      	strb	r3, [r7, #30]
 8016a6a:	e059      	b.n	8016b20 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016a6c:	7ffb      	ldrb	r3, [r7, #31]
 8016a6e:	2b08      	cmp	r3, #8
 8016a70:	d835      	bhi.n	8016ade <UART_SetConfig+0x34a>
 8016a72:	a201      	add	r2, pc, #4	@ (adr r2, 8016a78 <UART_SetConfig+0x2e4>)
 8016a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a78:	08016a9d 	.word	0x08016a9d
 8016a7c:	08016aa5 	.word	0x08016aa5
 8016a80:	08016ac9 	.word	0x08016ac9
 8016a84:	08016adf 	.word	0x08016adf
 8016a88:	08016acf 	.word	0x08016acf
 8016a8c:	08016adf 	.word	0x08016adf
 8016a90:	08016adf 	.word	0x08016adf
 8016a94:	08016adf 	.word	0x08016adf
 8016a98:	08016ad7 	.word	0x08016ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016a9c:	f7ff fbae 	bl	80161fc <HAL_RCC_GetPCLK1Freq>
 8016aa0:	61b8      	str	r0, [r7, #24]
        break;
 8016aa2:	e021      	b.n	8016ae8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016aa4:	f7ff fbcc 	bl	8016240 <HAL_RCC_GetPCLK2Freq>
 8016aa8:	61b8      	str	r0, [r7, #24]
        break;
 8016aaa:	e01d      	b.n	8016ae8 <UART_SetConfig+0x354>
 8016aac:	40013800 	.word	0x40013800
 8016ab0:	40021000 	.word	0x40021000
 8016ab4:	40004400 	.word	0x40004400
 8016ab8:	40004800 	.word	0x40004800
 8016abc:	40004c00 	.word	0x40004c00
 8016ac0:	40005000 	.word	0x40005000
 8016ac4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8016b38 <UART_SetConfig+0x3a4>)
 8016aca:	61bb      	str	r3, [r7, #24]
        break;
 8016acc:	e00c      	b.n	8016ae8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016ace:	f7ff fb35 	bl	801613c <HAL_RCC_GetSysClockFreq>
 8016ad2:	61b8      	str	r0, [r7, #24]
        break;
 8016ad4:	e008      	b.n	8016ae8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016ada:	61bb      	str	r3, [r7, #24]
        break;
 8016adc:	e004      	b.n	8016ae8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8016ae2:	2301      	movs	r3, #1
 8016ae4:	77bb      	strb	r3, [r7, #30]
        break;
 8016ae6:	bf00      	nop
    }

    if (pclk != 0U)
 8016ae8:	69bb      	ldr	r3, [r7, #24]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d018      	beq.n	8016b20 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	685b      	ldr	r3, [r3, #4]
 8016af2:	085a      	lsrs	r2, r3, #1
 8016af4:	69bb      	ldr	r3, [r7, #24]
 8016af6:	441a      	add	r2, r3
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	685b      	ldr	r3, [r3, #4]
 8016afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8016b00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016b02:	693b      	ldr	r3, [r7, #16]
 8016b04:	2b0f      	cmp	r3, #15
 8016b06:	d909      	bls.n	8016b1c <UART_SetConfig+0x388>
 8016b08:	693b      	ldr	r3, [r7, #16]
 8016b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016b0e:	d205      	bcs.n	8016b1c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016b10:	693b      	ldr	r3, [r7, #16]
 8016b12:	b29a      	uxth	r2, r3
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	60da      	str	r2, [r3, #12]
 8016b1a:	e001      	b.n	8016b20 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	2200      	movs	r2, #0
 8016b24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	2200      	movs	r2, #0
 8016b2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8016b2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8016b2e:	4618      	mov	r0, r3
 8016b30:	3720      	adds	r7, #32
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}
 8016b36:	bf00      	nop
 8016b38:	007a1200 	.word	0x007a1200

08016b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016b3c:	b480      	push	{r7}
 8016b3e:	b083      	sub	sp, #12
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b48:	f003 0308 	and.w	r3, r3, #8
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d00a      	beq.n	8016b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	430a      	orrs	r2, r1
 8016b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b6a:	f003 0301 	and.w	r3, r3, #1
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d00a      	beq.n	8016b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	685b      	ldr	r3, [r3, #4]
 8016b78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	430a      	orrs	r2, r1
 8016b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b8c:	f003 0302 	and.w	r3, r3, #2
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d00a      	beq.n	8016baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	685b      	ldr	r3, [r3, #4]
 8016b9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	430a      	orrs	r2, r1
 8016ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bae:	f003 0304 	and.w	r3, r3, #4
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d00a      	beq.n	8016bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	685b      	ldr	r3, [r3, #4]
 8016bbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	430a      	orrs	r2, r1
 8016bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bd0:	f003 0310 	and.w	r3, r3, #16
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d00a      	beq.n	8016bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	689b      	ldr	r3, [r3, #8]
 8016bde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	430a      	orrs	r2, r1
 8016bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bf2:	f003 0320 	and.w	r3, r3, #32
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d00a      	beq.n	8016c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	689b      	ldr	r3, [r3, #8]
 8016c00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	430a      	orrs	r2, r1
 8016c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d01a      	beq.n	8016c52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	685b      	ldr	r3, [r3, #4]
 8016c22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	430a      	orrs	r2, r1
 8016c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016c3a:	d10a      	bne.n	8016c52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	685b      	ldr	r3, [r3, #4]
 8016c42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	430a      	orrs	r2, r1
 8016c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d00a      	beq.n	8016c74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	685b      	ldr	r3, [r3, #4]
 8016c64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	430a      	orrs	r2, r1
 8016c72:	605a      	str	r2, [r3, #4]
  }
}
 8016c74:	bf00      	nop
 8016c76:	370c      	adds	r7, #12
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7e:	4770      	bx	lr

08016c80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b098      	sub	sp, #96	@ 0x60
 8016c84:	af02      	add	r7, sp, #8
 8016c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016c90:	f7fd fdf2 	bl	8014878 <HAL_GetTick>
 8016c94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	f003 0308 	and.w	r3, r3, #8
 8016ca0:	2b08      	cmp	r3, #8
 8016ca2:	d12e      	bne.n	8016d02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016ca4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016ca8:	9300      	str	r3, [sp, #0]
 8016caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016cac:	2200      	movs	r2, #0
 8016cae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8016cb2:	6878      	ldr	r0, [r7, #4]
 8016cb4:	f000 f88c 	bl	8016dd0 <UART_WaitOnFlagUntilTimeout>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d021      	beq.n	8016d02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cc6:	e853 3f00 	ldrex	r3, [r3]
 8016cca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8016ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016cd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	461a      	mov	r2, r3
 8016cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8016cde:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ce0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016ce4:	e841 2300 	strex	r3, r2, [r1]
 8016ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8016cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d1e6      	bne.n	8016cbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	2220      	movs	r2, #32
 8016cf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016cfe:	2303      	movs	r3, #3
 8016d00:	e062      	b.n	8016dc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	f003 0304 	and.w	r3, r3, #4
 8016d0c:	2b04      	cmp	r3, #4
 8016d0e:	d149      	bne.n	8016da4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016d10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016d14:	9300      	str	r3, [sp, #0]
 8016d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016d18:	2200      	movs	r2, #0
 8016d1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8016d1e:	6878      	ldr	r0, [r7, #4]
 8016d20:	f000 f856 	bl	8016dd0 <UART_WaitOnFlagUntilTimeout>
 8016d24:	4603      	mov	r3, r0
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d03c      	beq.n	8016da4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d32:	e853 3f00 	ldrex	r3, [r3]
 8016d36:	623b      	str	r3, [r7, #32]
   return(result);
 8016d38:	6a3b      	ldr	r3, [r7, #32]
 8016d3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	461a      	mov	r2, r3
 8016d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8016d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016d50:	e841 2300 	strex	r3, r2, [r1]
 8016d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d1e6      	bne.n	8016d2a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	3308      	adds	r3, #8
 8016d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d64:	693b      	ldr	r3, [r7, #16]
 8016d66:	e853 3f00 	ldrex	r3, [r3]
 8016d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	f023 0301 	bic.w	r3, r3, #1
 8016d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	3308      	adds	r3, #8
 8016d7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016d7c:	61fa      	str	r2, [r7, #28]
 8016d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d80:	69b9      	ldr	r1, [r7, #24]
 8016d82:	69fa      	ldr	r2, [r7, #28]
 8016d84:	e841 2300 	strex	r3, r2, [r1]
 8016d88:	617b      	str	r3, [r7, #20]
   return(result);
 8016d8a:	697b      	ldr	r3, [r7, #20]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d1e5      	bne.n	8016d5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	2220      	movs	r2, #32
 8016d94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	2200      	movs	r2, #0
 8016d9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016da0:	2303      	movs	r3, #3
 8016da2:	e011      	b.n	8016dc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2220      	movs	r2, #32
 8016da8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2220      	movs	r2, #32
 8016dae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	2200      	movs	r2, #0
 8016db6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	2200      	movs	r2, #0
 8016dbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8016dc6:	2300      	movs	r3, #0
}
 8016dc8:	4618      	mov	r0, r3
 8016dca:	3758      	adds	r7, #88	@ 0x58
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	60f8      	str	r0, [r7, #12]
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	603b      	str	r3, [r7, #0]
 8016ddc:	4613      	mov	r3, r2
 8016dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016de0:	e04f      	b.n	8016e82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016de2:	69bb      	ldr	r3, [r7, #24]
 8016de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016de8:	d04b      	beq.n	8016e82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016dea:	f7fd fd45 	bl	8014878 <HAL_GetTick>
 8016dee:	4602      	mov	r2, r0
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	1ad3      	subs	r3, r2, r3
 8016df4:	69ba      	ldr	r2, [r7, #24]
 8016df6:	429a      	cmp	r2, r3
 8016df8:	d302      	bcc.n	8016e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8016dfa:	69bb      	ldr	r3, [r7, #24]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d101      	bne.n	8016e04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8016e00:	2303      	movs	r3, #3
 8016e02:	e04e      	b.n	8016ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	f003 0304 	and.w	r3, r3, #4
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d037      	beq.n	8016e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8016e12:	68bb      	ldr	r3, [r7, #8]
 8016e14:	2b80      	cmp	r3, #128	@ 0x80
 8016e16:	d034      	beq.n	8016e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8016e18:	68bb      	ldr	r3, [r7, #8]
 8016e1a:	2b40      	cmp	r3, #64	@ 0x40
 8016e1c:	d031      	beq.n	8016e82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	69db      	ldr	r3, [r3, #28]
 8016e24:	f003 0308 	and.w	r3, r3, #8
 8016e28:	2b08      	cmp	r3, #8
 8016e2a:	d110      	bne.n	8016e4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	2208      	movs	r2, #8
 8016e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016e34:	68f8      	ldr	r0, [r7, #12]
 8016e36:	f000 f838 	bl	8016eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	2208      	movs	r2, #8
 8016e3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	2200      	movs	r2, #0
 8016e46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	e029      	b.n	8016ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	69db      	ldr	r3, [r3, #28]
 8016e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016e5c:	d111      	bne.n	8016e82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016e68:	68f8      	ldr	r0, [r7, #12]
 8016e6a:	f000 f81e 	bl	8016eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	2220      	movs	r2, #32
 8016e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	2200      	movs	r2, #0
 8016e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8016e7e:	2303      	movs	r3, #3
 8016e80:	e00f      	b.n	8016ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	69da      	ldr	r2, [r3, #28]
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	4013      	ands	r3, r2
 8016e8c:	68ba      	ldr	r2, [r7, #8]
 8016e8e:	429a      	cmp	r2, r3
 8016e90:	bf0c      	ite	eq
 8016e92:	2301      	moveq	r3, #1
 8016e94:	2300      	movne	r3, #0
 8016e96:	b2db      	uxtb	r3, r3
 8016e98:	461a      	mov	r2, r3
 8016e9a:	79fb      	ldrb	r3, [r7, #7]
 8016e9c:	429a      	cmp	r2, r3
 8016e9e:	d0a0      	beq.n	8016de2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016ea0:	2300      	movs	r3, #0
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3710      	adds	r7, #16
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}

08016eaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016eaa:	b480      	push	{r7}
 8016eac:	b095      	sub	sp, #84	@ 0x54
 8016eae:	af00      	add	r7, sp, #0
 8016eb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016eba:	e853 3f00 	ldrex	r3, [r3]
 8016ebe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8016ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ec2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	461a      	mov	r2, r3
 8016ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8016ed2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ed4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016ed6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016ed8:	e841 2300 	strex	r3, r2, [r1]
 8016edc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8016ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d1e6      	bne.n	8016eb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	3308      	adds	r3, #8
 8016eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016eec:	6a3b      	ldr	r3, [r7, #32]
 8016eee:	e853 3f00 	ldrex	r3, [r3]
 8016ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8016ef4:	69fb      	ldr	r3, [r7, #28]
 8016ef6:	f023 0301 	bic.w	r3, r3, #1
 8016efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	3308      	adds	r3, #8
 8016f02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016f04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8016f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016f0c:	e841 2300 	strex	r3, r2, [r1]
 8016f10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d1e5      	bne.n	8016ee4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016f1c:	2b01      	cmp	r3, #1
 8016f1e:	d118      	bne.n	8016f52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	e853 3f00 	ldrex	r3, [r3]
 8016f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8016f2e:	68bb      	ldr	r3, [r7, #8]
 8016f30:	f023 0310 	bic.w	r3, r3, #16
 8016f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	461a      	mov	r2, r3
 8016f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016f3e:	61bb      	str	r3, [r7, #24]
 8016f40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f42:	6979      	ldr	r1, [r7, #20]
 8016f44:	69ba      	ldr	r2, [r7, #24]
 8016f46:	e841 2300 	strex	r3, r2, [r1]
 8016f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8016f4c:	693b      	ldr	r3, [r7, #16]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d1e6      	bne.n	8016f20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	2220      	movs	r2, #32
 8016f56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2200      	movs	r2, #0
 8016f64:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8016f66:	bf00      	nop
 8016f68:	3754      	adds	r7, #84	@ 0x54
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f70:	4770      	bx	lr
	...

08016f74 <std>:
 8016f74:	2300      	movs	r3, #0
 8016f76:	b510      	push	{r4, lr}
 8016f78:	4604      	mov	r4, r0
 8016f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8016f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016f82:	6083      	str	r3, [r0, #8]
 8016f84:	8181      	strh	r1, [r0, #12]
 8016f86:	6643      	str	r3, [r0, #100]	@ 0x64
 8016f88:	81c2      	strh	r2, [r0, #14]
 8016f8a:	6183      	str	r3, [r0, #24]
 8016f8c:	4619      	mov	r1, r3
 8016f8e:	2208      	movs	r2, #8
 8016f90:	305c      	adds	r0, #92	@ 0x5c
 8016f92:	f000 f906 	bl	80171a2 <memset>
 8016f96:	4b0d      	ldr	r3, [pc, #52]	@ (8016fcc <std+0x58>)
 8016f98:	6263      	str	r3, [r4, #36]	@ 0x24
 8016f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8016fd0 <std+0x5c>)
 8016f9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8016fd4 <std+0x60>)
 8016fa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8016fd8 <std+0x64>)
 8016fa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8016fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8016fdc <std+0x68>)
 8016fa8:	6224      	str	r4, [r4, #32]
 8016faa:	429c      	cmp	r4, r3
 8016fac:	d006      	beq.n	8016fbc <std+0x48>
 8016fae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016fb2:	4294      	cmp	r4, r2
 8016fb4:	d002      	beq.n	8016fbc <std+0x48>
 8016fb6:	33d0      	adds	r3, #208	@ 0xd0
 8016fb8:	429c      	cmp	r4, r3
 8016fba:	d105      	bne.n	8016fc8 <std+0x54>
 8016fbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fc4:	f000 b966 	b.w	8017294 <__retarget_lock_init_recursive>
 8016fc8:	bd10      	pop	{r4, pc}
 8016fca:	bf00      	nop
 8016fcc:	0801711d 	.word	0x0801711d
 8016fd0:	0801713f 	.word	0x0801713f
 8016fd4:	08017177 	.word	0x08017177
 8016fd8:	0801719b 	.word	0x0801719b
 8016fdc:	20000114 	.word	0x20000114

08016fe0 <stdio_exit_handler>:
 8016fe0:	4a02      	ldr	r2, [pc, #8]	@ (8016fec <stdio_exit_handler+0xc>)
 8016fe2:	4903      	ldr	r1, [pc, #12]	@ (8016ff0 <stdio_exit_handler+0x10>)
 8016fe4:	4803      	ldr	r0, [pc, #12]	@ (8016ff4 <stdio_exit_handler+0x14>)
 8016fe6:	f000 b869 	b.w	80170bc <_fwalk_sglue>
 8016fea:	bf00      	nop
 8016fec:	2000000c 	.word	0x2000000c
 8016ff0:	08017b35 	.word	0x08017b35
 8016ff4:	2000001c 	.word	0x2000001c

08016ff8 <cleanup_stdio>:
 8016ff8:	6841      	ldr	r1, [r0, #4]
 8016ffa:	4b0c      	ldr	r3, [pc, #48]	@ (801702c <cleanup_stdio+0x34>)
 8016ffc:	4299      	cmp	r1, r3
 8016ffe:	b510      	push	{r4, lr}
 8017000:	4604      	mov	r4, r0
 8017002:	d001      	beq.n	8017008 <cleanup_stdio+0x10>
 8017004:	f000 fd96 	bl	8017b34 <_fflush_r>
 8017008:	68a1      	ldr	r1, [r4, #8]
 801700a:	4b09      	ldr	r3, [pc, #36]	@ (8017030 <cleanup_stdio+0x38>)
 801700c:	4299      	cmp	r1, r3
 801700e:	d002      	beq.n	8017016 <cleanup_stdio+0x1e>
 8017010:	4620      	mov	r0, r4
 8017012:	f000 fd8f 	bl	8017b34 <_fflush_r>
 8017016:	68e1      	ldr	r1, [r4, #12]
 8017018:	4b06      	ldr	r3, [pc, #24]	@ (8017034 <cleanup_stdio+0x3c>)
 801701a:	4299      	cmp	r1, r3
 801701c:	d004      	beq.n	8017028 <cleanup_stdio+0x30>
 801701e:	4620      	mov	r0, r4
 8017020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017024:	f000 bd86 	b.w	8017b34 <_fflush_r>
 8017028:	bd10      	pop	{r4, pc}
 801702a:	bf00      	nop
 801702c:	20000114 	.word	0x20000114
 8017030:	2000017c 	.word	0x2000017c
 8017034:	200001e4 	.word	0x200001e4

08017038 <global_stdio_init.part.0>:
 8017038:	b510      	push	{r4, lr}
 801703a:	4b0b      	ldr	r3, [pc, #44]	@ (8017068 <global_stdio_init.part.0+0x30>)
 801703c:	4c0b      	ldr	r4, [pc, #44]	@ (801706c <global_stdio_init.part.0+0x34>)
 801703e:	4a0c      	ldr	r2, [pc, #48]	@ (8017070 <global_stdio_init.part.0+0x38>)
 8017040:	601a      	str	r2, [r3, #0]
 8017042:	4620      	mov	r0, r4
 8017044:	2200      	movs	r2, #0
 8017046:	2104      	movs	r1, #4
 8017048:	f7ff ff94 	bl	8016f74 <std>
 801704c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017050:	2201      	movs	r2, #1
 8017052:	2109      	movs	r1, #9
 8017054:	f7ff ff8e 	bl	8016f74 <std>
 8017058:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801705c:	2202      	movs	r2, #2
 801705e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017062:	2112      	movs	r1, #18
 8017064:	f7ff bf86 	b.w	8016f74 <std>
 8017068:	2000024c 	.word	0x2000024c
 801706c:	20000114 	.word	0x20000114
 8017070:	08016fe1 	.word	0x08016fe1

08017074 <__sfp_lock_acquire>:
 8017074:	4801      	ldr	r0, [pc, #4]	@ (801707c <__sfp_lock_acquire+0x8>)
 8017076:	f000 b90e 	b.w	8017296 <__retarget_lock_acquire_recursive>
 801707a:	bf00      	nop
 801707c:	20000255 	.word	0x20000255

08017080 <__sfp_lock_release>:
 8017080:	4801      	ldr	r0, [pc, #4]	@ (8017088 <__sfp_lock_release+0x8>)
 8017082:	f000 b909 	b.w	8017298 <__retarget_lock_release_recursive>
 8017086:	bf00      	nop
 8017088:	20000255 	.word	0x20000255

0801708c <__sinit>:
 801708c:	b510      	push	{r4, lr}
 801708e:	4604      	mov	r4, r0
 8017090:	f7ff fff0 	bl	8017074 <__sfp_lock_acquire>
 8017094:	6a23      	ldr	r3, [r4, #32]
 8017096:	b11b      	cbz	r3, 80170a0 <__sinit+0x14>
 8017098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801709c:	f7ff bff0 	b.w	8017080 <__sfp_lock_release>
 80170a0:	4b04      	ldr	r3, [pc, #16]	@ (80170b4 <__sinit+0x28>)
 80170a2:	6223      	str	r3, [r4, #32]
 80170a4:	4b04      	ldr	r3, [pc, #16]	@ (80170b8 <__sinit+0x2c>)
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d1f5      	bne.n	8017098 <__sinit+0xc>
 80170ac:	f7ff ffc4 	bl	8017038 <global_stdio_init.part.0>
 80170b0:	e7f2      	b.n	8017098 <__sinit+0xc>
 80170b2:	bf00      	nop
 80170b4:	08016ff9 	.word	0x08016ff9
 80170b8:	2000024c 	.word	0x2000024c

080170bc <_fwalk_sglue>:
 80170bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170c0:	4607      	mov	r7, r0
 80170c2:	4688      	mov	r8, r1
 80170c4:	4614      	mov	r4, r2
 80170c6:	2600      	movs	r6, #0
 80170c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80170cc:	f1b9 0901 	subs.w	r9, r9, #1
 80170d0:	d505      	bpl.n	80170de <_fwalk_sglue+0x22>
 80170d2:	6824      	ldr	r4, [r4, #0]
 80170d4:	2c00      	cmp	r4, #0
 80170d6:	d1f7      	bne.n	80170c8 <_fwalk_sglue+0xc>
 80170d8:	4630      	mov	r0, r6
 80170da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170de:	89ab      	ldrh	r3, [r5, #12]
 80170e0:	2b01      	cmp	r3, #1
 80170e2:	d907      	bls.n	80170f4 <_fwalk_sglue+0x38>
 80170e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80170e8:	3301      	adds	r3, #1
 80170ea:	d003      	beq.n	80170f4 <_fwalk_sglue+0x38>
 80170ec:	4629      	mov	r1, r5
 80170ee:	4638      	mov	r0, r7
 80170f0:	47c0      	blx	r8
 80170f2:	4306      	orrs	r6, r0
 80170f4:	3568      	adds	r5, #104	@ 0x68
 80170f6:	e7e9      	b.n	80170cc <_fwalk_sglue+0x10>

080170f8 <iprintf>:
 80170f8:	b40f      	push	{r0, r1, r2, r3}
 80170fa:	b507      	push	{r0, r1, r2, lr}
 80170fc:	4906      	ldr	r1, [pc, #24]	@ (8017118 <iprintf+0x20>)
 80170fe:	ab04      	add	r3, sp, #16
 8017100:	6808      	ldr	r0, [r1, #0]
 8017102:	f853 2b04 	ldr.w	r2, [r3], #4
 8017106:	6881      	ldr	r1, [r0, #8]
 8017108:	9301      	str	r3, [sp, #4]
 801710a:	f000 f9e9 	bl	80174e0 <_vfiprintf_r>
 801710e:	b003      	add	sp, #12
 8017110:	f85d eb04 	ldr.w	lr, [sp], #4
 8017114:	b004      	add	sp, #16
 8017116:	4770      	bx	lr
 8017118:	20000018 	.word	0x20000018

0801711c <__sread>:
 801711c:	b510      	push	{r4, lr}
 801711e:	460c      	mov	r4, r1
 8017120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017124:	f000 f868 	bl	80171f8 <_read_r>
 8017128:	2800      	cmp	r0, #0
 801712a:	bfab      	itete	ge
 801712c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801712e:	89a3      	ldrhlt	r3, [r4, #12]
 8017130:	181b      	addge	r3, r3, r0
 8017132:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017136:	bfac      	ite	ge
 8017138:	6563      	strge	r3, [r4, #84]	@ 0x54
 801713a:	81a3      	strhlt	r3, [r4, #12]
 801713c:	bd10      	pop	{r4, pc}

0801713e <__swrite>:
 801713e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017142:	461f      	mov	r7, r3
 8017144:	898b      	ldrh	r3, [r1, #12]
 8017146:	05db      	lsls	r3, r3, #23
 8017148:	4605      	mov	r5, r0
 801714a:	460c      	mov	r4, r1
 801714c:	4616      	mov	r6, r2
 801714e:	d505      	bpl.n	801715c <__swrite+0x1e>
 8017150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017154:	2302      	movs	r3, #2
 8017156:	2200      	movs	r2, #0
 8017158:	f000 f83c 	bl	80171d4 <_lseek_r>
 801715c:	89a3      	ldrh	r3, [r4, #12]
 801715e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017166:	81a3      	strh	r3, [r4, #12]
 8017168:	4632      	mov	r2, r6
 801716a:	463b      	mov	r3, r7
 801716c:	4628      	mov	r0, r5
 801716e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017172:	f000 b853 	b.w	801721c <_write_r>

08017176 <__sseek>:
 8017176:	b510      	push	{r4, lr}
 8017178:	460c      	mov	r4, r1
 801717a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801717e:	f000 f829 	bl	80171d4 <_lseek_r>
 8017182:	1c43      	adds	r3, r0, #1
 8017184:	89a3      	ldrh	r3, [r4, #12]
 8017186:	bf15      	itete	ne
 8017188:	6560      	strne	r0, [r4, #84]	@ 0x54
 801718a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801718e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017192:	81a3      	strheq	r3, [r4, #12]
 8017194:	bf18      	it	ne
 8017196:	81a3      	strhne	r3, [r4, #12]
 8017198:	bd10      	pop	{r4, pc}

0801719a <__sclose>:
 801719a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801719e:	f000 b809 	b.w	80171b4 <_close_r>

080171a2 <memset>:
 80171a2:	4402      	add	r2, r0
 80171a4:	4603      	mov	r3, r0
 80171a6:	4293      	cmp	r3, r2
 80171a8:	d100      	bne.n	80171ac <memset+0xa>
 80171aa:	4770      	bx	lr
 80171ac:	f803 1b01 	strb.w	r1, [r3], #1
 80171b0:	e7f9      	b.n	80171a6 <memset+0x4>
	...

080171b4 <_close_r>:
 80171b4:	b538      	push	{r3, r4, r5, lr}
 80171b6:	4d06      	ldr	r5, [pc, #24]	@ (80171d0 <_close_r+0x1c>)
 80171b8:	2300      	movs	r3, #0
 80171ba:	4604      	mov	r4, r0
 80171bc:	4608      	mov	r0, r1
 80171be:	602b      	str	r3, [r5, #0]
 80171c0:	f7fd fa56 	bl	8014670 <_close>
 80171c4:	1c43      	adds	r3, r0, #1
 80171c6:	d102      	bne.n	80171ce <_close_r+0x1a>
 80171c8:	682b      	ldr	r3, [r5, #0]
 80171ca:	b103      	cbz	r3, 80171ce <_close_r+0x1a>
 80171cc:	6023      	str	r3, [r4, #0]
 80171ce:	bd38      	pop	{r3, r4, r5, pc}
 80171d0:	20000250 	.word	0x20000250

080171d4 <_lseek_r>:
 80171d4:	b538      	push	{r3, r4, r5, lr}
 80171d6:	4d07      	ldr	r5, [pc, #28]	@ (80171f4 <_lseek_r+0x20>)
 80171d8:	4604      	mov	r4, r0
 80171da:	4608      	mov	r0, r1
 80171dc:	4611      	mov	r1, r2
 80171de:	2200      	movs	r2, #0
 80171e0:	602a      	str	r2, [r5, #0]
 80171e2:	461a      	mov	r2, r3
 80171e4:	f7fd fa6b 	bl	80146be <_lseek>
 80171e8:	1c43      	adds	r3, r0, #1
 80171ea:	d102      	bne.n	80171f2 <_lseek_r+0x1e>
 80171ec:	682b      	ldr	r3, [r5, #0]
 80171ee:	b103      	cbz	r3, 80171f2 <_lseek_r+0x1e>
 80171f0:	6023      	str	r3, [r4, #0]
 80171f2:	bd38      	pop	{r3, r4, r5, pc}
 80171f4:	20000250 	.word	0x20000250

080171f8 <_read_r>:
 80171f8:	b538      	push	{r3, r4, r5, lr}
 80171fa:	4d07      	ldr	r5, [pc, #28]	@ (8017218 <_read_r+0x20>)
 80171fc:	4604      	mov	r4, r0
 80171fe:	4608      	mov	r0, r1
 8017200:	4611      	mov	r1, r2
 8017202:	2200      	movs	r2, #0
 8017204:	602a      	str	r2, [r5, #0]
 8017206:	461a      	mov	r2, r3
 8017208:	f7fd f9f9 	bl	80145fe <_read>
 801720c:	1c43      	adds	r3, r0, #1
 801720e:	d102      	bne.n	8017216 <_read_r+0x1e>
 8017210:	682b      	ldr	r3, [r5, #0]
 8017212:	b103      	cbz	r3, 8017216 <_read_r+0x1e>
 8017214:	6023      	str	r3, [r4, #0]
 8017216:	bd38      	pop	{r3, r4, r5, pc}
 8017218:	20000250 	.word	0x20000250

0801721c <_write_r>:
 801721c:	b538      	push	{r3, r4, r5, lr}
 801721e:	4d07      	ldr	r5, [pc, #28]	@ (801723c <_write_r+0x20>)
 8017220:	4604      	mov	r4, r0
 8017222:	4608      	mov	r0, r1
 8017224:	4611      	mov	r1, r2
 8017226:	2200      	movs	r2, #0
 8017228:	602a      	str	r2, [r5, #0]
 801722a:	461a      	mov	r2, r3
 801722c:	f7fd fa04 	bl	8014638 <_write>
 8017230:	1c43      	adds	r3, r0, #1
 8017232:	d102      	bne.n	801723a <_write_r+0x1e>
 8017234:	682b      	ldr	r3, [r5, #0]
 8017236:	b103      	cbz	r3, 801723a <_write_r+0x1e>
 8017238:	6023      	str	r3, [r4, #0]
 801723a:	bd38      	pop	{r3, r4, r5, pc}
 801723c:	20000250 	.word	0x20000250

08017240 <__errno>:
 8017240:	4b01      	ldr	r3, [pc, #4]	@ (8017248 <__errno+0x8>)
 8017242:	6818      	ldr	r0, [r3, #0]
 8017244:	4770      	bx	lr
 8017246:	bf00      	nop
 8017248:	20000018 	.word	0x20000018

0801724c <__libc_init_array>:
 801724c:	b570      	push	{r4, r5, r6, lr}
 801724e:	4d0d      	ldr	r5, [pc, #52]	@ (8017284 <__libc_init_array+0x38>)
 8017250:	4c0d      	ldr	r4, [pc, #52]	@ (8017288 <__libc_init_array+0x3c>)
 8017252:	1b64      	subs	r4, r4, r5
 8017254:	10a4      	asrs	r4, r4, #2
 8017256:	2600      	movs	r6, #0
 8017258:	42a6      	cmp	r6, r4
 801725a:	d109      	bne.n	8017270 <__libc_init_array+0x24>
 801725c:	4d0b      	ldr	r5, [pc, #44]	@ (801728c <__libc_init_array+0x40>)
 801725e:	4c0c      	ldr	r4, [pc, #48]	@ (8017290 <__libc_init_array+0x44>)
 8017260:	f000 fdb8 	bl	8017dd4 <_init>
 8017264:	1b64      	subs	r4, r4, r5
 8017266:	10a4      	asrs	r4, r4, #2
 8017268:	2600      	movs	r6, #0
 801726a:	42a6      	cmp	r6, r4
 801726c:	d105      	bne.n	801727a <__libc_init_array+0x2e>
 801726e:	bd70      	pop	{r4, r5, r6, pc}
 8017270:	f855 3b04 	ldr.w	r3, [r5], #4
 8017274:	4798      	blx	r3
 8017276:	3601      	adds	r6, #1
 8017278:	e7ee      	b.n	8017258 <__libc_init_array+0xc>
 801727a:	f855 3b04 	ldr.w	r3, [r5], #4
 801727e:	4798      	blx	r3
 8017280:	3601      	adds	r6, #1
 8017282:	e7f2      	b.n	801726a <__libc_init_array+0x1e>
 8017284:	08017e88 	.word	0x08017e88
 8017288:	08017e88 	.word	0x08017e88
 801728c:	08017e88 	.word	0x08017e88
 8017290:	08017e8c 	.word	0x08017e8c

08017294 <__retarget_lock_init_recursive>:
 8017294:	4770      	bx	lr

08017296 <__retarget_lock_acquire_recursive>:
 8017296:	4770      	bx	lr

08017298 <__retarget_lock_release_recursive>:
 8017298:	4770      	bx	lr
	...

0801729c <_free_r>:
 801729c:	b538      	push	{r3, r4, r5, lr}
 801729e:	4605      	mov	r5, r0
 80172a0:	2900      	cmp	r1, #0
 80172a2:	d041      	beq.n	8017328 <_free_r+0x8c>
 80172a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172a8:	1f0c      	subs	r4, r1, #4
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	bfb8      	it	lt
 80172ae:	18e4      	addlt	r4, r4, r3
 80172b0:	f000 f8e0 	bl	8017474 <__malloc_lock>
 80172b4:	4a1d      	ldr	r2, [pc, #116]	@ (801732c <_free_r+0x90>)
 80172b6:	6813      	ldr	r3, [r2, #0]
 80172b8:	b933      	cbnz	r3, 80172c8 <_free_r+0x2c>
 80172ba:	6063      	str	r3, [r4, #4]
 80172bc:	6014      	str	r4, [r2, #0]
 80172be:	4628      	mov	r0, r5
 80172c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80172c4:	f000 b8dc 	b.w	8017480 <__malloc_unlock>
 80172c8:	42a3      	cmp	r3, r4
 80172ca:	d908      	bls.n	80172de <_free_r+0x42>
 80172cc:	6820      	ldr	r0, [r4, #0]
 80172ce:	1821      	adds	r1, r4, r0
 80172d0:	428b      	cmp	r3, r1
 80172d2:	bf01      	itttt	eq
 80172d4:	6819      	ldreq	r1, [r3, #0]
 80172d6:	685b      	ldreq	r3, [r3, #4]
 80172d8:	1809      	addeq	r1, r1, r0
 80172da:	6021      	streq	r1, [r4, #0]
 80172dc:	e7ed      	b.n	80172ba <_free_r+0x1e>
 80172de:	461a      	mov	r2, r3
 80172e0:	685b      	ldr	r3, [r3, #4]
 80172e2:	b10b      	cbz	r3, 80172e8 <_free_r+0x4c>
 80172e4:	42a3      	cmp	r3, r4
 80172e6:	d9fa      	bls.n	80172de <_free_r+0x42>
 80172e8:	6811      	ldr	r1, [r2, #0]
 80172ea:	1850      	adds	r0, r2, r1
 80172ec:	42a0      	cmp	r0, r4
 80172ee:	d10b      	bne.n	8017308 <_free_r+0x6c>
 80172f0:	6820      	ldr	r0, [r4, #0]
 80172f2:	4401      	add	r1, r0
 80172f4:	1850      	adds	r0, r2, r1
 80172f6:	4283      	cmp	r3, r0
 80172f8:	6011      	str	r1, [r2, #0]
 80172fa:	d1e0      	bne.n	80172be <_free_r+0x22>
 80172fc:	6818      	ldr	r0, [r3, #0]
 80172fe:	685b      	ldr	r3, [r3, #4]
 8017300:	6053      	str	r3, [r2, #4]
 8017302:	4408      	add	r0, r1
 8017304:	6010      	str	r0, [r2, #0]
 8017306:	e7da      	b.n	80172be <_free_r+0x22>
 8017308:	d902      	bls.n	8017310 <_free_r+0x74>
 801730a:	230c      	movs	r3, #12
 801730c:	602b      	str	r3, [r5, #0]
 801730e:	e7d6      	b.n	80172be <_free_r+0x22>
 8017310:	6820      	ldr	r0, [r4, #0]
 8017312:	1821      	adds	r1, r4, r0
 8017314:	428b      	cmp	r3, r1
 8017316:	bf04      	itt	eq
 8017318:	6819      	ldreq	r1, [r3, #0]
 801731a:	685b      	ldreq	r3, [r3, #4]
 801731c:	6063      	str	r3, [r4, #4]
 801731e:	bf04      	itt	eq
 8017320:	1809      	addeq	r1, r1, r0
 8017322:	6021      	streq	r1, [r4, #0]
 8017324:	6054      	str	r4, [r2, #4]
 8017326:	e7ca      	b.n	80172be <_free_r+0x22>
 8017328:	bd38      	pop	{r3, r4, r5, pc}
 801732a:	bf00      	nop
 801732c:	2000025c 	.word	0x2000025c

08017330 <sbrk_aligned>:
 8017330:	b570      	push	{r4, r5, r6, lr}
 8017332:	4e0f      	ldr	r6, [pc, #60]	@ (8017370 <sbrk_aligned+0x40>)
 8017334:	460c      	mov	r4, r1
 8017336:	6831      	ldr	r1, [r6, #0]
 8017338:	4605      	mov	r5, r0
 801733a:	b911      	cbnz	r1, 8017342 <sbrk_aligned+0x12>
 801733c:	f000 fcb6 	bl	8017cac <_sbrk_r>
 8017340:	6030      	str	r0, [r6, #0]
 8017342:	4621      	mov	r1, r4
 8017344:	4628      	mov	r0, r5
 8017346:	f000 fcb1 	bl	8017cac <_sbrk_r>
 801734a:	1c43      	adds	r3, r0, #1
 801734c:	d103      	bne.n	8017356 <sbrk_aligned+0x26>
 801734e:	f04f 34ff 	mov.w	r4, #4294967295
 8017352:	4620      	mov	r0, r4
 8017354:	bd70      	pop	{r4, r5, r6, pc}
 8017356:	1cc4      	adds	r4, r0, #3
 8017358:	f024 0403 	bic.w	r4, r4, #3
 801735c:	42a0      	cmp	r0, r4
 801735e:	d0f8      	beq.n	8017352 <sbrk_aligned+0x22>
 8017360:	1a21      	subs	r1, r4, r0
 8017362:	4628      	mov	r0, r5
 8017364:	f000 fca2 	bl	8017cac <_sbrk_r>
 8017368:	3001      	adds	r0, #1
 801736a:	d1f2      	bne.n	8017352 <sbrk_aligned+0x22>
 801736c:	e7ef      	b.n	801734e <sbrk_aligned+0x1e>
 801736e:	bf00      	nop
 8017370:	20000258 	.word	0x20000258

08017374 <_malloc_r>:
 8017374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017378:	1ccd      	adds	r5, r1, #3
 801737a:	f025 0503 	bic.w	r5, r5, #3
 801737e:	3508      	adds	r5, #8
 8017380:	2d0c      	cmp	r5, #12
 8017382:	bf38      	it	cc
 8017384:	250c      	movcc	r5, #12
 8017386:	2d00      	cmp	r5, #0
 8017388:	4606      	mov	r6, r0
 801738a:	db01      	blt.n	8017390 <_malloc_r+0x1c>
 801738c:	42a9      	cmp	r1, r5
 801738e:	d904      	bls.n	801739a <_malloc_r+0x26>
 8017390:	230c      	movs	r3, #12
 8017392:	6033      	str	r3, [r6, #0]
 8017394:	2000      	movs	r0, #0
 8017396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801739a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017470 <_malloc_r+0xfc>
 801739e:	f000 f869 	bl	8017474 <__malloc_lock>
 80173a2:	f8d8 3000 	ldr.w	r3, [r8]
 80173a6:	461c      	mov	r4, r3
 80173a8:	bb44      	cbnz	r4, 80173fc <_malloc_r+0x88>
 80173aa:	4629      	mov	r1, r5
 80173ac:	4630      	mov	r0, r6
 80173ae:	f7ff ffbf 	bl	8017330 <sbrk_aligned>
 80173b2:	1c43      	adds	r3, r0, #1
 80173b4:	4604      	mov	r4, r0
 80173b6:	d158      	bne.n	801746a <_malloc_r+0xf6>
 80173b8:	f8d8 4000 	ldr.w	r4, [r8]
 80173bc:	4627      	mov	r7, r4
 80173be:	2f00      	cmp	r7, #0
 80173c0:	d143      	bne.n	801744a <_malloc_r+0xd6>
 80173c2:	2c00      	cmp	r4, #0
 80173c4:	d04b      	beq.n	801745e <_malloc_r+0xea>
 80173c6:	6823      	ldr	r3, [r4, #0]
 80173c8:	4639      	mov	r1, r7
 80173ca:	4630      	mov	r0, r6
 80173cc:	eb04 0903 	add.w	r9, r4, r3
 80173d0:	f000 fc6c 	bl	8017cac <_sbrk_r>
 80173d4:	4581      	cmp	r9, r0
 80173d6:	d142      	bne.n	801745e <_malloc_r+0xea>
 80173d8:	6821      	ldr	r1, [r4, #0]
 80173da:	1a6d      	subs	r5, r5, r1
 80173dc:	4629      	mov	r1, r5
 80173de:	4630      	mov	r0, r6
 80173e0:	f7ff ffa6 	bl	8017330 <sbrk_aligned>
 80173e4:	3001      	adds	r0, #1
 80173e6:	d03a      	beq.n	801745e <_malloc_r+0xea>
 80173e8:	6823      	ldr	r3, [r4, #0]
 80173ea:	442b      	add	r3, r5
 80173ec:	6023      	str	r3, [r4, #0]
 80173ee:	f8d8 3000 	ldr.w	r3, [r8]
 80173f2:	685a      	ldr	r2, [r3, #4]
 80173f4:	bb62      	cbnz	r2, 8017450 <_malloc_r+0xdc>
 80173f6:	f8c8 7000 	str.w	r7, [r8]
 80173fa:	e00f      	b.n	801741c <_malloc_r+0xa8>
 80173fc:	6822      	ldr	r2, [r4, #0]
 80173fe:	1b52      	subs	r2, r2, r5
 8017400:	d420      	bmi.n	8017444 <_malloc_r+0xd0>
 8017402:	2a0b      	cmp	r2, #11
 8017404:	d917      	bls.n	8017436 <_malloc_r+0xc2>
 8017406:	1961      	adds	r1, r4, r5
 8017408:	42a3      	cmp	r3, r4
 801740a:	6025      	str	r5, [r4, #0]
 801740c:	bf18      	it	ne
 801740e:	6059      	strne	r1, [r3, #4]
 8017410:	6863      	ldr	r3, [r4, #4]
 8017412:	bf08      	it	eq
 8017414:	f8c8 1000 	streq.w	r1, [r8]
 8017418:	5162      	str	r2, [r4, r5]
 801741a:	604b      	str	r3, [r1, #4]
 801741c:	4630      	mov	r0, r6
 801741e:	f000 f82f 	bl	8017480 <__malloc_unlock>
 8017422:	f104 000b 	add.w	r0, r4, #11
 8017426:	1d23      	adds	r3, r4, #4
 8017428:	f020 0007 	bic.w	r0, r0, #7
 801742c:	1ac2      	subs	r2, r0, r3
 801742e:	bf1c      	itt	ne
 8017430:	1a1b      	subne	r3, r3, r0
 8017432:	50a3      	strne	r3, [r4, r2]
 8017434:	e7af      	b.n	8017396 <_malloc_r+0x22>
 8017436:	6862      	ldr	r2, [r4, #4]
 8017438:	42a3      	cmp	r3, r4
 801743a:	bf0c      	ite	eq
 801743c:	f8c8 2000 	streq.w	r2, [r8]
 8017440:	605a      	strne	r2, [r3, #4]
 8017442:	e7eb      	b.n	801741c <_malloc_r+0xa8>
 8017444:	4623      	mov	r3, r4
 8017446:	6864      	ldr	r4, [r4, #4]
 8017448:	e7ae      	b.n	80173a8 <_malloc_r+0x34>
 801744a:	463c      	mov	r4, r7
 801744c:	687f      	ldr	r7, [r7, #4]
 801744e:	e7b6      	b.n	80173be <_malloc_r+0x4a>
 8017450:	461a      	mov	r2, r3
 8017452:	685b      	ldr	r3, [r3, #4]
 8017454:	42a3      	cmp	r3, r4
 8017456:	d1fb      	bne.n	8017450 <_malloc_r+0xdc>
 8017458:	2300      	movs	r3, #0
 801745a:	6053      	str	r3, [r2, #4]
 801745c:	e7de      	b.n	801741c <_malloc_r+0xa8>
 801745e:	230c      	movs	r3, #12
 8017460:	6033      	str	r3, [r6, #0]
 8017462:	4630      	mov	r0, r6
 8017464:	f000 f80c 	bl	8017480 <__malloc_unlock>
 8017468:	e794      	b.n	8017394 <_malloc_r+0x20>
 801746a:	6005      	str	r5, [r0, #0]
 801746c:	e7d6      	b.n	801741c <_malloc_r+0xa8>
 801746e:	bf00      	nop
 8017470:	2000025c 	.word	0x2000025c

08017474 <__malloc_lock>:
 8017474:	4801      	ldr	r0, [pc, #4]	@ (801747c <__malloc_lock+0x8>)
 8017476:	f7ff bf0e 	b.w	8017296 <__retarget_lock_acquire_recursive>
 801747a:	bf00      	nop
 801747c:	20000254 	.word	0x20000254

08017480 <__malloc_unlock>:
 8017480:	4801      	ldr	r0, [pc, #4]	@ (8017488 <__malloc_unlock+0x8>)
 8017482:	f7ff bf09 	b.w	8017298 <__retarget_lock_release_recursive>
 8017486:	bf00      	nop
 8017488:	20000254 	.word	0x20000254

0801748c <__sfputc_r>:
 801748c:	6893      	ldr	r3, [r2, #8]
 801748e:	3b01      	subs	r3, #1
 8017490:	2b00      	cmp	r3, #0
 8017492:	b410      	push	{r4}
 8017494:	6093      	str	r3, [r2, #8]
 8017496:	da08      	bge.n	80174aa <__sfputc_r+0x1e>
 8017498:	6994      	ldr	r4, [r2, #24]
 801749a:	42a3      	cmp	r3, r4
 801749c:	db01      	blt.n	80174a2 <__sfputc_r+0x16>
 801749e:	290a      	cmp	r1, #10
 80174a0:	d103      	bne.n	80174aa <__sfputc_r+0x1e>
 80174a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174a6:	f000 bb6d 	b.w	8017b84 <__swbuf_r>
 80174aa:	6813      	ldr	r3, [r2, #0]
 80174ac:	1c58      	adds	r0, r3, #1
 80174ae:	6010      	str	r0, [r2, #0]
 80174b0:	7019      	strb	r1, [r3, #0]
 80174b2:	4608      	mov	r0, r1
 80174b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174b8:	4770      	bx	lr

080174ba <__sfputs_r>:
 80174ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174bc:	4606      	mov	r6, r0
 80174be:	460f      	mov	r7, r1
 80174c0:	4614      	mov	r4, r2
 80174c2:	18d5      	adds	r5, r2, r3
 80174c4:	42ac      	cmp	r4, r5
 80174c6:	d101      	bne.n	80174cc <__sfputs_r+0x12>
 80174c8:	2000      	movs	r0, #0
 80174ca:	e007      	b.n	80174dc <__sfputs_r+0x22>
 80174cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174d0:	463a      	mov	r2, r7
 80174d2:	4630      	mov	r0, r6
 80174d4:	f7ff ffda 	bl	801748c <__sfputc_r>
 80174d8:	1c43      	adds	r3, r0, #1
 80174da:	d1f3      	bne.n	80174c4 <__sfputs_r+0xa>
 80174dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080174e0 <_vfiprintf_r>:
 80174e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174e4:	460d      	mov	r5, r1
 80174e6:	b09d      	sub	sp, #116	@ 0x74
 80174e8:	4614      	mov	r4, r2
 80174ea:	4698      	mov	r8, r3
 80174ec:	4606      	mov	r6, r0
 80174ee:	b118      	cbz	r0, 80174f8 <_vfiprintf_r+0x18>
 80174f0:	6a03      	ldr	r3, [r0, #32]
 80174f2:	b90b      	cbnz	r3, 80174f8 <_vfiprintf_r+0x18>
 80174f4:	f7ff fdca 	bl	801708c <__sinit>
 80174f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80174fa:	07d9      	lsls	r1, r3, #31
 80174fc:	d405      	bmi.n	801750a <_vfiprintf_r+0x2a>
 80174fe:	89ab      	ldrh	r3, [r5, #12]
 8017500:	059a      	lsls	r2, r3, #22
 8017502:	d402      	bmi.n	801750a <_vfiprintf_r+0x2a>
 8017504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017506:	f7ff fec6 	bl	8017296 <__retarget_lock_acquire_recursive>
 801750a:	89ab      	ldrh	r3, [r5, #12]
 801750c:	071b      	lsls	r3, r3, #28
 801750e:	d501      	bpl.n	8017514 <_vfiprintf_r+0x34>
 8017510:	692b      	ldr	r3, [r5, #16]
 8017512:	b99b      	cbnz	r3, 801753c <_vfiprintf_r+0x5c>
 8017514:	4629      	mov	r1, r5
 8017516:	4630      	mov	r0, r6
 8017518:	f000 fb72 	bl	8017c00 <__swsetup_r>
 801751c:	b170      	cbz	r0, 801753c <_vfiprintf_r+0x5c>
 801751e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017520:	07dc      	lsls	r4, r3, #31
 8017522:	d504      	bpl.n	801752e <_vfiprintf_r+0x4e>
 8017524:	f04f 30ff 	mov.w	r0, #4294967295
 8017528:	b01d      	add	sp, #116	@ 0x74
 801752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801752e:	89ab      	ldrh	r3, [r5, #12]
 8017530:	0598      	lsls	r0, r3, #22
 8017532:	d4f7      	bmi.n	8017524 <_vfiprintf_r+0x44>
 8017534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017536:	f7ff feaf 	bl	8017298 <__retarget_lock_release_recursive>
 801753a:	e7f3      	b.n	8017524 <_vfiprintf_r+0x44>
 801753c:	2300      	movs	r3, #0
 801753e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017540:	2320      	movs	r3, #32
 8017542:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017546:	f8cd 800c 	str.w	r8, [sp, #12]
 801754a:	2330      	movs	r3, #48	@ 0x30
 801754c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80176fc <_vfiprintf_r+0x21c>
 8017550:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017554:	f04f 0901 	mov.w	r9, #1
 8017558:	4623      	mov	r3, r4
 801755a:	469a      	mov	sl, r3
 801755c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017560:	b10a      	cbz	r2, 8017566 <_vfiprintf_r+0x86>
 8017562:	2a25      	cmp	r2, #37	@ 0x25
 8017564:	d1f9      	bne.n	801755a <_vfiprintf_r+0x7a>
 8017566:	ebba 0b04 	subs.w	fp, sl, r4
 801756a:	d00b      	beq.n	8017584 <_vfiprintf_r+0xa4>
 801756c:	465b      	mov	r3, fp
 801756e:	4622      	mov	r2, r4
 8017570:	4629      	mov	r1, r5
 8017572:	4630      	mov	r0, r6
 8017574:	f7ff ffa1 	bl	80174ba <__sfputs_r>
 8017578:	3001      	adds	r0, #1
 801757a:	f000 80a7 	beq.w	80176cc <_vfiprintf_r+0x1ec>
 801757e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017580:	445a      	add	r2, fp
 8017582:	9209      	str	r2, [sp, #36]	@ 0x24
 8017584:	f89a 3000 	ldrb.w	r3, [sl]
 8017588:	2b00      	cmp	r3, #0
 801758a:	f000 809f 	beq.w	80176cc <_vfiprintf_r+0x1ec>
 801758e:	2300      	movs	r3, #0
 8017590:	f04f 32ff 	mov.w	r2, #4294967295
 8017594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017598:	f10a 0a01 	add.w	sl, sl, #1
 801759c:	9304      	str	r3, [sp, #16]
 801759e:	9307      	str	r3, [sp, #28]
 80175a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80175a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80175a6:	4654      	mov	r4, sl
 80175a8:	2205      	movs	r2, #5
 80175aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175ae:	4853      	ldr	r0, [pc, #332]	@ (80176fc <_vfiprintf_r+0x21c>)
 80175b0:	f7fc fe0e 	bl	80141d0 <memchr>
 80175b4:	9a04      	ldr	r2, [sp, #16]
 80175b6:	b9d8      	cbnz	r0, 80175f0 <_vfiprintf_r+0x110>
 80175b8:	06d1      	lsls	r1, r2, #27
 80175ba:	bf44      	itt	mi
 80175bc:	2320      	movmi	r3, #32
 80175be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80175c2:	0713      	lsls	r3, r2, #28
 80175c4:	bf44      	itt	mi
 80175c6:	232b      	movmi	r3, #43	@ 0x2b
 80175c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80175cc:	f89a 3000 	ldrb.w	r3, [sl]
 80175d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80175d2:	d015      	beq.n	8017600 <_vfiprintf_r+0x120>
 80175d4:	9a07      	ldr	r2, [sp, #28]
 80175d6:	4654      	mov	r4, sl
 80175d8:	2000      	movs	r0, #0
 80175da:	f04f 0c0a 	mov.w	ip, #10
 80175de:	4621      	mov	r1, r4
 80175e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175e4:	3b30      	subs	r3, #48	@ 0x30
 80175e6:	2b09      	cmp	r3, #9
 80175e8:	d94b      	bls.n	8017682 <_vfiprintf_r+0x1a2>
 80175ea:	b1b0      	cbz	r0, 801761a <_vfiprintf_r+0x13a>
 80175ec:	9207      	str	r2, [sp, #28]
 80175ee:	e014      	b.n	801761a <_vfiprintf_r+0x13a>
 80175f0:	eba0 0308 	sub.w	r3, r0, r8
 80175f4:	fa09 f303 	lsl.w	r3, r9, r3
 80175f8:	4313      	orrs	r3, r2
 80175fa:	9304      	str	r3, [sp, #16]
 80175fc:	46a2      	mov	sl, r4
 80175fe:	e7d2      	b.n	80175a6 <_vfiprintf_r+0xc6>
 8017600:	9b03      	ldr	r3, [sp, #12]
 8017602:	1d19      	adds	r1, r3, #4
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	9103      	str	r1, [sp, #12]
 8017608:	2b00      	cmp	r3, #0
 801760a:	bfbb      	ittet	lt
 801760c:	425b      	neglt	r3, r3
 801760e:	f042 0202 	orrlt.w	r2, r2, #2
 8017612:	9307      	strge	r3, [sp, #28]
 8017614:	9307      	strlt	r3, [sp, #28]
 8017616:	bfb8      	it	lt
 8017618:	9204      	strlt	r2, [sp, #16]
 801761a:	7823      	ldrb	r3, [r4, #0]
 801761c:	2b2e      	cmp	r3, #46	@ 0x2e
 801761e:	d10a      	bne.n	8017636 <_vfiprintf_r+0x156>
 8017620:	7863      	ldrb	r3, [r4, #1]
 8017622:	2b2a      	cmp	r3, #42	@ 0x2a
 8017624:	d132      	bne.n	801768c <_vfiprintf_r+0x1ac>
 8017626:	9b03      	ldr	r3, [sp, #12]
 8017628:	1d1a      	adds	r2, r3, #4
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	9203      	str	r2, [sp, #12]
 801762e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017632:	3402      	adds	r4, #2
 8017634:	9305      	str	r3, [sp, #20]
 8017636:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801770c <_vfiprintf_r+0x22c>
 801763a:	7821      	ldrb	r1, [r4, #0]
 801763c:	2203      	movs	r2, #3
 801763e:	4650      	mov	r0, sl
 8017640:	f7fc fdc6 	bl	80141d0 <memchr>
 8017644:	b138      	cbz	r0, 8017656 <_vfiprintf_r+0x176>
 8017646:	9b04      	ldr	r3, [sp, #16]
 8017648:	eba0 000a 	sub.w	r0, r0, sl
 801764c:	2240      	movs	r2, #64	@ 0x40
 801764e:	4082      	lsls	r2, r0
 8017650:	4313      	orrs	r3, r2
 8017652:	3401      	adds	r4, #1
 8017654:	9304      	str	r3, [sp, #16]
 8017656:	f814 1b01 	ldrb.w	r1, [r4], #1
 801765a:	4829      	ldr	r0, [pc, #164]	@ (8017700 <_vfiprintf_r+0x220>)
 801765c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017660:	2206      	movs	r2, #6
 8017662:	f7fc fdb5 	bl	80141d0 <memchr>
 8017666:	2800      	cmp	r0, #0
 8017668:	d03f      	beq.n	80176ea <_vfiprintf_r+0x20a>
 801766a:	4b26      	ldr	r3, [pc, #152]	@ (8017704 <_vfiprintf_r+0x224>)
 801766c:	bb1b      	cbnz	r3, 80176b6 <_vfiprintf_r+0x1d6>
 801766e:	9b03      	ldr	r3, [sp, #12]
 8017670:	3307      	adds	r3, #7
 8017672:	f023 0307 	bic.w	r3, r3, #7
 8017676:	3308      	adds	r3, #8
 8017678:	9303      	str	r3, [sp, #12]
 801767a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801767c:	443b      	add	r3, r7
 801767e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017680:	e76a      	b.n	8017558 <_vfiprintf_r+0x78>
 8017682:	fb0c 3202 	mla	r2, ip, r2, r3
 8017686:	460c      	mov	r4, r1
 8017688:	2001      	movs	r0, #1
 801768a:	e7a8      	b.n	80175de <_vfiprintf_r+0xfe>
 801768c:	2300      	movs	r3, #0
 801768e:	3401      	adds	r4, #1
 8017690:	9305      	str	r3, [sp, #20]
 8017692:	4619      	mov	r1, r3
 8017694:	f04f 0c0a 	mov.w	ip, #10
 8017698:	4620      	mov	r0, r4
 801769a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801769e:	3a30      	subs	r2, #48	@ 0x30
 80176a0:	2a09      	cmp	r2, #9
 80176a2:	d903      	bls.n	80176ac <_vfiprintf_r+0x1cc>
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d0c6      	beq.n	8017636 <_vfiprintf_r+0x156>
 80176a8:	9105      	str	r1, [sp, #20]
 80176aa:	e7c4      	b.n	8017636 <_vfiprintf_r+0x156>
 80176ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80176b0:	4604      	mov	r4, r0
 80176b2:	2301      	movs	r3, #1
 80176b4:	e7f0      	b.n	8017698 <_vfiprintf_r+0x1b8>
 80176b6:	ab03      	add	r3, sp, #12
 80176b8:	9300      	str	r3, [sp, #0]
 80176ba:	462a      	mov	r2, r5
 80176bc:	4b12      	ldr	r3, [pc, #72]	@ (8017708 <_vfiprintf_r+0x228>)
 80176be:	a904      	add	r1, sp, #16
 80176c0:	4630      	mov	r0, r6
 80176c2:	f3af 8000 	nop.w
 80176c6:	4607      	mov	r7, r0
 80176c8:	1c78      	adds	r0, r7, #1
 80176ca:	d1d6      	bne.n	801767a <_vfiprintf_r+0x19a>
 80176cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80176ce:	07d9      	lsls	r1, r3, #31
 80176d0:	d405      	bmi.n	80176de <_vfiprintf_r+0x1fe>
 80176d2:	89ab      	ldrh	r3, [r5, #12]
 80176d4:	059a      	lsls	r2, r3, #22
 80176d6:	d402      	bmi.n	80176de <_vfiprintf_r+0x1fe>
 80176d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80176da:	f7ff fddd 	bl	8017298 <__retarget_lock_release_recursive>
 80176de:	89ab      	ldrh	r3, [r5, #12]
 80176e0:	065b      	lsls	r3, r3, #25
 80176e2:	f53f af1f 	bmi.w	8017524 <_vfiprintf_r+0x44>
 80176e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176e8:	e71e      	b.n	8017528 <_vfiprintf_r+0x48>
 80176ea:	ab03      	add	r3, sp, #12
 80176ec:	9300      	str	r3, [sp, #0]
 80176ee:	462a      	mov	r2, r5
 80176f0:	4b05      	ldr	r3, [pc, #20]	@ (8017708 <_vfiprintf_r+0x228>)
 80176f2:	a904      	add	r1, sp, #16
 80176f4:	4630      	mov	r0, r6
 80176f6:	f000 f879 	bl	80177ec <_printf_i>
 80176fa:	e7e4      	b.n	80176c6 <_vfiprintf_r+0x1e6>
 80176fc:	08017e4c 	.word	0x08017e4c
 8017700:	08017e56 	.word	0x08017e56
 8017704:	00000000 	.word	0x00000000
 8017708:	080174bb 	.word	0x080174bb
 801770c:	08017e52 	.word	0x08017e52

08017710 <_printf_common>:
 8017710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017714:	4616      	mov	r6, r2
 8017716:	4698      	mov	r8, r3
 8017718:	688a      	ldr	r2, [r1, #8]
 801771a:	690b      	ldr	r3, [r1, #16]
 801771c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017720:	4293      	cmp	r3, r2
 8017722:	bfb8      	it	lt
 8017724:	4613      	movlt	r3, r2
 8017726:	6033      	str	r3, [r6, #0]
 8017728:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801772c:	4607      	mov	r7, r0
 801772e:	460c      	mov	r4, r1
 8017730:	b10a      	cbz	r2, 8017736 <_printf_common+0x26>
 8017732:	3301      	adds	r3, #1
 8017734:	6033      	str	r3, [r6, #0]
 8017736:	6823      	ldr	r3, [r4, #0]
 8017738:	0699      	lsls	r1, r3, #26
 801773a:	bf42      	ittt	mi
 801773c:	6833      	ldrmi	r3, [r6, #0]
 801773e:	3302      	addmi	r3, #2
 8017740:	6033      	strmi	r3, [r6, #0]
 8017742:	6825      	ldr	r5, [r4, #0]
 8017744:	f015 0506 	ands.w	r5, r5, #6
 8017748:	d106      	bne.n	8017758 <_printf_common+0x48>
 801774a:	f104 0a19 	add.w	sl, r4, #25
 801774e:	68e3      	ldr	r3, [r4, #12]
 8017750:	6832      	ldr	r2, [r6, #0]
 8017752:	1a9b      	subs	r3, r3, r2
 8017754:	42ab      	cmp	r3, r5
 8017756:	dc26      	bgt.n	80177a6 <_printf_common+0x96>
 8017758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801775c:	6822      	ldr	r2, [r4, #0]
 801775e:	3b00      	subs	r3, #0
 8017760:	bf18      	it	ne
 8017762:	2301      	movne	r3, #1
 8017764:	0692      	lsls	r2, r2, #26
 8017766:	d42b      	bmi.n	80177c0 <_printf_common+0xb0>
 8017768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801776c:	4641      	mov	r1, r8
 801776e:	4638      	mov	r0, r7
 8017770:	47c8      	blx	r9
 8017772:	3001      	adds	r0, #1
 8017774:	d01e      	beq.n	80177b4 <_printf_common+0xa4>
 8017776:	6823      	ldr	r3, [r4, #0]
 8017778:	6922      	ldr	r2, [r4, #16]
 801777a:	f003 0306 	and.w	r3, r3, #6
 801777e:	2b04      	cmp	r3, #4
 8017780:	bf02      	ittt	eq
 8017782:	68e5      	ldreq	r5, [r4, #12]
 8017784:	6833      	ldreq	r3, [r6, #0]
 8017786:	1aed      	subeq	r5, r5, r3
 8017788:	68a3      	ldr	r3, [r4, #8]
 801778a:	bf0c      	ite	eq
 801778c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017790:	2500      	movne	r5, #0
 8017792:	4293      	cmp	r3, r2
 8017794:	bfc4      	itt	gt
 8017796:	1a9b      	subgt	r3, r3, r2
 8017798:	18ed      	addgt	r5, r5, r3
 801779a:	2600      	movs	r6, #0
 801779c:	341a      	adds	r4, #26
 801779e:	42b5      	cmp	r5, r6
 80177a0:	d11a      	bne.n	80177d8 <_printf_common+0xc8>
 80177a2:	2000      	movs	r0, #0
 80177a4:	e008      	b.n	80177b8 <_printf_common+0xa8>
 80177a6:	2301      	movs	r3, #1
 80177a8:	4652      	mov	r2, sl
 80177aa:	4641      	mov	r1, r8
 80177ac:	4638      	mov	r0, r7
 80177ae:	47c8      	blx	r9
 80177b0:	3001      	adds	r0, #1
 80177b2:	d103      	bne.n	80177bc <_printf_common+0xac>
 80177b4:	f04f 30ff 	mov.w	r0, #4294967295
 80177b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177bc:	3501      	adds	r5, #1
 80177be:	e7c6      	b.n	801774e <_printf_common+0x3e>
 80177c0:	18e1      	adds	r1, r4, r3
 80177c2:	1c5a      	adds	r2, r3, #1
 80177c4:	2030      	movs	r0, #48	@ 0x30
 80177c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80177ca:	4422      	add	r2, r4
 80177cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80177d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80177d4:	3302      	adds	r3, #2
 80177d6:	e7c7      	b.n	8017768 <_printf_common+0x58>
 80177d8:	2301      	movs	r3, #1
 80177da:	4622      	mov	r2, r4
 80177dc:	4641      	mov	r1, r8
 80177de:	4638      	mov	r0, r7
 80177e0:	47c8      	blx	r9
 80177e2:	3001      	adds	r0, #1
 80177e4:	d0e6      	beq.n	80177b4 <_printf_common+0xa4>
 80177e6:	3601      	adds	r6, #1
 80177e8:	e7d9      	b.n	801779e <_printf_common+0x8e>
	...

080177ec <_printf_i>:
 80177ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80177f0:	7e0f      	ldrb	r7, [r1, #24]
 80177f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80177f4:	2f78      	cmp	r7, #120	@ 0x78
 80177f6:	4691      	mov	r9, r2
 80177f8:	4680      	mov	r8, r0
 80177fa:	460c      	mov	r4, r1
 80177fc:	469a      	mov	sl, r3
 80177fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017802:	d807      	bhi.n	8017814 <_printf_i+0x28>
 8017804:	2f62      	cmp	r7, #98	@ 0x62
 8017806:	d80a      	bhi.n	801781e <_printf_i+0x32>
 8017808:	2f00      	cmp	r7, #0
 801780a:	f000 80d2 	beq.w	80179b2 <_printf_i+0x1c6>
 801780e:	2f58      	cmp	r7, #88	@ 0x58
 8017810:	f000 80b9 	beq.w	8017986 <_printf_i+0x19a>
 8017814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801781c:	e03a      	b.n	8017894 <_printf_i+0xa8>
 801781e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017822:	2b15      	cmp	r3, #21
 8017824:	d8f6      	bhi.n	8017814 <_printf_i+0x28>
 8017826:	a101      	add	r1, pc, #4	@ (adr r1, 801782c <_printf_i+0x40>)
 8017828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801782c:	08017885 	.word	0x08017885
 8017830:	08017899 	.word	0x08017899
 8017834:	08017815 	.word	0x08017815
 8017838:	08017815 	.word	0x08017815
 801783c:	08017815 	.word	0x08017815
 8017840:	08017815 	.word	0x08017815
 8017844:	08017899 	.word	0x08017899
 8017848:	08017815 	.word	0x08017815
 801784c:	08017815 	.word	0x08017815
 8017850:	08017815 	.word	0x08017815
 8017854:	08017815 	.word	0x08017815
 8017858:	08017999 	.word	0x08017999
 801785c:	080178c3 	.word	0x080178c3
 8017860:	08017953 	.word	0x08017953
 8017864:	08017815 	.word	0x08017815
 8017868:	08017815 	.word	0x08017815
 801786c:	080179bb 	.word	0x080179bb
 8017870:	08017815 	.word	0x08017815
 8017874:	080178c3 	.word	0x080178c3
 8017878:	08017815 	.word	0x08017815
 801787c:	08017815 	.word	0x08017815
 8017880:	0801795b 	.word	0x0801795b
 8017884:	6833      	ldr	r3, [r6, #0]
 8017886:	1d1a      	adds	r2, r3, #4
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	6032      	str	r2, [r6, #0]
 801788c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017894:	2301      	movs	r3, #1
 8017896:	e09d      	b.n	80179d4 <_printf_i+0x1e8>
 8017898:	6833      	ldr	r3, [r6, #0]
 801789a:	6820      	ldr	r0, [r4, #0]
 801789c:	1d19      	adds	r1, r3, #4
 801789e:	6031      	str	r1, [r6, #0]
 80178a0:	0606      	lsls	r6, r0, #24
 80178a2:	d501      	bpl.n	80178a8 <_printf_i+0xbc>
 80178a4:	681d      	ldr	r5, [r3, #0]
 80178a6:	e003      	b.n	80178b0 <_printf_i+0xc4>
 80178a8:	0645      	lsls	r5, r0, #25
 80178aa:	d5fb      	bpl.n	80178a4 <_printf_i+0xb8>
 80178ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80178b0:	2d00      	cmp	r5, #0
 80178b2:	da03      	bge.n	80178bc <_printf_i+0xd0>
 80178b4:	232d      	movs	r3, #45	@ 0x2d
 80178b6:	426d      	negs	r5, r5
 80178b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80178bc:	4859      	ldr	r0, [pc, #356]	@ (8017a24 <_printf_i+0x238>)
 80178be:	230a      	movs	r3, #10
 80178c0:	e011      	b.n	80178e6 <_printf_i+0xfa>
 80178c2:	6821      	ldr	r1, [r4, #0]
 80178c4:	6833      	ldr	r3, [r6, #0]
 80178c6:	0608      	lsls	r0, r1, #24
 80178c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80178cc:	d402      	bmi.n	80178d4 <_printf_i+0xe8>
 80178ce:	0649      	lsls	r1, r1, #25
 80178d0:	bf48      	it	mi
 80178d2:	b2ad      	uxthmi	r5, r5
 80178d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80178d6:	4853      	ldr	r0, [pc, #332]	@ (8017a24 <_printf_i+0x238>)
 80178d8:	6033      	str	r3, [r6, #0]
 80178da:	bf14      	ite	ne
 80178dc:	230a      	movne	r3, #10
 80178de:	2308      	moveq	r3, #8
 80178e0:	2100      	movs	r1, #0
 80178e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80178e6:	6866      	ldr	r6, [r4, #4]
 80178e8:	60a6      	str	r6, [r4, #8]
 80178ea:	2e00      	cmp	r6, #0
 80178ec:	bfa2      	ittt	ge
 80178ee:	6821      	ldrge	r1, [r4, #0]
 80178f0:	f021 0104 	bicge.w	r1, r1, #4
 80178f4:	6021      	strge	r1, [r4, #0]
 80178f6:	b90d      	cbnz	r5, 80178fc <_printf_i+0x110>
 80178f8:	2e00      	cmp	r6, #0
 80178fa:	d04b      	beq.n	8017994 <_printf_i+0x1a8>
 80178fc:	4616      	mov	r6, r2
 80178fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8017902:	fb03 5711 	mls	r7, r3, r1, r5
 8017906:	5dc7      	ldrb	r7, [r0, r7]
 8017908:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801790c:	462f      	mov	r7, r5
 801790e:	42bb      	cmp	r3, r7
 8017910:	460d      	mov	r5, r1
 8017912:	d9f4      	bls.n	80178fe <_printf_i+0x112>
 8017914:	2b08      	cmp	r3, #8
 8017916:	d10b      	bne.n	8017930 <_printf_i+0x144>
 8017918:	6823      	ldr	r3, [r4, #0]
 801791a:	07df      	lsls	r7, r3, #31
 801791c:	d508      	bpl.n	8017930 <_printf_i+0x144>
 801791e:	6923      	ldr	r3, [r4, #16]
 8017920:	6861      	ldr	r1, [r4, #4]
 8017922:	4299      	cmp	r1, r3
 8017924:	bfde      	ittt	le
 8017926:	2330      	movle	r3, #48	@ 0x30
 8017928:	f806 3c01 	strble.w	r3, [r6, #-1]
 801792c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017930:	1b92      	subs	r2, r2, r6
 8017932:	6122      	str	r2, [r4, #16]
 8017934:	f8cd a000 	str.w	sl, [sp]
 8017938:	464b      	mov	r3, r9
 801793a:	aa03      	add	r2, sp, #12
 801793c:	4621      	mov	r1, r4
 801793e:	4640      	mov	r0, r8
 8017940:	f7ff fee6 	bl	8017710 <_printf_common>
 8017944:	3001      	adds	r0, #1
 8017946:	d14a      	bne.n	80179de <_printf_i+0x1f2>
 8017948:	f04f 30ff 	mov.w	r0, #4294967295
 801794c:	b004      	add	sp, #16
 801794e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017952:	6823      	ldr	r3, [r4, #0]
 8017954:	f043 0320 	orr.w	r3, r3, #32
 8017958:	6023      	str	r3, [r4, #0]
 801795a:	4833      	ldr	r0, [pc, #204]	@ (8017a28 <_printf_i+0x23c>)
 801795c:	2778      	movs	r7, #120	@ 0x78
 801795e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017962:	6823      	ldr	r3, [r4, #0]
 8017964:	6831      	ldr	r1, [r6, #0]
 8017966:	061f      	lsls	r7, r3, #24
 8017968:	f851 5b04 	ldr.w	r5, [r1], #4
 801796c:	d402      	bmi.n	8017974 <_printf_i+0x188>
 801796e:	065f      	lsls	r7, r3, #25
 8017970:	bf48      	it	mi
 8017972:	b2ad      	uxthmi	r5, r5
 8017974:	6031      	str	r1, [r6, #0]
 8017976:	07d9      	lsls	r1, r3, #31
 8017978:	bf44      	itt	mi
 801797a:	f043 0320 	orrmi.w	r3, r3, #32
 801797e:	6023      	strmi	r3, [r4, #0]
 8017980:	b11d      	cbz	r5, 801798a <_printf_i+0x19e>
 8017982:	2310      	movs	r3, #16
 8017984:	e7ac      	b.n	80178e0 <_printf_i+0xf4>
 8017986:	4827      	ldr	r0, [pc, #156]	@ (8017a24 <_printf_i+0x238>)
 8017988:	e7e9      	b.n	801795e <_printf_i+0x172>
 801798a:	6823      	ldr	r3, [r4, #0]
 801798c:	f023 0320 	bic.w	r3, r3, #32
 8017990:	6023      	str	r3, [r4, #0]
 8017992:	e7f6      	b.n	8017982 <_printf_i+0x196>
 8017994:	4616      	mov	r6, r2
 8017996:	e7bd      	b.n	8017914 <_printf_i+0x128>
 8017998:	6833      	ldr	r3, [r6, #0]
 801799a:	6825      	ldr	r5, [r4, #0]
 801799c:	6961      	ldr	r1, [r4, #20]
 801799e:	1d18      	adds	r0, r3, #4
 80179a0:	6030      	str	r0, [r6, #0]
 80179a2:	062e      	lsls	r6, r5, #24
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	d501      	bpl.n	80179ac <_printf_i+0x1c0>
 80179a8:	6019      	str	r1, [r3, #0]
 80179aa:	e002      	b.n	80179b2 <_printf_i+0x1c6>
 80179ac:	0668      	lsls	r0, r5, #25
 80179ae:	d5fb      	bpl.n	80179a8 <_printf_i+0x1bc>
 80179b0:	8019      	strh	r1, [r3, #0]
 80179b2:	2300      	movs	r3, #0
 80179b4:	6123      	str	r3, [r4, #16]
 80179b6:	4616      	mov	r6, r2
 80179b8:	e7bc      	b.n	8017934 <_printf_i+0x148>
 80179ba:	6833      	ldr	r3, [r6, #0]
 80179bc:	1d1a      	adds	r2, r3, #4
 80179be:	6032      	str	r2, [r6, #0]
 80179c0:	681e      	ldr	r6, [r3, #0]
 80179c2:	6862      	ldr	r2, [r4, #4]
 80179c4:	2100      	movs	r1, #0
 80179c6:	4630      	mov	r0, r6
 80179c8:	f7fc fc02 	bl	80141d0 <memchr>
 80179cc:	b108      	cbz	r0, 80179d2 <_printf_i+0x1e6>
 80179ce:	1b80      	subs	r0, r0, r6
 80179d0:	6060      	str	r0, [r4, #4]
 80179d2:	6863      	ldr	r3, [r4, #4]
 80179d4:	6123      	str	r3, [r4, #16]
 80179d6:	2300      	movs	r3, #0
 80179d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80179dc:	e7aa      	b.n	8017934 <_printf_i+0x148>
 80179de:	6923      	ldr	r3, [r4, #16]
 80179e0:	4632      	mov	r2, r6
 80179e2:	4649      	mov	r1, r9
 80179e4:	4640      	mov	r0, r8
 80179e6:	47d0      	blx	sl
 80179e8:	3001      	adds	r0, #1
 80179ea:	d0ad      	beq.n	8017948 <_printf_i+0x15c>
 80179ec:	6823      	ldr	r3, [r4, #0]
 80179ee:	079b      	lsls	r3, r3, #30
 80179f0:	d413      	bmi.n	8017a1a <_printf_i+0x22e>
 80179f2:	68e0      	ldr	r0, [r4, #12]
 80179f4:	9b03      	ldr	r3, [sp, #12]
 80179f6:	4298      	cmp	r0, r3
 80179f8:	bfb8      	it	lt
 80179fa:	4618      	movlt	r0, r3
 80179fc:	e7a6      	b.n	801794c <_printf_i+0x160>
 80179fe:	2301      	movs	r3, #1
 8017a00:	4632      	mov	r2, r6
 8017a02:	4649      	mov	r1, r9
 8017a04:	4640      	mov	r0, r8
 8017a06:	47d0      	blx	sl
 8017a08:	3001      	adds	r0, #1
 8017a0a:	d09d      	beq.n	8017948 <_printf_i+0x15c>
 8017a0c:	3501      	adds	r5, #1
 8017a0e:	68e3      	ldr	r3, [r4, #12]
 8017a10:	9903      	ldr	r1, [sp, #12]
 8017a12:	1a5b      	subs	r3, r3, r1
 8017a14:	42ab      	cmp	r3, r5
 8017a16:	dcf2      	bgt.n	80179fe <_printf_i+0x212>
 8017a18:	e7eb      	b.n	80179f2 <_printf_i+0x206>
 8017a1a:	2500      	movs	r5, #0
 8017a1c:	f104 0619 	add.w	r6, r4, #25
 8017a20:	e7f5      	b.n	8017a0e <_printf_i+0x222>
 8017a22:	bf00      	nop
 8017a24:	08017e5d 	.word	0x08017e5d
 8017a28:	08017e6e 	.word	0x08017e6e

08017a2c <__sflush_r>:
 8017a2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a34:	0716      	lsls	r6, r2, #28
 8017a36:	4605      	mov	r5, r0
 8017a38:	460c      	mov	r4, r1
 8017a3a:	d454      	bmi.n	8017ae6 <__sflush_r+0xba>
 8017a3c:	684b      	ldr	r3, [r1, #4]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	dc02      	bgt.n	8017a48 <__sflush_r+0x1c>
 8017a42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	dd48      	ble.n	8017ada <__sflush_r+0xae>
 8017a48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a4a:	2e00      	cmp	r6, #0
 8017a4c:	d045      	beq.n	8017ada <__sflush_r+0xae>
 8017a4e:	2300      	movs	r3, #0
 8017a50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017a54:	682f      	ldr	r7, [r5, #0]
 8017a56:	6a21      	ldr	r1, [r4, #32]
 8017a58:	602b      	str	r3, [r5, #0]
 8017a5a:	d030      	beq.n	8017abe <__sflush_r+0x92>
 8017a5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017a5e:	89a3      	ldrh	r3, [r4, #12]
 8017a60:	0759      	lsls	r1, r3, #29
 8017a62:	d505      	bpl.n	8017a70 <__sflush_r+0x44>
 8017a64:	6863      	ldr	r3, [r4, #4]
 8017a66:	1ad2      	subs	r2, r2, r3
 8017a68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017a6a:	b10b      	cbz	r3, 8017a70 <__sflush_r+0x44>
 8017a6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017a6e:	1ad2      	subs	r2, r2, r3
 8017a70:	2300      	movs	r3, #0
 8017a72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a74:	6a21      	ldr	r1, [r4, #32]
 8017a76:	4628      	mov	r0, r5
 8017a78:	47b0      	blx	r6
 8017a7a:	1c43      	adds	r3, r0, #1
 8017a7c:	89a3      	ldrh	r3, [r4, #12]
 8017a7e:	d106      	bne.n	8017a8e <__sflush_r+0x62>
 8017a80:	6829      	ldr	r1, [r5, #0]
 8017a82:	291d      	cmp	r1, #29
 8017a84:	d82b      	bhi.n	8017ade <__sflush_r+0xb2>
 8017a86:	4a2a      	ldr	r2, [pc, #168]	@ (8017b30 <__sflush_r+0x104>)
 8017a88:	410a      	asrs	r2, r1
 8017a8a:	07d6      	lsls	r6, r2, #31
 8017a8c:	d427      	bmi.n	8017ade <__sflush_r+0xb2>
 8017a8e:	2200      	movs	r2, #0
 8017a90:	6062      	str	r2, [r4, #4]
 8017a92:	04d9      	lsls	r1, r3, #19
 8017a94:	6922      	ldr	r2, [r4, #16]
 8017a96:	6022      	str	r2, [r4, #0]
 8017a98:	d504      	bpl.n	8017aa4 <__sflush_r+0x78>
 8017a9a:	1c42      	adds	r2, r0, #1
 8017a9c:	d101      	bne.n	8017aa2 <__sflush_r+0x76>
 8017a9e:	682b      	ldr	r3, [r5, #0]
 8017aa0:	b903      	cbnz	r3, 8017aa4 <__sflush_r+0x78>
 8017aa2:	6560      	str	r0, [r4, #84]	@ 0x54
 8017aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017aa6:	602f      	str	r7, [r5, #0]
 8017aa8:	b1b9      	cbz	r1, 8017ada <__sflush_r+0xae>
 8017aaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017aae:	4299      	cmp	r1, r3
 8017ab0:	d002      	beq.n	8017ab8 <__sflush_r+0x8c>
 8017ab2:	4628      	mov	r0, r5
 8017ab4:	f7ff fbf2 	bl	801729c <_free_r>
 8017ab8:	2300      	movs	r3, #0
 8017aba:	6363      	str	r3, [r4, #52]	@ 0x34
 8017abc:	e00d      	b.n	8017ada <__sflush_r+0xae>
 8017abe:	2301      	movs	r3, #1
 8017ac0:	4628      	mov	r0, r5
 8017ac2:	47b0      	blx	r6
 8017ac4:	4602      	mov	r2, r0
 8017ac6:	1c50      	adds	r0, r2, #1
 8017ac8:	d1c9      	bne.n	8017a5e <__sflush_r+0x32>
 8017aca:	682b      	ldr	r3, [r5, #0]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d0c6      	beq.n	8017a5e <__sflush_r+0x32>
 8017ad0:	2b1d      	cmp	r3, #29
 8017ad2:	d001      	beq.n	8017ad8 <__sflush_r+0xac>
 8017ad4:	2b16      	cmp	r3, #22
 8017ad6:	d11e      	bne.n	8017b16 <__sflush_r+0xea>
 8017ad8:	602f      	str	r7, [r5, #0]
 8017ada:	2000      	movs	r0, #0
 8017adc:	e022      	b.n	8017b24 <__sflush_r+0xf8>
 8017ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ae2:	b21b      	sxth	r3, r3
 8017ae4:	e01b      	b.n	8017b1e <__sflush_r+0xf2>
 8017ae6:	690f      	ldr	r7, [r1, #16]
 8017ae8:	2f00      	cmp	r7, #0
 8017aea:	d0f6      	beq.n	8017ada <__sflush_r+0xae>
 8017aec:	0793      	lsls	r3, r2, #30
 8017aee:	680e      	ldr	r6, [r1, #0]
 8017af0:	bf08      	it	eq
 8017af2:	694b      	ldreq	r3, [r1, #20]
 8017af4:	600f      	str	r7, [r1, #0]
 8017af6:	bf18      	it	ne
 8017af8:	2300      	movne	r3, #0
 8017afa:	eba6 0807 	sub.w	r8, r6, r7
 8017afe:	608b      	str	r3, [r1, #8]
 8017b00:	f1b8 0f00 	cmp.w	r8, #0
 8017b04:	dde9      	ble.n	8017ada <__sflush_r+0xae>
 8017b06:	6a21      	ldr	r1, [r4, #32]
 8017b08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017b0a:	4643      	mov	r3, r8
 8017b0c:	463a      	mov	r2, r7
 8017b0e:	4628      	mov	r0, r5
 8017b10:	47b0      	blx	r6
 8017b12:	2800      	cmp	r0, #0
 8017b14:	dc08      	bgt.n	8017b28 <__sflush_r+0xfc>
 8017b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b1e:	81a3      	strh	r3, [r4, #12]
 8017b20:	f04f 30ff 	mov.w	r0, #4294967295
 8017b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b28:	4407      	add	r7, r0
 8017b2a:	eba8 0800 	sub.w	r8, r8, r0
 8017b2e:	e7e7      	b.n	8017b00 <__sflush_r+0xd4>
 8017b30:	dfbffffe 	.word	0xdfbffffe

08017b34 <_fflush_r>:
 8017b34:	b538      	push	{r3, r4, r5, lr}
 8017b36:	690b      	ldr	r3, [r1, #16]
 8017b38:	4605      	mov	r5, r0
 8017b3a:	460c      	mov	r4, r1
 8017b3c:	b913      	cbnz	r3, 8017b44 <_fflush_r+0x10>
 8017b3e:	2500      	movs	r5, #0
 8017b40:	4628      	mov	r0, r5
 8017b42:	bd38      	pop	{r3, r4, r5, pc}
 8017b44:	b118      	cbz	r0, 8017b4e <_fflush_r+0x1a>
 8017b46:	6a03      	ldr	r3, [r0, #32]
 8017b48:	b90b      	cbnz	r3, 8017b4e <_fflush_r+0x1a>
 8017b4a:	f7ff fa9f 	bl	801708c <__sinit>
 8017b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d0f3      	beq.n	8017b3e <_fflush_r+0xa>
 8017b56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017b58:	07d0      	lsls	r0, r2, #31
 8017b5a:	d404      	bmi.n	8017b66 <_fflush_r+0x32>
 8017b5c:	0599      	lsls	r1, r3, #22
 8017b5e:	d402      	bmi.n	8017b66 <_fflush_r+0x32>
 8017b60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b62:	f7ff fb98 	bl	8017296 <__retarget_lock_acquire_recursive>
 8017b66:	4628      	mov	r0, r5
 8017b68:	4621      	mov	r1, r4
 8017b6a:	f7ff ff5f 	bl	8017a2c <__sflush_r>
 8017b6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017b70:	07da      	lsls	r2, r3, #31
 8017b72:	4605      	mov	r5, r0
 8017b74:	d4e4      	bmi.n	8017b40 <_fflush_r+0xc>
 8017b76:	89a3      	ldrh	r3, [r4, #12]
 8017b78:	059b      	lsls	r3, r3, #22
 8017b7a:	d4e1      	bmi.n	8017b40 <_fflush_r+0xc>
 8017b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b7e:	f7ff fb8b 	bl	8017298 <__retarget_lock_release_recursive>
 8017b82:	e7dd      	b.n	8017b40 <_fflush_r+0xc>

08017b84 <__swbuf_r>:
 8017b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b86:	460e      	mov	r6, r1
 8017b88:	4614      	mov	r4, r2
 8017b8a:	4605      	mov	r5, r0
 8017b8c:	b118      	cbz	r0, 8017b96 <__swbuf_r+0x12>
 8017b8e:	6a03      	ldr	r3, [r0, #32]
 8017b90:	b90b      	cbnz	r3, 8017b96 <__swbuf_r+0x12>
 8017b92:	f7ff fa7b 	bl	801708c <__sinit>
 8017b96:	69a3      	ldr	r3, [r4, #24]
 8017b98:	60a3      	str	r3, [r4, #8]
 8017b9a:	89a3      	ldrh	r3, [r4, #12]
 8017b9c:	071a      	lsls	r2, r3, #28
 8017b9e:	d501      	bpl.n	8017ba4 <__swbuf_r+0x20>
 8017ba0:	6923      	ldr	r3, [r4, #16]
 8017ba2:	b943      	cbnz	r3, 8017bb6 <__swbuf_r+0x32>
 8017ba4:	4621      	mov	r1, r4
 8017ba6:	4628      	mov	r0, r5
 8017ba8:	f000 f82a 	bl	8017c00 <__swsetup_r>
 8017bac:	b118      	cbz	r0, 8017bb6 <__swbuf_r+0x32>
 8017bae:	f04f 37ff 	mov.w	r7, #4294967295
 8017bb2:	4638      	mov	r0, r7
 8017bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bb6:	6823      	ldr	r3, [r4, #0]
 8017bb8:	6922      	ldr	r2, [r4, #16]
 8017bba:	1a98      	subs	r0, r3, r2
 8017bbc:	6963      	ldr	r3, [r4, #20]
 8017bbe:	b2f6      	uxtb	r6, r6
 8017bc0:	4283      	cmp	r3, r0
 8017bc2:	4637      	mov	r7, r6
 8017bc4:	dc05      	bgt.n	8017bd2 <__swbuf_r+0x4e>
 8017bc6:	4621      	mov	r1, r4
 8017bc8:	4628      	mov	r0, r5
 8017bca:	f7ff ffb3 	bl	8017b34 <_fflush_r>
 8017bce:	2800      	cmp	r0, #0
 8017bd0:	d1ed      	bne.n	8017bae <__swbuf_r+0x2a>
 8017bd2:	68a3      	ldr	r3, [r4, #8]
 8017bd4:	3b01      	subs	r3, #1
 8017bd6:	60a3      	str	r3, [r4, #8]
 8017bd8:	6823      	ldr	r3, [r4, #0]
 8017bda:	1c5a      	adds	r2, r3, #1
 8017bdc:	6022      	str	r2, [r4, #0]
 8017bde:	701e      	strb	r6, [r3, #0]
 8017be0:	6962      	ldr	r2, [r4, #20]
 8017be2:	1c43      	adds	r3, r0, #1
 8017be4:	429a      	cmp	r2, r3
 8017be6:	d004      	beq.n	8017bf2 <__swbuf_r+0x6e>
 8017be8:	89a3      	ldrh	r3, [r4, #12]
 8017bea:	07db      	lsls	r3, r3, #31
 8017bec:	d5e1      	bpl.n	8017bb2 <__swbuf_r+0x2e>
 8017bee:	2e0a      	cmp	r6, #10
 8017bf0:	d1df      	bne.n	8017bb2 <__swbuf_r+0x2e>
 8017bf2:	4621      	mov	r1, r4
 8017bf4:	4628      	mov	r0, r5
 8017bf6:	f7ff ff9d 	bl	8017b34 <_fflush_r>
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	d0d9      	beq.n	8017bb2 <__swbuf_r+0x2e>
 8017bfe:	e7d6      	b.n	8017bae <__swbuf_r+0x2a>

08017c00 <__swsetup_r>:
 8017c00:	b538      	push	{r3, r4, r5, lr}
 8017c02:	4b29      	ldr	r3, [pc, #164]	@ (8017ca8 <__swsetup_r+0xa8>)
 8017c04:	4605      	mov	r5, r0
 8017c06:	6818      	ldr	r0, [r3, #0]
 8017c08:	460c      	mov	r4, r1
 8017c0a:	b118      	cbz	r0, 8017c14 <__swsetup_r+0x14>
 8017c0c:	6a03      	ldr	r3, [r0, #32]
 8017c0e:	b90b      	cbnz	r3, 8017c14 <__swsetup_r+0x14>
 8017c10:	f7ff fa3c 	bl	801708c <__sinit>
 8017c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c18:	0719      	lsls	r1, r3, #28
 8017c1a:	d422      	bmi.n	8017c62 <__swsetup_r+0x62>
 8017c1c:	06da      	lsls	r2, r3, #27
 8017c1e:	d407      	bmi.n	8017c30 <__swsetup_r+0x30>
 8017c20:	2209      	movs	r2, #9
 8017c22:	602a      	str	r2, [r5, #0]
 8017c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c28:	81a3      	strh	r3, [r4, #12]
 8017c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8017c2e:	e033      	b.n	8017c98 <__swsetup_r+0x98>
 8017c30:	0758      	lsls	r0, r3, #29
 8017c32:	d512      	bpl.n	8017c5a <__swsetup_r+0x5a>
 8017c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c36:	b141      	cbz	r1, 8017c4a <__swsetup_r+0x4a>
 8017c38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017c3c:	4299      	cmp	r1, r3
 8017c3e:	d002      	beq.n	8017c46 <__swsetup_r+0x46>
 8017c40:	4628      	mov	r0, r5
 8017c42:	f7ff fb2b 	bl	801729c <_free_r>
 8017c46:	2300      	movs	r3, #0
 8017c48:	6363      	str	r3, [r4, #52]	@ 0x34
 8017c4a:	89a3      	ldrh	r3, [r4, #12]
 8017c4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017c50:	81a3      	strh	r3, [r4, #12]
 8017c52:	2300      	movs	r3, #0
 8017c54:	6063      	str	r3, [r4, #4]
 8017c56:	6923      	ldr	r3, [r4, #16]
 8017c58:	6023      	str	r3, [r4, #0]
 8017c5a:	89a3      	ldrh	r3, [r4, #12]
 8017c5c:	f043 0308 	orr.w	r3, r3, #8
 8017c60:	81a3      	strh	r3, [r4, #12]
 8017c62:	6923      	ldr	r3, [r4, #16]
 8017c64:	b94b      	cbnz	r3, 8017c7a <__swsetup_r+0x7a>
 8017c66:	89a3      	ldrh	r3, [r4, #12]
 8017c68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017c70:	d003      	beq.n	8017c7a <__swsetup_r+0x7a>
 8017c72:	4621      	mov	r1, r4
 8017c74:	4628      	mov	r0, r5
 8017c76:	f000 f84f 	bl	8017d18 <__smakebuf_r>
 8017c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c7e:	f013 0201 	ands.w	r2, r3, #1
 8017c82:	d00a      	beq.n	8017c9a <__swsetup_r+0x9a>
 8017c84:	2200      	movs	r2, #0
 8017c86:	60a2      	str	r2, [r4, #8]
 8017c88:	6962      	ldr	r2, [r4, #20]
 8017c8a:	4252      	negs	r2, r2
 8017c8c:	61a2      	str	r2, [r4, #24]
 8017c8e:	6922      	ldr	r2, [r4, #16]
 8017c90:	b942      	cbnz	r2, 8017ca4 <__swsetup_r+0xa4>
 8017c92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017c96:	d1c5      	bne.n	8017c24 <__swsetup_r+0x24>
 8017c98:	bd38      	pop	{r3, r4, r5, pc}
 8017c9a:	0799      	lsls	r1, r3, #30
 8017c9c:	bf58      	it	pl
 8017c9e:	6962      	ldrpl	r2, [r4, #20]
 8017ca0:	60a2      	str	r2, [r4, #8]
 8017ca2:	e7f4      	b.n	8017c8e <__swsetup_r+0x8e>
 8017ca4:	2000      	movs	r0, #0
 8017ca6:	e7f7      	b.n	8017c98 <__swsetup_r+0x98>
 8017ca8:	20000018 	.word	0x20000018

08017cac <_sbrk_r>:
 8017cac:	b538      	push	{r3, r4, r5, lr}
 8017cae:	4d06      	ldr	r5, [pc, #24]	@ (8017cc8 <_sbrk_r+0x1c>)
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	4604      	mov	r4, r0
 8017cb4:	4608      	mov	r0, r1
 8017cb6:	602b      	str	r3, [r5, #0]
 8017cb8:	f7fc fd0e 	bl	80146d8 <_sbrk>
 8017cbc:	1c43      	adds	r3, r0, #1
 8017cbe:	d102      	bne.n	8017cc6 <_sbrk_r+0x1a>
 8017cc0:	682b      	ldr	r3, [r5, #0]
 8017cc2:	b103      	cbz	r3, 8017cc6 <_sbrk_r+0x1a>
 8017cc4:	6023      	str	r3, [r4, #0]
 8017cc6:	bd38      	pop	{r3, r4, r5, pc}
 8017cc8:	20000250 	.word	0x20000250

08017ccc <__swhatbuf_r>:
 8017ccc:	b570      	push	{r4, r5, r6, lr}
 8017cce:	460c      	mov	r4, r1
 8017cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cd4:	2900      	cmp	r1, #0
 8017cd6:	b096      	sub	sp, #88	@ 0x58
 8017cd8:	4615      	mov	r5, r2
 8017cda:	461e      	mov	r6, r3
 8017cdc:	da0d      	bge.n	8017cfa <__swhatbuf_r+0x2e>
 8017cde:	89a3      	ldrh	r3, [r4, #12]
 8017ce0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017ce4:	f04f 0100 	mov.w	r1, #0
 8017ce8:	bf14      	ite	ne
 8017cea:	2340      	movne	r3, #64	@ 0x40
 8017cec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017cf0:	2000      	movs	r0, #0
 8017cf2:	6031      	str	r1, [r6, #0]
 8017cf4:	602b      	str	r3, [r5, #0]
 8017cf6:	b016      	add	sp, #88	@ 0x58
 8017cf8:	bd70      	pop	{r4, r5, r6, pc}
 8017cfa:	466a      	mov	r2, sp
 8017cfc:	f000 f848 	bl	8017d90 <_fstat_r>
 8017d00:	2800      	cmp	r0, #0
 8017d02:	dbec      	blt.n	8017cde <__swhatbuf_r+0x12>
 8017d04:	9901      	ldr	r1, [sp, #4]
 8017d06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017d0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017d0e:	4259      	negs	r1, r3
 8017d10:	4159      	adcs	r1, r3
 8017d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017d16:	e7eb      	b.n	8017cf0 <__swhatbuf_r+0x24>

08017d18 <__smakebuf_r>:
 8017d18:	898b      	ldrh	r3, [r1, #12]
 8017d1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d1c:	079d      	lsls	r5, r3, #30
 8017d1e:	4606      	mov	r6, r0
 8017d20:	460c      	mov	r4, r1
 8017d22:	d507      	bpl.n	8017d34 <__smakebuf_r+0x1c>
 8017d24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017d28:	6023      	str	r3, [r4, #0]
 8017d2a:	6123      	str	r3, [r4, #16]
 8017d2c:	2301      	movs	r3, #1
 8017d2e:	6163      	str	r3, [r4, #20]
 8017d30:	b003      	add	sp, #12
 8017d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d34:	ab01      	add	r3, sp, #4
 8017d36:	466a      	mov	r2, sp
 8017d38:	f7ff ffc8 	bl	8017ccc <__swhatbuf_r>
 8017d3c:	9f00      	ldr	r7, [sp, #0]
 8017d3e:	4605      	mov	r5, r0
 8017d40:	4639      	mov	r1, r7
 8017d42:	4630      	mov	r0, r6
 8017d44:	f7ff fb16 	bl	8017374 <_malloc_r>
 8017d48:	b948      	cbnz	r0, 8017d5e <__smakebuf_r+0x46>
 8017d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d4e:	059a      	lsls	r2, r3, #22
 8017d50:	d4ee      	bmi.n	8017d30 <__smakebuf_r+0x18>
 8017d52:	f023 0303 	bic.w	r3, r3, #3
 8017d56:	f043 0302 	orr.w	r3, r3, #2
 8017d5a:	81a3      	strh	r3, [r4, #12]
 8017d5c:	e7e2      	b.n	8017d24 <__smakebuf_r+0xc>
 8017d5e:	89a3      	ldrh	r3, [r4, #12]
 8017d60:	6020      	str	r0, [r4, #0]
 8017d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d66:	81a3      	strh	r3, [r4, #12]
 8017d68:	9b01      	ldr	r3, [sp, #4]
 8017d6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017d6e:	b15b      	cbz	r3, 8017d88 <__smakebuf_r+0x70>
 8017d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d74:	4630      	mov	r0, r6
 8017d76:	f000 f81d 	bl	8017db4 <_isatty_r>
 8017d7a:	b128      	cbz	r0, 8017d88 <__smakebuf_r+0x70>
 8017d7c:	89a3      	ldrh	r3, [r4, #12]
 8017d7e:	f023 0303 	bic.w	r3, r3, #3
 8017d82:	f043 0301 	orr.w	r3, r3, #1
 8017d86:	81a3      	strh	r3, [r4, #12]
 8017d88:	89a3      	ldrh	r3, [r4, #12]
 8017d8a:	431d      	orrs	r5, r3
 8017d8c:	81a5      	strh	r5, [r4, #12]
 8017d8e:	e7cf      	b.n	8017d30 <__smakebuf_r+0x18>

08017d90 <_fstat_r>:
 8017d90:	b538      	push	{r3, r4, r5, lr}
 8017d92:	4d07      	ldr	r5, [pc, #28]	@ (8017db0 <_fstat_r+0x20>)
 8017d94:	2300      	movs	r3, #0
 8017d96:	4604      	mov	r4, r0
 8017d98:	4608      	mov	r0, r1
 8017d9a:	4611      	mov	r1, r2
 8017d9c:	602b      	str	r3, [r5, #0]
 8017d9e:	f7fc fc73 	bl	8014688 <_fstat>
 8017da2:	1c43      	adds	r3, r0, #1
 8017da4:	d102      	bne.n	8017dac <_fstat_r+0x1c>
 8017da6:	682b      	ldr	r3, [r5, #0]
 8017da8:	b103      	cbz	r3, 8017dac <_fstat_r+0x1c>
 8017daa:	6023      	str	r3, [r4, #0]
 8017dac:	bd38      	pop	{r3, r4, r5, pc}
 8017dae:	bf00      	nop
 8017db0:	20000250 	.word	0x20000250

08017db4 <_isatty_r>:
 8017db4:	b538      	push	{r3, r4, r5, lr}
 8017db6:	4d06      	ldr	r5, [pc, #24]	@ (8017dd0 <_isatty_r+0x1c>)
 8017db8:	2300      	movs	r3, #0
 8017dba:	4604      	mov	r4, r0
 8017dbc:	4608      	mov	r0, r1
 8017dbe:	602b      	str	r3, [r5, #0]
 8017dc0:	f7fc fc72 	bl	80146a8 <_isatty>
 8017dc4:	1c43      	adds	r3, r0, #1
 8017dc6:	d102      	bne.n	8017dce <_isatty_r+0x1a>
 8017dc8:	682b      	ldr	r3, [r5, #0]
 8017dca:	b103      	cbz	r3, 8017dce <_isatty_r+0x1a>
 8017dcc:	6023      	str	r3, [r4, #0]
 8017dce:	bd38      	pop	{r3, r4, r5, pc}
 8017dd0:	20000250 	.word	0x20000250

08017dd4 <_init>:
 8017dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dd6:	bf00      	nop
 8017dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017dda:	bc08      	pop	{r3}
 8017ddc:	469e      	mov	lr, r3
 8017dde:	4770      	bx	lr

08017de0 <_fini>:
 8017de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017de2:	bf00      	nop
 8017de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017de6:	bc08      	pop	{r3}
 8017de8:	469e      	mov	lr, r3
 8017dea:	4770      	bx	lr
