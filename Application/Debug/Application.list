
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b54  08040200  08040200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08043d54  08043d54  00004d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08043dbc  08043dbc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08043dbc  08043dbc  00004dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08043dc4  08043dc4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08043dc4  08043dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08043dc8  08043dc8  00004dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08043dcc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08043e34  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08043e34  00005260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096e0  00000000  00000000  00005096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001767  00000000  00000000  0000e776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0000fee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005bd  00000000  00000000  00010670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276bc  00000000  00000000  00010c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2f6  00000000  00000000  000382e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a55  00000000  00000000  000425df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135034  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000252c  00000000  00000000  00135078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001375a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040200 <__do_global_dtors_aux>:
 8040200:	b510      	push	{r4, lr}
 8040202:	4c05      	ldr	r4, [pc, #20]	@ (8040218 <__do_global_dtors_aux+0x18>)
 8040204:	7823      	ldrb	r3, [r4, #0]
 8040206:	b933      	cbnz	r3, 8040216 <__do_global_dtors_aux+0x16>
 8040208:	4b04      	ldr	r3, [pc, #16]	@ (804021c <__do_global_dtors_aux+0x1c>)
 804020a:	b113      	cbz	r3, 8040212 <__do_global_dtors_aux+0x12>
 804020c:	4804      	ldr	r0, [pc, #16]	@ (8040220 <__do_global_dtors_aux+0x20>)
 804020e:	f3af 8000 	nop.w
 8040212:	2301      	movs	r3, #1
 8040214:	7023      	strb	r3, [r4, #0]
 8040216:	bd10      	pop	{r4, pc}
 8040218:	20000068 	.word	0x20000068
 804021c:	00000000 	.word	0x00000000
 8040220:	08043d3c 	.word	0x08043d3c

08040224 <frame_dummy>:
 8040224:	b508      	push	{r3, lr}
 8040226:	4b03      	ldr	r3, [pc, #12]	@ (8040234 <frame_dummy+0x10>)
 8040228:	b11b      	cbz	r3, 8040232 <frame_dummy+0xe>
 804022a:	4903      	ldr	r1, [pc, #12]	@ (8040238 <frame_dummy+0x14>)
 804022c:	4803      	ldr	r0, [pc, #12]	@ (804023c <frame_dummy+0x18>)
 804022e:	f3af 8000 	nop.w
 8040232:	bd08      	pop	{r3, pc}
 8040234:	00000000 	.word	0x00000000
 8040238:	2000006c 	.word	0x2000006c
 804023c:	08043d3c 	.word	0x08043d3c

08040240 <memchr>:
 8040240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8040244:	2a10      	cmp	r2, #16
 8040246:	db2b      	blt.n	80402a0 <memchr+0x60>
 8040248:	f010 0f07 	tst.w	r0, #7
 804024c:	d008      	beq.n	8040260 <memchr+0x20>
 804024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040252:	3a01      	subs	r2, #1
 8040254:	428b      	cmp	r3, r1
 8040256:	d02d      	beq.n	80402b4 <memchr+0x74>
 8040258:	f010 0f07 	tst.w	r0, #7
 804025c:	b342      	cbz	r2, 80402b0 <memchr+0x70>
 804025e:	d1f6      	bne.n	804024e <memchr+0xe>
 8040260:	b4f0      	push	{r4, r5, r6, r7}
 8040262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804026a:	f022 0407 	bic.w	r4, r2, #7
 804026e:	f07f 0700 	mvns.w	r7, #0
 8040272:	2300      	movs	r3, #0
 8040274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040278:	3c08      	subs	r4, #8
 804027a:	ea85 0501 	eor.w	r5, r5, r1
 804027e:	ea86 0601 	eor.w	r6, r6, r1
 8040282:	fa85 f547 	uadd8	r5, r5, r7
 8040286:	faa3 f587 	sel	r5, r3, r7
 804028a:	fa86 f647 	uadd8	r6, r6, r7
 804028e:	faa5 f687 	sel	r6, r5, r7
 8040292:	b98e      	cbnz	r6, 80402b8 <memchr+0x78>
 8040294:	d1ee      	bne.n	8040274 <memchr+0x34>
 8040296:	bcf0      	pop	{r4, r5, r6, r7}
 8040298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 804029c:	f002 0207 	and.w	r2, r2, #7
 80402a0:	b132      	cbz	r2, 80402b0 <memchr+0x70>
 80402a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402a6:	3a01      	subs	r2, #1
 80402a8:	ea83 0301 	eor.w	r3, r3, r1
 80402ac:	b113      	cbz	r3, 80402b4 <memchr+0x74>
 80402ae:	d1f8      	bne.n	80402a2 <memchr+0x62>
 80402b0:	2000      	movs	r0, #0
 80402b2:	4770      	bx	lr
 80402b4:	3801      	subs	r0, #1
 80402b6:	4770      	bx	lr
 80402b8:	2d00      	cmp	r5, #0
 80402ba:	bf06      	itte	eq
 80402bc:	4635      	moveq	r5, r6
 80402be:	3803      	subeq	r0, #3
 80402c0:	3807      	subne	r0, #7
 80402c2:	f015 0f01 	tst.w	r5, #1
 80402c6:	d107      	bne.n	80402d8 <memchr+0x98>
 80402c8:	3001      	adds	r0, #1
 80402ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80402ce:	bf02      	ittt	eq
 80402d0:	3001      	addeq	r0, #1
 80402d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80402d6:	3001      	addeq	r0, #1
 80402d8:	bcf0      	pop	{r4, r5, r6, r7}
 80402da:	3801      	subs	r0, #1
 80402dc:	4770      	bx	lr
 80402de:	bf00      	nop

080402e0 <__aeabi_uldivmod>:
 80402e0:	b953      	cbnz	r3, 80402f8 <__aeabi_uldivmod+0x18>
 80402e2:	b94a      	cbnz	r2, 80402f8 <__aeabi_uldivmod+0x18>
 80402e4:	2900      	cmp	r1, #0
 80402e6:	bf08      	it	eq
 80402e8:	2800      	cmpeq	r0, #0
 80402ea:	bf1c      	itt	ne
 80402ec:	f04f 31ff 	movne.w	r1, #4294967295
 80402f0:	f04f 30ff 	movne.w	r0, #4294967295
 80402f4:	f000 b96a 	b.w	80405cc <__aeabi_idiv0>
 80402f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040300:	f000 f806 	bl	8040310 <__udivmoddi4>
 8040304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804030c:	b004      	add	sp, #16
 804030e:	4770      	bx	lr

08040310 <__udivmoddi4>:
 8040310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040314:	9d08      	ldr	r5, [sp, #32]
 8040316:	460c      	mov	r4, r1
 8040318:	2b00      	cmp	r3, #0
 804031a:	d14e      	bne.n	80403ba <__udivmoddi4+0xaa>
 804031c:	4694      	mov	ip, r2
 804031e:	458c      	cmp	ip, r1
 8040320:	4686      	mov	lr, r0
 8040322:	fab2 f282 	clz	r2, r2
 8040326:	d962      	bls.n	80403ee <__udivmoddi4+0xde>
 8040328:	b14a      	cbz	r2, 804033e <__udivmoddi4+0x2e>
 804032a:	f1c2 0320 	rsb	r3, r2, #32
 804032e:	4091      	lsls	r1, r2
 8040330:	fa20 f303 	lsr.w	r3, r0, r3
 8040334:	fa0c fc02 	lsl.w	ip, ip, r2
 8040338:	4319      	orrs	r1, r3
 804033a:	fa00 fe02 	lsl.w	lr, r0, r2
 804033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040342:	fa1f f68c 	uxth.w	r6, ip
 8040346:	fbb1 f4f7 	udiv	r4, r1, r7
 804034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 804034e:	fb07 1114 	mls	r1, r7, r4, r1
 8040352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040356:	fb04 f106 	mul.w	r1, r4, r6
 804035a:	4299      	cmp	r1, r3
 804035c:	d90a      	bls.n	8040374 <__udivmoddi4+0x64>
 804035e:	eb1c 0303 	adds.w	r3, ip, r3
 8040362:	f104 30ff 	add.w	r0, r4, #4294967295
 8040366:	f080 8112 	bcs.w	804058e <__udivmoddi4+0x27e>
 804036a:	4299      	cmp	r1, r3
 804036c:	f240 810f 	bls.w	804058e <__udivmoddi4+0x27e>
 8040370:	3c02      	subs	r4, #2
 8040372:	4463      	add	r3, ip
 8040374:	1a59      	subs	r1, r3, r1
 8040376:	fa1f f38e 	uxth.w	r3, lr
 804037a:	fbb1 f0f7 	udiv	r0, r1, r7
 804037e:	fb07 1110 	mls	r1, r7, r0, r1
 8040382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040386:	fb00 f606 	mul.w	r6, r0, r6
 804038a:	429e      	cmp	r6, r3
 804038c:	d90a      	bls.n	80403a4 <__udivmoddi4+0x94>
 804038e:	eb1c 0303 	adds.w	r3, ip, r3
 8040392:	f100 31ff 	add.w	r1, r0, #4294967295
 8040396:	f080 80fc 	bcs.w	8040592 <__udivmoddi4+0x282>
 804039a:	429e      	cmp	r6, r3
 804039c:	f240 80f9 	bls.w	8040592 <__udivmoddi4+0x282>
 80403a0:	4463      	add	r3, ip
 80403a2:	3802      	subs	r0, #2
 80403a4:	1b9b      	subs	r3, r3, r6
 80403a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80403aa:	2100      	movs	r1, #0
 80403ac:	b11d      	cbz	r5, 80403b6 <__udivmoddi4+0xa6>
 80403ae:	40d3      	lsrs	r3, r2
 80403b0:	2200      	movs	r2, #0
 80403b2:	e9c5 3200 	strd	r3, r2, [r5]
 80403b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403ba:	428b      	cmp	r3, r1
 80403bc:	d905      	bls.n	80403ca <__udivmoddi4+0xba>
 80403be:	b10d      	cbz	r5, 80403c4 <__udivmoddi4+0xb4>
 80403c0:	e9c5 0100 	strd	r0, r1, [r5]
 80403c4:	2100      	movs	r1, #0
 80403c6:	4608      	mov	r0, r1
 80403c8:	e7f5      	b.n	80403b6 <__udivmoddi4+0xa6>
 80403ca:	fab3 f183 	clz	r1, r3
 80403ce:	2900      	cmp	r1, #0
 80403d0:	d146      	bne.n	8040460 <__udivmoddi4+0x150>
 80403d2:	42a3      	cmp	r3, r4
 80403d4:	d302      	bcc.n	80403dc <__udivmoddi4+0xcc>
 80403d6:	4290      	cmp	r0, r2
 80403d8:	f0c0 80f0 	bcc.w	80405bc <__udivmoddi4+0x2ac>
 80403dc:	1a86      	subs	r6, r0, r2
 80403de:	eb64 0303 	sbc.w	r3, r4, r3
 80403e2:	2001      	movs	r0, #1
 80403e4:	2d00      	cmp	r5, #0
 80403e6:	d0e6      	beq.n	80403b6 <__udivmoddi4+0xa6>
 80403e8:	e9c5 6300 	strd	r6, r3, [r5]
 80403ec:	e7e3      	b.n	80403b6 <__udivmoddi4+0xa6>
 80403ee:	2a00      	cmp	r2, #0
 80403f0:	f040 8090 	bne.w	8040514 <__udivmoddi4+0x204>
 80403f4:	eba1 040c 	sub.w	r4, r1, ip
 80403f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80403fc:	fa1f f78c 	uxth.w	r7, ip
 8040400:	2101      	movs	r1, #1
 8040402:	fbb4 f6f8 	udiv	r6, r4, r8
 8040406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 804040a:	fb08 4416 	mls	r4, r8, r6, r4
 804040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8040412:	fb07 f006 	mul.w	r0, r7, r6
 8040416:	4298      	cmp	r0, r3
 8040418:	d908      	bls.n	804042c <__udivmoddi4+0x11c>
 804041a:	eb1c 0303 	adds.w	r3, ip, r3
 804041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8040422:	d202      	bcs.n	804042a <__udivmoddi4+0x11a>
 8040424:	4298      	cmp	r0, r3
 8040426:	f200 80cd 	bhi.w	80405c4 <__udivmoddi4+0x2b4>
 804042a:	4626      	mov	r6, r4
 804042c:	1a1c      	subs	r4, r3, r0
 804042e:	fa1f f38e 	uxth.w	r3, lr
 8040432:	fbb4 f0f8 	udiv	r0, r4, r8
 8040436:	fb08 4410 	mls	r4, r8, r0, r4
 804043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 804043e:	fb00 f707 	mul.w	r7, r0, r7
 8040442:	429f      	cmp	r7, r3
 8040444:	d908      	bls.n	8040458 <__udivmoddi4+0x148>
 8040446:	eb1c 0303 	adds.w	r3, ip, r3
 804044a:	f100 34ff 	add.w	r4, r0, #4294967295
 804044e:	d202      	bcs.n	8040456 <__udivmoddi4+0x146>
 8040450:	429f      	cmp	r7, r3
 8040452:	f200 80b0 	bhi.w	80405b6 <__udivmoddi4+0x2a6>
 8040456:	4620      	mov	r0, r4
 8040458:	1bdb      	subs	r3, r3, r7
 804045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 804045e:	e7a5      	b.n	80403ac <__udivmoddi4+0x9c>
 8040460:	f1c1 0620 	rsb	r6, r1, #32
 8040464:	408b      	lsls	r3, r1
 8040466:	fa22 f706 	lsr.w	r7, r2, r6
 804046a:	431f      	orrs	r7, r3
 804046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8040470:	fa04 f301 	lsl.w	r3, r4, r1
 8040474:	ea43 030c 	orr.w	r3, r3, ip
 8040478:	40f4      	lsrs	r4, r6
 804047a:	fa00 f801 	lsl.w	r8, r0, r1
 804047e:	0c38      	lsrs	r0, r7, #16
 8040480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8040484:	fbb4 fef0 	udiv	lr, r4, r0
 8040488:	fa1f fc87 	uxth.w	ip, r7
 804048c:	fb00 441e 	mls	r4, r0, lr, r4
 8040490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8040494:	fb0e f90c 	mul.w	r9, lr, ip
 8040498:	45a1      	cmp	r9, r4
 804049a:	fa02 f201 	lsl.w	r2, r2, r1
 804049e:	d90a      	bls.n	80404b6 <__udivmoddi4+0x1a6>
 80404a0:	193c      	adds	r4, r7, r4
 80404a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80404a6:	f080 8084 	bcs.w	80405b2 <__udivmoddi4+0x2a2>
 80404aa:	45a1      	cmp	r9, r4
 80404ac:	f240 8081 	bls.w	80405b2 <__udivmoddi4+0x2a2>
 80404b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80404b4:	443c      	add	r4, r7
 80404b6:	eba4 0409 	sub.w	r4, r4, r9
 80404ba:	fa1f f983 	uxth.w	r9, r3
 80404be:	fbb4 f3f0 	udiv	r3, r4, r0
 80404c2:	fb00 4413 	mls	r4, r0, r3, r4
 80404c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80404ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80404ce:	45a4      	cmp	ip, r4
 80404d0:	d907      	bls.n	80404e2 <__udivmoddi4+0x1d2>
 80404d2:	193c      	adds	r4, r7, r4
 80404d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80404d8:	d267      	bcs.n	80405aa <__udivmoddi4+0x29a>
 80404da:	45a4      	cmp	ip, r4
 80404dc:	d965      	bls.n	80405aa <__udivmoddi4+0x29a>
 80404de:	3b02      	subs	r3, #2
 80404e0:	443c      	add	r4, r7
 80404e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80404e6:	fba0 9302 	umull	r9, r3, r0, r2
 80404ea:	eba4 040c 	sub.w	r4, r4, ip
 80404ee:	429c      	cmp	r4, r3
 80404f0:	46ce      	mov	lr, r9
 80404f2:	469c      	mov	ip, r3
 80404f4:	d351      	bcc.n	804059a <__udivmoddi4+0x28a>
 80404f6:	d04e      	beq.n	8040596 <__udivmoddi4+0x286>
 80404f8:	b155      	cbz	r5, 8040510 <__udivmoddi4+0x200>
 80404fa:	ebb8 030e 	subs.w	r3, r8, lr
 80404fe:	eb64 040c 	sbc.w	r4, r4, ip
 8040502:	fa04 f606 	lsl.w	r6, r4, r6
 8040506:	40cb      	lsrs	r3, r1
 8040508:	431e      	orrs	r6, r3
 804050a:	40cc      	lsrs	r4, r1
 804050c:	e9c5 6400 	strd	r6, r4, [r5]
 8040510:	2100      	movs	r1, #0
 8040512:	e750      	b.n	80403b6 <__udivmoddi4+0xa6>
 8040514:	f1c2 0320 	rsb	r3, r2, #32
 8040518:	fa20 f103 	lsr.w	r1, r0, r3
 804051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8040520:	fa24 f303 	lsr.w	r3, r4, r3
 8040524:	4094      	lsls	r4, r2
 8040526:	430c      	orrs	r4, r1
 8040528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 804052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8040530:	fa1f f78c 	uxth.w	r7, ip
 8040534:	fbb3 f0f8 	udiv	r0, r3, r8
 8040538:	fb08 3110 	mls	r1, r8, r0, r3
 804053c:	0c23      	lsrs	r3, r4, #16
 804053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040542:	fb00 f107 	mul.w	r1, r0, r7
 8040546:	4299      	cmp	r1, r3
 8040548:	d908      	bls.n	804055c <__udivmoddi4+0x24c>
 804054a:	eb1c 0303 	adds.w	r3, ip, r3
 804054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8040552:	d22c      	bcs.n	80405ae <__udivmoddi4+0x29e>
 8040554:	4299      	cmp	r1, r3
 8040556:	d92a      	bls.n	80405ae <__udivmoddi4+0x29e>
 8040558:	3802      	subs	r0, #2
 804055a:	4463      	add	r3, ip
 804055c:	1a5b      	subs	r3, r3, r1
 804055e:	b2a4      	uxth	r4, r4
 8040560:	fbb3 f1f8 	udiv	r1, r3, r8
 8040564:	fb08 3311 	mls	r3, r8, r1, r3
 8040568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 804056c:	fb01 f307 	mul.w	r3, r1, r7
 8040570:	42a3      	cmp	r3, r4
 8040572:	d908      	bls.n	8040586 <__udivmoddi4+0x276>
 8040574:	eb1c 0404 	adds.w	r4, ip, r4
 8040578:	f101 36ff 	add.w	r6, r1, #4294967295
 804057c:	d213      	bcs.n	80405a6 <__udivmoddi4+0x296>
 804057e:	42a3      	cmp	r3, r4
 8040580:	d911      	bls.n	80405a6 <__udivmoddi4+0x296>
 8040582:	3902      	subs	r1, #2
 8040584:	4464      	add	r4, ip
 8040586:	1ae4      	subs	r4, r4, r3
 8040588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 804058c:	e739      	b.n	8040402 <__udivmoddi4+0xf2>
 804058e:	4604      	mov	r4, r0
 8040590:	e6f0      	b.n	8040374 <__udivmoddi4+0x64>
 8040592:	4608      	mov	r0, r1
 8040594:	e706      	b.n	80403a4 <__udivmoddi4+0x94>
 8040596:	45c8      	cmp	r8, r9
 8040598:	d2ae      	bcs.n	80404f8 <__udivmoddi4+0x1e8>
 804059a:	ebb9 0e02 	subs.w	lr, r9, r2
 804059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80405a2:	3801      	subs	r0, #1
 80405a4:	e7a8      	b.n	80404f8 <__udivmoddi4+0x1e8>
 80405a6:	4631      	mov	r1, r6
 80405a8:	e7ed      	b.n	8040586 <__udivmoddi4+0x276>
 80405aa:	4603      	mov	r3, r0
 80405ac:	e799      	b.n	80404e2 <__udivmoddi4+0x1d2>
 80405ae:	4630      	mov	r0, r6
 80405b0:	e7d4      	b.n	804055c <__udivmoddi4+0x24c>
 80405b2:	46d6      	mov	lr, sl
 80405b4:	e77f      	b.n	80404b6 <__udivmoddi4+0x1a6>
 80405b6:	4463      	add	r3, ip
 80405b8:	3802      	subs	r0, #2
 80405ba:	e74d      	b.n	8040458 <__udivmoddi4+0x148>
 80405bc:	4606      	mov	r6, r0
 80405be:	4623      	mov	r3, r4
 80405c0:	4608      	mov	r0, r1
 80405c2:	e70f      	b.n	80403e4 <__udivmoddi4+0xd4>
 80405c4:	3e02      	subs	r6, #2
 80405c6:	4463      	add	r3, ip
 80405c8:	e730      	b.n	804042c <__udivmoddi4+0x11c>
 80405ca:	bf00      	nop

080405cc <__aeabi_idiv0>:
 80405cc:	4770      	bx	lr
 80405ce:	bf00      	nop

080405d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80405d0:	b580      	push	{r7, lr}
 80405d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80405d4:	f000 f902 	bl	80407dc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80405d8:	f000 fac7 	bl	8040b6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80405dc:	f000 f822 	bl	8040624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405e0:	f000 f8ac 	bl	804073c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80405e4:	f000 f87a 	bl	80406dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application %d.%d\n", APP_Version[0],APP_Version[1]);
 80405e8:	2300      	movs	r3, #0
 80405ea:	2201      	movs	r2, #1
 80405ec:	4619      	mov	r1, r3
 80405ee:	480b      	ldr	r0, [pc, #44]	@ (804061c <main+0x4c>)
 80405f0:	f002 fd36 	bl	8043060 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80405f4:	2201      	movs	r2, #1
 80405f6:	2180      	movs	r1, #128	@ 0x80
 80405f8:	4809      	ldr	r0, [pc, #36]	@ (8040620 <main+0x50>)
 80405fa:	f000 fe41 	bl	8041280 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80405fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8040602:	f000 fb0f 	bl	8040c24 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8040606:	2200      	movs	r2, #0
 8040608:	2180      	movs	r1, #128	@ 0x80
 804060a:	4805      	ldr	r0, [pc, #20]	@ (8040620 <main+0x50>)
 804060c:	f000 fe38 	bl	8041280 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8040610:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8040614:	f000 fb06 	bl	8040c24 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8040618:	bf00      	nop
 804061a:	e7eb      	b.n	80405f4 <main+0x24>
 804061c:	08043d54 	.word	0x08043d54
 8040620:	40020400 	.word	0x40020400

08040624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040624:	b580      	push	{r7, lr}
 8040626:	b094      	sub	sp, #80	@ 0x50
 8040628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804062a:	f107 031c 	add.w	r3, r7, #28
 804062e:	2234      	movs	r2, #52	@ 0x34
 8040630:	2100      	movs	r1, #0
 8040632:	4618      	mov	r0, r3
 8040634:	f002 fd69 	bl	804310a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040638:	f107 0308 	add.w	r3, r7, #8
 804063c:	2200      	movs	r2, #0
 804063e:	601a      	str	r2, [r3, #0]
 8040640:	605a      	str	r2, [r3, #4]
 8040642:	609a      	str	r2, [r3, #8]
 8040644:	60da      	str	r2, [r3, #12]
 8040646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040648:	4b22      	ldr	r3, [pc, #136]	@ (80406d4 <SystemClock_Config+0xb0>)
 804064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804064c:	4a21      	ldr	r2, [pc, #132]	@ (80406d4 <SystemClock_Config+0xb0>)
 804064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8040652:	6413      	str	r3, [r2, #64]	@ 0x40
 8040654:	4b1f      	ldr	r3, [pc, #124]	@ (80406d4 <SystemClock_Config+0xb0>)
 8040656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8040658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 804065c:	607b      	str	r3, [r7, #4]
 804065e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040660:	4b1d      	ldr	r3, [pc, #116]	@ (80406d8 <SystemClock_Config+0xb4>)
 8040662:	681b      	ldr	r3, [r3, #0]
 8040664:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8040668:	4a1b      	ldr	r2, [pc, #108]	@ (80406d8 <SystemClock_Config+0xb4>)
 804066a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 804066e:	6013      	str	r3, [r2, #0]
 8040670:	4b19      	ldr	r3, [pc, #100]	@ (80406d8 <SystemClock_Config+0xb4>)
 8040672:	681b      	ldr	r3, [r3, #0]
 8040674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8040678:	603b      	str	r3, [r7, #0]
 804067a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 804067c:	2302      	movs	r3, #2
 804067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8040680:	2301      	movs	r3, #1
 8040682:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040684:	2310      	movs	r3, #16
 8040686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8040688:	2300      	movs	r3, #0
 804068a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804068c:	f107 031c 	add.w	r3, r7, #28
 8040690:	4618      	mov	r0, r3
 8040692:	f000 fe0f 	bl	80412b4 <HAL_RCC_OscConfig>
 8040696:	4603      	mov	r3, r0
 8040698:	2b00      	cmp	r3, #0
 804069a:	d001      	beq.n	80406a0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 804069c:	f000 f8ca 	bl	8040834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80406a0:	230f      	movs	r3, #15
 80406a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80406a4:	2300      	movs	r3, #0
 80406a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80406a8:	2300      	movs	r3, #0
 80406aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80406ac:	2300      	movs	r3, #0
 80406ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80406b0:	2300      	movs	r3, #0
 80406b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80406b4:	f107 0308 	add.w	r3, r7, #8
 80406b8:	2100      	movs	r1, #0
 80406ba:	4618      	mov	r0, r3
 80406bc:	f001 f8a8 	bl	8041810 <HAL_RCC_ClockConfig>
 80406c0:	4603      	mov	r3, r0
 80406c2:	2b00      	cmp	r3, #0
 80406c4:	d001      	beq.n	80406ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80406c6:	f000 f8b5 	bl	8040834 <Error_Handler>
  }
}
 80406ca:	bf00      	nop
 80406cc:	3750      	adds	r7, #80	@ 0x50
 80406ce:	46bd      	mov	sp, r7
 80406d0:	bd80      	pop	{r7, pc}
 80406d2:	bf00      	nop
 80406d4:	40023800 	.word	0x40023800
 80406d8:	40007000 	.word	0x40007000

080406dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80406dc:	b580      	push	{r7, lr}
 80406de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80406e0:	4b14      	ldr	r3, [pc, #80]	@ (8040734 <MX_USART3_UART_Init+0x58>)
 80406e2:	4a15      	ldr	r2, [pc, #84]	@ (8040738 <MX_USART3_UART_Init+0x5c>)
 80406e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80406e6:	4b13      	ldr	r3, [pc, #76]	@ (8040734 <MX_USART3_UART_Init+0x58>)
 80406e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80406ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80406ee:	4b11      	ldr	r3, [pc, #68]	@ (8040734 <MX_USART3_UART_Init+0x58>)
 80406f0:	2200      	movs	r2, #0
 80406f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80406f4:	4b0f      	ldr	r3, [pc, #60]	@ (8040734 <MX_USART3_UART_Init+0x58>)
 80406f6:	2200      	movs	r2, #0
 80406f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80406fa:	4b0e      	ldr	r3, [pc, #56]	@ (8040734 <MX_USART3_UART_Init+0x58>)
 80406fc:	2200      	movs	r2, #0
 80406fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8040700:	4b0c      	ldr	r3, [pc, #48]	@ (8040734 <MX_USART3_UART_Init+0x58>)
 8040702:	220c      	movs	r2, #12
 8040704:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040706:	4b0b      	ldr	r3, [pc, #44]	@ (8040734 <MX_USART3_UART_Init+0x58>)
 8040708:	2200      	movs	r2, #0
 804070a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 804070c:	4b09      	ldr	r3, [pc, #36]	@ (8040734 <MX_USART3_UART_Init+0x58>)
 804070e:	2200      	movs	r2, #0
 8040710:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040712:	4b08      	ldr	r3, [pc, #32]	@ (8040734 <MX_USART3_UART_Init+0x58>)
 8040714:	2200      	movs	r2, #0
 8040716:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040718:	4b06      	ldr	r3, [pc, #24]	@ (8040734 <MX_USART3_UART_Init+0x58>)
 804071a:	2200      	movs	r2, #0
 804071c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 804071e:	4805      	ldr	r0, [pc, #20]	@ (8040734 <MX_USART3_UART_Init+0x58>)
 8040720:	f001 fe84 	bl	804242c <HAL_UART_Init>
 8040724:	4603      	mov	r3, r0
 8040726:	2b00      	cmp	r3, #0
 8040728:	d001      	beq.n	804072e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 804072a:	f000 f883 	bl	8040834 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 804072e:	bf00      	nop
 8040730:	bd80      	pop	{r7, pc}
 8040732:	bf00      	nop
 8040734:	20000084 	.word	0x20000084
 8040738:	40004800 	.word	0x40004800

0804073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 804073c:	b580      	push	{r7, lr}
 804073e:	b088      	sub	sp, #32
 8040740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040742:	f107 030c 	add.w	r3, r7, #12
 8040746:	2200      	movs	r2, #0
 8040748:	601a      	str	r2, [r3, #0]
 804074a:	605a      	str	r2, [r3, #4]
 804074c:	609a      	str	r2, [r3, #8]
 804074e:	60da      	str	r2, [r3, #12]
 8040750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040752:	4b17      	ldr	r3, [pc, #92]	@ (80407b0 <MX_GPIO_Init+0x74>)
 8040754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040756:	4a16      	ldr	r2, [pc, #88]	@ (80407b0 <MX_GPIO_Init+0x74>)
 8040758:	f043 0308 	orr.w	r3, r3, #8
 804075c:	6313      	str	r3, [r2, #48]	@ 0x30
 804075e:	4b14      	ldr	r3, [pc, #80]	@ (80407b0 <MX_GPIO_Init+0x74>)
 8040760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040762:	f003 0308 	and.w	r3, r3, #8
 8040766:	60bb      	str	r3, [r7, #8]
 8040768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804076a:	4b11      	ldr	r3, [pc, #68]	@ (80407b0 <MX_GPIO_Init+0x74>)
 804076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804076e:	4a10      	ldr	r2, [pc, #64]	@ (80407b0 <MX_GPIO_Init+0x74>)
 8040770:	f043 0302 	orr.w	r3, r3, #2
 8040774:	6313      	str	r3, [r2, #48]	@ 0x30
 8040776:	4b0e      	ldr	r3, [pc, #56]	@ (80407b0 <MX_GPIO_Init+0x74>)
 8040778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804077a:	f003 0302 	and.w	r3, r3, #2
 804077e:	607b      	str	r3, [r7, #4]
 8040780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8040782:	2200      	movs	r2, #0
 8040784:	2180      	movs	r1, #128	@ 0x80
 8040786:	480b      	ldr	r0, [pc, #44]	@ (80407b4 <MX_GPIO_Init+0x78>)
 8040788:	f000 fd7a 	bl	8041280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 804078c:	2380      	movs	r3, #128	@ 0x80
 804078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040790:	2301      	movs	r3, #1
 8040792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040794:	2300      	movs	r3, #0
 8040796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040798:	2300      	movs	r3, #0
 804079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804079c:	f107 030c 	add.w	r3, r7, #12
 80407a0:	4619      	mov	r1, r3
 80407a2:	4804      	ldr	r0, [pc, #16]	@ (80407b4 <MX_GPIO_Init+0x78>)
 80407a4:	f000 fbc0 	bl	8040f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80407a8:	bf00      	nop
 80407aa:	3720      	adds	r7, #32
 80407ac:	46bd      	mov	sp, r7
 80407ae:	bd80      	pop	{r7, pc}
 80407b0:	40023800 	.word	0x40023800
 80407b4:	40020400 	.word	0x40020400

080407b8 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 80407b8:	b580      	push	{r7, lr}
 80407ba:	b082      	sub	sp, #8
 80407bc:	af00      	add	r7, sp, #0
 80407be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1,HAL_MAX_DELAY);
 80407c0:	1d39      	adds	r1, r7, #4
 80407c2:	f04f 33ff 	mov.w	r3, #4294967295
 80407c6:	2201      	movs	r2, #1
 80407c8:	4803      	ldr	r0, [pc, #12]	@ (80407d8 <__io_putchar+0x20>)
 80407ca:	f001 fe7d 	bl	80424c8 <HAL_UART_Transmit>
	return ch;
 80407ce:	687b      	ldr	r3, [r7, #4]
}
 80407d0:	4618      	mov	r0, r3
 80407d2:	3708      	adds	r7, #8
 80407d4:	46bd      	mov	sp, r7
 80407d6:	bd80      	pop	{r7, pc}
 80407d8:	20000084 	.word	0x20000084

080407dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80407dc:	b580      	push	{r7, lr}
 80407de:	b084      	sub	sp, #16
 80407e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80407e2:	463b      	mov	r3, r7
 80407e4:	2200      	movs	r2, #0
 80407e6:	601a      	str	r2, [r3, #0]
 80407e8:	605a      	str	r2, [r3, #4]
 80407ea:	609a      	str	r2, [r3, #8]
 80407ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80407ee:	f000 fb23 	bl	8040e38 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80407f2:	2301      	movs	r3, #1
 80407f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80407f6:	2300      	movs	r3, #0
 80407f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80407fa:	2300      	movs	r3, #0
 80407fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80407fe:	231f      	movs	r3, #31
 8040800:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8040802:	2387      	movs	r3, #135	@ 0x87
 8040804:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8040806:	2300      	movs	r3, #0
 8040808:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 804080a:	2300      	movs	r3, #0
 804080c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 804080e:	2301      	movs	r3, #1
 8040810:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8040812:	2301      	movs	r3, #1
 8040814:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8040816:	2300      	movs	r3, #0
 8040818:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 804081a:	2300      	movs	r3, #0
 804081c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 804081e:	463b      	mov	r3, r7
 8040820:	4618      	mov	r0, r3
 8040822:	f000 fb41 	bl	8040ea8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8040826:	2004      	movs	r0, #4
 8040828:	f000 fb1e 	bl	8040e68 <HAL_MPU_Enable>

}
 804082c:	bf00      	nop
 804082e:	3710      	adds	r7, #16
 8040830:	46bd      	mov	sp, r7
 8040832:	bd80      	pop	{r7, pc}

08040834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040834:	b480      	push	{r7}
 8040836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040838:	b672      	cpsid	i
}
 804083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 804083c:	bf00      	nop
 804083e:	e7fd      	b.n	804083c <Error_Handler+0x8>

08040840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040840:	b480      	push	{r7}
 8040842:	b083      	sub	sp, #12
 8040844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8040846:	4b0f      	ldr	r3, [pc, #60]	@ (8040884 <HAL_MspInit+0x44>)
 8040848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804084a:	4a0e      	ldr	r2, [pc, #56]	@ (8040884 <HAL_MspInit+0x44>)
 804084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8040850:	6413      	str	r3, [r2, #64]	@ 0x40
 8040852:	4b0c      	ldr	r3, [pc, #48]	@ (8040884 <HAL_MspInit+0x44>)
 8040854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8040856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 804085a:	607b      	str	r3, [r7, #4]
 804085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804085e:	4b09      	ldr	r3, [pc, #36]	@ (8040884 <HAL_MspInit+0x44>)
 8040860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040862:	4a08      	ldr	r2, [pc, #32]	@ (8040884 <HAL_MspInit+0x44>)
 8040864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040868:	6453      	str	r3, [r2, #68]	@ 0x44
 804086a:	4b06      	ldr	r3, [pc, #24]	@ (8040884 <HAL_MspInit+0x44>)
 804086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8040872:	603b      	str	r3, [r7, #0]
 8040874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040876:	bf00      	nop
 8040878:	370c      	adds	r7, #12
 804087a:	46bd      	mov	sp, r7
 804087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040880:	4770      	bx	lr
 8040882:	bf00      	nop
 8040884:	40023800 	.word	0x40023800

08040888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040888:	b580      	push	{r7, lr}
 804088a:	b0ae      	sub	sp, #184	@ 0xb8
 804088c:	af00      	add	r7, sp, #0
 804088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040890:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8040894:	2200      	movs	r2, #0
 8040896:	601a      	str	r2, [r3, #0]
 8040898:	605a      	str	r2, [r3, #4]
 804089a:	609a      	str	r2, [r3, #8]
 804089c:	60da      	str	r2, [r3, #12]
 804089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80408a0:	f107 0314 	add.w	r3, r7, #20
 80408a4:	2290      	movs	r2, #144	@ 0x90
 80408a6:	2100      	movs	r1, #0
 80408a8:	4618      	mov	r0, r3
 80408aa:	f002 fc2e 	bl	804310a <memset>
  if(huart->Instance==USART3)
 80408ae:	687b      	ldr	r3, [r7, #4]
 80408b0:	681b      	ldr	r3, [r3, #0]
 80408b2:	4a22      	ldr	r2, [pc, #136]	@ (804093c <HAL_UART_MspInit+0xb4>)
 80408b4:	4293      	cmp	r3, r2
 80408b6:	d13c      	bne.n	8040932 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80408b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80408bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80408be:	2300      	movs	r3, #0
 80408c0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80408c2:	f107 0314 	add.w	r3, r7, #20
 80408c6:	4618      	mov	r0, r3
 80408c8:	f001 f988 	bl	8041bdc <HAL_RCCEx_PeriphCLKConfig>
 80408cc:	4603      	mov	r3, r0
 80408ce:	2b00      	cmp	r3, #0
 80408d0:	d001      	beq.n	80408d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80408d2:	f7ff ffaf 	bl	8040834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80408d6:	4b1a      	ldr	r3, [pc, #104]	@ (8040940 <HAL_UART_MspInit+0xb8>)
 80408d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80408da:	4a19      	ldr	r2, [pc, #100]	@ (8040940 <HAL_UART_MspInit+0xb8>)
 80408dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80408e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80408e2:	4b17      	ldr	r3, [pc, #92]	@ (8040940 <HAL_UART_MspInit+0xb8>)
 80408e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80408e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80408ea:	613b      	str	r3, [r7, #16]
 80408ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80408ee:	4b14      	ldr	r3, [pc, #80]	@ (8040940 <HAL_UART_MspInit+0xb8>)
 80408f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80408f2:	4a13      	ldr	r2, [pc, #76]	@ (8040940 <HAL_UART_MspInit+0xb8>)
 80408f4:	f043 0308 	orr.w	r3, r3, #8
 80408f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80408fa:	4b11      	ldr	r3, [pc, #68]	@ (8040940 <HAL_UART_MspInit+0xb8>)
 80408fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80408fe:	f003 0308 	and.w	r3, r3, #8
 8040902:	60fb      	str	r3, [r7, #12]
 8040904:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8040906:	f44f 7340 	mov.w	r3, #768	@ 0x300
 804090a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804090e:	2302      	movs	r3, #2
 8040910:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040914:	2300      	movs	r3, #0
 8040916:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804091a:	2303      	movs	r3, #3
 804091c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8040920:	2307      	movs	r3, #7
 8040922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040926:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 804092a:	4619      	mov	r1, r3
 804092c:	4805      	ldr	r0, [pc, #20]	@ (8040944 <HAL_UART_MspInit+0xbc>)
 804092e:	f000 fafb 	bl	8040f28 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8040932:	bf00      	nop
 8040934:	37b8      	adds	r7, #184	@ 0xb8
 8040936:	46bd      	mov	sp, r7
 8040938:	bd80      	pop	{r7, pc}
 804093a:	bf00      	nop
 804093c:	40004800 	.word	0x40004800
 8040940:	40023800 	.word	0x40023800
 8040944:	40020c00 	.word	0x40020c00

08040948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040948:	b480      	push	{r7}
 804094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 804094c:	bf00      	nop
 804094e:	e7fd      	b.n	804094c <NMI_Handler+0x4>

08040950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040950:	b480      	push	{r7}
 8040952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040954:	bf00      	nop
 8040956:	e7fd      	b.n	8040954 <HardFault_Handler+0x4>

08040958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040958:	b480      	push	{r7}
 804095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 804095c:	bf00      	nop
 804095e:	e7fd      	b.n	804095c <MemManage_Handler+0x4>

08040960 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040960:	b480      	push	{r7}
 8040962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040964:	bf00      	nop
 8040966:	e7fd      	b.n	8040964 <BusFault_Handler+0x4>

08040968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040968:	b480      	push	{r7}
 804096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 804096c:	bf00      	nop
 804096e:	e7fd      	b.n	804096c <UsageFault_Handler+0x4>

08040970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040970:	b480      	push	{r7}
 8040972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040974:	bf00      	nop
 8040976:	46bd      	mov	sp, r7
 8040978:	f85d 7b04 	ldr.w	r7, [sp], #4
 804097c:	4770      	bx	lr

0804097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 804097e:	b480      	push	{r7}
 8040980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040982:	bf00      	nop
 8040984:	46bd      	mov	sp, r7
 8040986:	f85d 7b04 	ldr.w	r7, [sp], #4
 804098a:	4770      	bx	lr

0804098c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 804098c:	b480      	push	{r7}
 804098e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040990:	bf00      	nop
 8040992:	46bd      	mov	sp, r7
 8040994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040998:	4770      	bx	lr

0804099a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 804099a:	b580      	push	{r7, lr}
 804099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 804099e:	f000 f921 	bl	8040be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80409a2:	bf00      	nop
 80409a4:	bd80      	pop	{r7, pc}

080409a6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80409a6:	b580      	push	{r7, lr}
 80409a8:	b086      	sub	sp, #24
 80409aa:	af00      	add	r7, sp, #0
 80409ac:	60f8      	str	r0, [r7, #12]
 80409ae:	60b9      	str	r1, [r7, #8]
 80409b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80409b2:	2300      	movs	r3, #0
 80409b4:	617b      	str	r3, [r7, #20]
 80409b6:	e00a      	b.n	80409ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80409b8:	f3af 8000 	nop.w
 80409bc:	4601      	mov	r1, r0
 80409be:	68bb      	ldr	r3, [r7, #8]
 80409c0:	1c5a      	adds	r2, r3, #1
 80409c2:	60ba      	str	r2, [r7, #8]
 80409c4:	b2ca      	uxtb	r2, r1
 80409c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80409c8:	697b      	ldr	r3, [r7, #20]
 80409ca:	3301      	adds	r3, #1
 80409cc:	617b      	str	r3, [r7, #20]
 80409ce:	697a      	ldr	r2, [r7, #20]
 80409d0:	687b      	ldr	r3, [r7, #4]
 80409d2:	429a      	cmp	r2, r3
 80409d4:	dbf0      	blt.n	80409b8 <_read+0x12>
  }

  return len;
 80409d6:	687b      	ldr	r3, [r7, #4]
}
 80409d8:	4618      	mov	r0, r3
 80409da:	3718      	adds	r7, #24
 80409dc:	46bd      	mov	sp, r7
 80409de:	bd80      	pop	{r7, pc}

080409e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80409e0:	b580      	push	{r7, lr}
 80409e2:	b086      	sub	sp, #24
 80409e4:	af00      	add	r7, sp, #0
 80409e6:	60f8      	str	r0, [r7, #12]
 80409e8:	60b9      	str	r1, [r7, #8]
 80409ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80409ec:	2300      	movs	r3, #0
 80409ee:	617b      	str	r3, [r7, #20]
 80409f0:	e009      	b.n	8040a06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80409f2:	68bb      	ldr	r3, [r7, #8]
 80409f4:	1c5a      	adds	r2, r3, #1
 80409f6:	60ba      	str	r2, [r7, #8]
 80409f8:	781b      	ldrb	r3, [r3, #0]
 80409fa:	4618      	mov	r0, r3
 80409fc:	f7ff fedc 	bl	80407b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040a00:	697b      	ldr	r3, [r7, #20]
 8040a02:	3301      	adds	r3, #1
 8040a04:	617b      	str	r3, [r7, #20]
 8040a06:	697a      	ldr	r2, [r7, #20]
 8040a08:	687b      	ldr	r3, [r7, #4]
 8040a0a:	429a      	cmp	r2, r3
 8040a0c:	dbf1      	blt.n	80409f2 <_write+0x12>
  }
  return len;
 8040a0e:	687b      	ldr	r3, [r7, #4]
}
 8040a10:	4618      	mov	r0, r3
 8040a12:	3718      	adds	r7, #24
 8040a14:	46bd      	mov	sp, r7
 8040a16:	bd80      	pop	{r7, pc}

08040a18 <_close>:

int _close(int file)
{
 8040a18:	b480      	push	{r7}
 8040a1a:	b083      	sub	sp, #12
 8040a1c:	af00      	add	r7, sp, #0
 8040a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8040a20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8040a24:	4618      	mov	r0, r3
 8040a26:	370c      	adds	r7, #12
 8040a28:	46bd      	mov	sp, r7
 8040a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a2e:	4770      	bx	lr

08040a30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040a30:	b480      	push	{r7}
 8040a32:	b083      	sub	sp, #12
 8040a34:	af00      	add	r7, sp, #0
 8040a36:	6078      	str	r0, [r7, #4]
 8040a38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8040a3a:	683b      	ldr	r3, [r7, #0]
 8040a3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8040a40:	605a      	str	r2, [r3, #4]
  return 0;
 8040a42:	2300      	movs	r3, #0
}
 8040a44:	4618      	mov	r0, r3
 8040a46:	370c      	adds	r7, #12
 8040a48:	46bd      	mov	sp, r7
 8040a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a4e:	4770      	bx	lr

08040a50 <_isatty>:

int _isatty(int file)
{
 8040a50:	b480      	push	{r7}
 8040a52:	b083      	sub	sp, #12
 8040a54:	af00      	add	r7, sp, #0
 8040a56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8040a58:	2301      	movs	r3, #1
}
 8040a5a:	4618      	mov	r0, r3
 8040a5c:	370c      	adds	r7, #12
 8040a5e:	46bd      	mov	sp, r7
 8040a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a64:	4770      	bx	lr

08040a66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040a66:	b480      	push	{r7}
 8040a68:	b085      	sub	sp, #20
 8040a6a:	af00      	add	r7, sp, #0
 8040a6c:	60f8      	str	r0, [r7, #12]
 8040a6e:	60b9      	str	r1, [r7, #8]
 8040a70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040a72:	2300      	movs	r3, #0
}
 8040a74:	4618      	mov	r0, r3
 8040a76:	3714      	adds	r7, #20
 8040a78:	46bd      	mov	sp, r7
 8040a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a7e:	4770      	bx	lr

08040a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040a80:	b580      	push	{r7, lr}
 8040a82:	b086      	sub	sp, #24
 8040a84:	af00      	add	r7, sp, #0
 8040a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040a88:	4a14      	ldr	r2, [pc, #80]	@ (8040adc <_sbrk+0x5c>)
 8040a8a:	4b15      	ldr	r3, [pc, #84]	@ (8040ae0 <_sbrk+0x60>)
 8040a8c:	1ad3      	subs	r3, r2, r3
 8040a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040a90:	697b      	ldr	r3, [r7, #20]
 8040a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040a94:	4b13      	ldr	r3, [pc, #76]	@ (8040ae4 <_sbrk+0x64>)
 8040a96:	681b      	ldr	r3, [r3, #0]
 8040a98:	2b00      	cmp	r3, #0
 8040a9a:	d102      	bne.n	8040aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040a9c:	4b11      	ldr	r3, [pc, #68]	@ (8040ae4 <_sbrk+0x64>)
 8040a9e:	4a12      	ldr	r2, [pc, #72]	@ (8040ae8 <_sbrk+0x68>)
 8040aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040aa2:	4b10      	ldr	r3, [pc, #64]	@ (8040ae4 <_sbrk+0x64>)
 8040aa4:	681a      	ldr	r2, [r3, #0]
 8040aa6:	687b      	ldr	r3, [r7, #4]
 8040aa8:	4413      	add	r3, r2
 8040aaa:	693a      	ldr	r2, [r7, #16]
 8040aac:	429a      	cmp	r2, r3
 8040aae:	d207      	bcs.n	8040ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040ab0:	f002 fb7a 	bl	80431a8 <__errno>
 8040ab4:	4603      	mov	r3, r0
 8040ab6:	220c      	movs	r2, #12
 8040ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040aba:	f04f 33ff 	mov.w	r3, #4294967295
 8040abe:	e009      	b.n	8040ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040ac0:	4b08      	ldr	r3, [pc, #32]	@ (8040ae4 <_sbrk+0x64>)
 8040ac2:	681b      	ldr	r3, [r3, #0]
 8040ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040ac6:	4b07      	ldr	r3, [pc, #28]	@ (8040ae4 <_sbrk+0x64>)
 8040ac8:	681a      	ldr	r2, [r3, #0]
 8040aca:	687b      	ldr	r3, [r7, #4]
 8040acc:	4413      	add	r3, r2
 8040ace:	4a05      	ldr	r2, [pc, #20]	@ (8040ae4 <_sbrk+0x64>)
 8040ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040ad2:	68fb      	ldr	r3, [r7, #12]
}
 8040ad4:	4618      	mov	r0, r3
 8040ad6:	3718      	adds	r7, #24
 8040ad8:	46bd      	mov	sp, r7
 8040ada:	bd80      	pop	{r7, pc}
 8040adc:	20080000 	.word	0x20080000
 8040ae0:	00000400 	.word	0x00000400
 8040ae4:	2000010c 	.word	0x2000010c
 8040ae8:	20000260 	.word	0x20000260

08040aec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040aec:	b480      	push	{r7}
 8040aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040af0:	4b07      	ldr	r3, [pc, #28]	@ (8040b10 <SystemInit+0x24>)
 8040af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8040af6:	4a06      	ldr	r2, [pc, #24]	@ (8040b10 <SystemInit+0x24>)
 8040af8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8040afc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040b00:	4b03      	ldr	r3, [pc, #12]	@ (8040b10 <SystemInit+0x24>)
 8040b02:	4a04      	ldr	r2, [pc, #16]	@ (8040b14 <SystemInit+0x28>)
 8040b04:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040b06:	bf00      	nop
 8040b08:	46bd      	mov	sp, r7
 8040b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b0e:	4770      	bx	lr
 8040b10:	e000ed00 	.word	0xe000ed00
 8040b14:	08040000 	.word	0x08040000

08040b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8040b18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8040b50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040b1c:	f7ff ffe6 	bl	8040aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040b20:	480c      	ldr	r0, [pc, #48]	@ (8040b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8040b22:	490d      	ldr	r1, [pc, #52]	@ (8040b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040b24:	4a0d      	ldr	r2, [pc, #52]	@ (8040b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8040b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040b28:	e002      	b.n	8040b30 <LoopCopyDataInit>

08040b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040b2e:	3304      	adds	r3, #4

08040b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040b34:	d3f9      	bcc.n	8040b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040b36:	4a0a      	ldr	r2, [pc, #40]	@ (8040b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8040b38:	4c0a      	ldr	r4, [pc, #40]	@ (8040b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8040b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040b3c:	e001      	b.n	8040b42 <LoopFillZerobss>

08040b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040b40:	3204      	adds	r2, #4

08040b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040b44:	d3fb      	bcc.n	8040b3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8040b46:	f002 fb35 	bl	80431b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040b4a:	f7ff fd41 	bl	80405d0 <main>
  bx  lr    
 8040b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040b50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8040b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040b58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8040b5c:	08043dcc 	.word	0x08043dcc
  ldr r2, =_sbss
 8040b60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8040b64:	20000260 	.word	0x20000260

08040b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040b68:	e7fe      	b.n	8040b68 <ADC_IRQHandler>

08040b6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040b6a:	b580      	push	{r7, lr}
 8040b6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040b6e:	2003      	movs	r0, #3
 8040b70:	f000 f92e 	bl	8040dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040b74:	200f      	movs	r0, #15
 8040b76:	f000 f805 	bl	8040b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8040b7a:	f7ff fe61 	bl	8040840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040b7e:	2300      	movs	r3, #0
}
 8040b80:	4618      	mov	r0, r3
 8040b82:	bd80      	pop	{r7, pc}

08040b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040b84:	b580      	push	{r7, lr}
 8040b86:	b082      	sub	sp, #8
 8040b88:	af00      	add	r7, sp, #0
 8040b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040b8c:	4b12      	ldr	r3, [pc, #72]	@ (8040bd8 <HAL_InitTick+0x54>)
 8040b8e:	681a      	ldr	r2, [r3, #0]
 8040b90:	4b12      	ldr	r3, [pc, #72]	@ (8040bdc <HAL_InitTick+0x58>)
 8040b92:	781b      	ldrb	r3, [r3, #0]
 8040b94:	4619      	mov	r1, r3
 8040b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8040b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8040b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8040ba2:	4618      	mov	r0, r3
 8040ba4:	f000 f93b 	bl	8040e1e <HAL_SYSTICK_Config>
 8040ba8:	4603      	mov	r3, r0
 8040baa:	2b00      	cmp	r3, #0
 8040bac:	d001      	beq.n	8040bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040bae:	2301      	movs	r3, #1
 8040bb0:	e00e      	b.n	8040bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040bb2:	687b      	ldr	r3, [r7, #4]
 8040bb4:	2b0f      	cmp	r3, #15
 8040bb6:	d80a      	bhi.n	8040bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040bb8:	2200      	movs	r2, #0
 8040bba:	6879      	ldr	r1, [r7, #4]
 8040bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8040bc0:	f000 f911 	bl	8040de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040bc4:	4a06      	ldr	r2, [pc, #24]	@ (8040be0 <HAL_InitTick+0x5c>)
 8040bc6:	687b      	ldr	r3, [r7, #4]
 8040bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040bca:	2300      	movs	r3, #0
 8040bcc:	e000      	b.n	8040bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040bce:	2301      	movs	r3, #1
}
 8040bd0:	4618      	mov	r0, r3
 8040bd2:	3708      	adds	r7, #8
 8040bd4:	46bd      	mov	sp, r7
 8040bd6:	bd80      	pop	{r7, pc}
 8040bd8:	20000000 	.word	0x20000000
 8040bdc:	20000008 	.word	0x20000008
 8040be0:	20000004 	.word	0x20000004

08040be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040be4:	b480      	push	{r7}
 8040be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040be8:	4b06      	ldr	r3, [pc, #24]	@ (8040c04 <HAL_IncTick+0x20>)
 8040bea:	781b      	ldrb	r3, [r3, #0]
 8040bec:	461a      	mov	r2, r3
 8040bee:	4b06      	ldr	r3, [pc, #24]	@ (8040c08 <HAL_IncTick+0x24>)
 8040bf0:	681b      	ldr	r3, [r3, #0]
 8040bf2:	4413      	add	r3, r2
 8040bf4:	4a04      	ldr	r2, [pc, #16]	@ (8040c08 <HAL_IncTick+0x24>)
 8040bf6:	6013      	str	r3, [r2, #0]
}
 8040bf8:	bf00      	nop
 8040bfa:	46bd      	mov	sp, r7
 8040bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c00:	4770      	bx	lr
 8040c02:	bf00      	nop
 8040c04:	20000008 	.word	0x20000008
 8040c08:	20000110 	.word	0x20000110

08040c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040c0c:	b480      	push	{r7}
 8040c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8040c10:	4b03      	ldr	r3, [pc, #12]	@ (8040c20 <HAL_GetTick+0x14>)
 8040c12:	681b      	ldr	r3, [r3, #0]
}
 8040c14:	4618      	mov	r0, r3
 8040c16:	46bd      	mov	sp, r7
 8040c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c1c:	4770      	bx	lr
 8040c1e:	bf00      	nop
 8040c20:	20000110 	.word	0x20000110

08040c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040c24:	b580      	push	{r7, lr}
 8040c26:	b084      	sub	sp, #16
 8040c28:	af00      	add	r7, sp, #0
 8040c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040c2c:	f7ff ffee 	bl	8040c0c <HAL_GetTick>
 8040c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040c32:	687b      	ldr	r3, [r7, #4]
 8040c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040c36:	68fb      	ldr	r3, [r7, #12]
 8040c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040c3c:	d005      	beq.n	8040c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8040c68 <HAL_Delay+0x44>)
 8040c40:	781b      	ldrb	r3, [r3, #0]
 8040c42:	461a      	mov	r2, r3
 8040c44:	68fb      	ldr	r3, [r7, #12]
 8040c46:	4413      	add	r3, r2
 8040c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040c4a:	bf00      	nop
 8040c4c:	f7ff ffde 	bl	8040c0c <HAL_GetTick>
 8040c50:	4602      	mov	r2, r0
 8040c52:	68bb      	ldr	r3, [r7, #8]
 8040c54:	1ad3      	subs	r3, r2, r3
 8040c56:	68fa      	ldr	r2, [r7, #12]
 8040c58:	429a      	cmp	r2, r3
 8040c5a:	d8f7      	bhi.n	8040c4c <HAL_Delay+0x28>
  {
  }
}
 8040c5c:	bf00      	nop
 8040c5e:	bf00      	nop
 8040c60:	3710      	adds	r7, #16
 8040c62:	46bd      	mov	sp, r7
 8040c64:	bd80      	pop	{r7, pc}
 8040c66:	bf00      	nop
 8040c68:	20000008 	.word	0x20000008

08040c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040c6c:	b480      	push	{r7}
 8040c6e:	b085      	sub	sp, #20
 8040c70:	af00      	add	r7, sp, #0
 8040c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040c74:	687b      	ldr	r3, [r7, #4]
 8040c76:	f003 0307 	and.w	r3, r3, #7
 8040c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8040cac <__NVIC_SetPriorityGrouping+0x40>)
 8040c7e:	68db      	ldr	r3, [r3, #12]
 8040c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040c82:	68ba      	ldr	r2, [r7, #8]
 8040c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8040c88:	4013      	ands	r3, r2
 8040c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040c8c:	68fb      	ldr	r3, [r7, #12]
 8040c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040c90:	68bb      	ldr	r3, [r7, #8]
 8040c92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040c94:	4b06      	ldr	r3, [pc, #24]	@ (8040cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8040c96:	4313      	orrs	r3, r2
 8040c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040c9a:	4a04      	ldr	r2, [pc, #16]	@ (8040cac <__NVIC_SetPriorityGrouping+0x40>)
 8040c9c:	68bb      	ldr	r3, [r7, #8]
 8040c9e:	60d3      	str	r3, [r2, #12]
}
 8040ca0:	bf00      	nop
 8040ca2:	3714      	adds	r7, #20
 8040ca4:	46bd      	mov	sp, r7
 8040ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040caa:	4770      	bx	lr
 8040cac:	e000ed00 	.word	0xe000ed00
 8040cb0:	05fa0000 	.word	0x05fa0000

08040cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040cb4:	b480      	push	{r7}
 8040cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040cb8:	4b04      	ldr	r3, [pc, #16]	@ (8040ccc <__NVIC_GetPriorityGrouping+0x18>)
 8040cba:	68db      	ldr	r3, [r3, #12]
 8040cbc:	0a1b      	lsrs	r3, r3, #8
 8040cbe:	f003 0307 	and.w	r3, r3, #7
}
 8040cc2:	4618      	mov	r0, r3
 8040cc4:	46bd      	mov	sp, r7
 8040cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cca:	4770      	bx	lr
 8040ccc:	e000ed00 	.word	0xe000ed00

08040cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040cd0:	b480      	push	{r7}
 8040cd2:	b083      	sub	sp, #12
 8040cd4:	af00      	add	r7, sp, #0
 8040cd6:	4603      	mov	r3, r0
 8040cd8:	6039      	str	r1, [r7, #0]
 8040cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040ce0:	2b00      	cmp	r3, #0
 8040ce2:	db0a      	blt.n	8040cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040ce4:	683b      	ldr	r3, [r7, #0]
 8040ce6:	b2da      	uxtb	r2, r3
 8040ce8:	490c      	ldr	r1, [pc, #48]	@ (8040d1c <__NVIC_SetPriority+0x4c>)
 8040cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040cee:	0112      	lsls	r2, r2, #4
 8040cf0:	b2d2      	uxtb	r2, r2
 8040cf2:	440b      	add	r3, r1
 8040cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040cf8:	e00a      	b.n	8040d10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040cfa:	683b      	ldr	r3, [r7, #0]
 8040cfc:	b2da      	uxtb	r2, r3
 8040cfe:	4908      	ldr	r1, [pc, #32]	@ (8040d20 <__NVIC_SetPriority+0x50>)
 8040d00:	79fb      	ldrb	r3, [r7, #7]
 8040d02:	f003 030f 	and.w	r3, r3, #15
 8040d06:	3b04      	subs	r3, #4
 8040d08:	0112      	lsls	r2, r2, #4
 8040d0a:	b2d2      	uxtb	r2, r2
 8040d0c:	440b      	add	r3, r1
 8040d0e:	761a      	strb	r2, [r3, #24]
}
 8040d10:	bf00      	nop
 8040d12:	370c      	adds	r7, #12
 8040d14:	46bd      	mov	sp, r7
 8040d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d1a:	4770      	bx	lr
 8040d1c:	e000e100 	.word	0xe000e100
 8040d20:	e000ed00 	.word	0xe000ed00

08040d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040d24:	b480      	push	{r7}
 8040d26:	b089      	sub	sp, #36	@ 0x24
 8040d28:	af00      	add	r7, sp, #0
 8040d2a:	60f8      	str	r0, [r7, #12]
 8040d2c:	60b9      	str	r1, [r7, #8]
 8040d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040d30:	68fb      	ldr	r3, [r7, #12]
 8040d32:	f003 0307 	and.w	r3, r3, #7
 8040d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040d38:	69fb      	ldr	r3, [r7, #28]
 8040d3a:	f1c3 0307 	rsb	r3, r3, #7
 8040d3e:	2b04      	cmp	r3, #4
 8040d40:	bf28      	it	cs
 8040d42:	2304      	movcs	r3, #4
 8040d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040d46:	69fb      	ldr	r3, [r7, #28]
 8040d48:	3304      	adds	r3, #4
 8040d4a:	2b06      	cmp	r3, #6
 8040d4c:	d902      	bls.n	8040d54 <NVIC_EncodePriority+0x30>
 8040d4e:	69fb      	ldr	r3, [r7, #28]
 8040d50:	3b03      	subs	r3, #3
 8040d52:	e000      	b.n	8040d56 <NVIC_EncodePriority+0x32>
 8040d54:	2300      	movs	r3, #0
 8040d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040d58:	f04f 32ff 	mov.w	r2, #4294967295
 8040d5c:	69bb      	ldr	r3, [r7, #24]
 8040d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8040d62:	43da      	mvns	r2, r3
 8040d64:	68bb      	ldr	r3, [r7, #8]
 8040d66:	401a      	ands	r2, r3
 8040d68:	697b      	ldr	r3, [r7, #20]
 8040d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8040d70:	697b      	ldr	r3, [r7, #20]
 8040d72:	fa01 f303 	lsl.w	r3, r1, r3
 8040d76:	43d9      	mvns	r1, r3
 8040d78:	687b      	ldr	r3, [r7, #4]
 8040d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040d7c:	4313      	orrs	r3, r2
         );
}
 8040d7e:	4618      	mov	r0, r3
 8040d80:	3724      	adds	r7, #36	@ 0x24
 8040d82:	46bd      	mov	sp, r7
 8040d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d88:	4770      	bx	lr
	...

08040d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040d8c:	b580      	push	{r7, lr}
 8040d8e:	b082      	sub	sp, #8
 8040d90:	af00      	add	r7, sp, #0
 8040d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040d94:	687b      	ldr	r3, [r7, #4]
 8040d96:	3b01      	subs	r3, #1
 8040d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8040d9c:	d301      	bcc.n	8040da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040d9e:	2301      	movs	r3, #1
 8040da0:	e00f      	b.n	8040dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040da2:	4a0a      	ldr	r2, [pc, #40]	@ (8040dcc <SysTick_Config+0x40>)
 8040da4:	687b      	ldr	r3, [r7, #4]
 8040da6:	3b01      	subs	r3, #1
 8040da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040daa:	210f      	movs	r1, #15
 8040dac:	f04f 30ff 	mov.w	r0, #4294967295
 8040db0:	f7ff ff8e 	bl	8040cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040db4:	4b05      	ldr	r3, [pc, #20]	@ (8040dcc <SysTick_Config+0x40>)
 8040db6:	2200      	movs	r2, #0
 8040db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040dba:	4b04      	ldr	r3, [pc, #16]	@ (8040dcc <SysTick_Config+0x40>)
 8040dbc:	2207      	movs	r2, #7
 8040dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040dc0:	2300      	movs	r3, #0
}
 8040dc2:	4618      	mov	r0, r3
 8040dc4:	3708      	adds	r7, #8
 8040dc6:	46bd      	mov	sp, r7
 8040dc8:	bd80      	pop	{r7, pc}
 8040dca:	bf00      	nop
 8040dcc:	e000e010 	.word	0xe000e010

08040dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040dd0:	b580      	push	{r7, lr}
 8040dd2:	b082      	sub	sp, #8
 8040dd4:	af00      	add	r7, sp, #0
 8040dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040dd8:	6878      	ldr	r0, [r7, #4]
 8040dda:	f7ff ff47 	bl	8040c6c <__NVIC_SetPriorityGrouping>
}
 8040dde:	bf00      	nop
 8040de0:	3708      	adds	r7, #8
 8040de2:	46bd      	mov	sp, r7
 8040de4:	bd80      	pop	{r7, pc}

08040de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040de6:	b580      	push	{r7, lr}
 8040de8:	b086      	sub	sp, #24
 8040dea:	af00      	add	r7, sp, #0
 8040dec:	4603      	mov	r3, r0
 8040dee:	60b9      	str	r1, [r7, #8]
 8040df0:	607a      	str	r2, [r7, #4]
 8040df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8040df4:	2300      	movs	r3, #0
 8040df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040df8:	f7ff ff5c 	bl	8040cb4 <__NVIC_GetPriorityGrouping>
 8040dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040dfe:	687a      	ldr	r2, [r7, #4]
 8040e00:	68b9      	ldr	r1, [r7, #8]
 8040e02:	6978      	ldr	r0, [r7, #20]
 8040e04:	f7ff ff8e 	bl	8040d24 <NVIC_EncodePriority>
 8040e08:	4602      	mov	r2, r0
 8040e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040e0e:	4611      	mov	r1, r2
 8040e10:	4618      	mov	r0, r3
 8040e12:	f7ff ff5d 	bl	8040cd0 <__NVIC_SetPriority>
}
 8040e16:	bf00      	nop
 8040e18:	3718      	adds	r7, #24
 8040e1a:	46bd      	mov	sp, r7
 8040e1c:	bd80      	pop	{r7, pc}

08040e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040e1e:	b580      	push	{r7, lr}
 8040e20:	b082      	sub	sp, #8
 8040e22:	af00      	add	r7, sp, #0
 8040e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040e26:	6878      	ldr	r0, [r7, #4]
 8040e28:	f7ff ffb0 	bl	8040d8c <SysTick_Config>
 8040e2c:	4603      	mov	r3, r0
}
 8040e2e:	4618      	mov	r0, r3
 8040e30:	3708      	adds	r7, #8
 8040e32:	46bd      	mov	sp, r7
 8040e34:	bd80      	pop	{r7, pc}
	...

08040e38 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8040e38:	b480      	push	{r7}
 8040e3a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8040e3c:	f3bf 8f5f 	dmb	sy
}
 8040e40:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8040e42:	4b07      	ldr	r3, [pc, #28]	@ (8040e60 <HAL_MPU_Disable+0x28>)
 8040e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8040e46:	4a06      	ldr	r2, [pc, #24]	@ (8040e60 <HAL_MPU_Disable+0x28>)
 8040e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8040e4c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8040e4e:	4b05      	ldr	r3, [pc, #20]	@ (8040e64 <HAL_MPU_Disable+0x2c>)
 8040e50:	2200      	movs	r2, #0
 8040e52:	605a      	str	r2, [r3, #4]
}
 8040e54:	bf00      	nop
 8040e56:	46bd      	mov	sp, r7
 8040e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e5c:	4770      	bx	lr
 8040e5e:	bf00      	nop
 8040e60:	e000ed00 	.word	0xe000ed00
 8040e64:	e000ed90 	.word	0xe000ed90

08040e68 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8040e68:	b480      	push	{r7}
 8040e6a:	b083      	sub	sp, #12
 8040e6c:	af00      	add	r7, sp, #0
 8040e6e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8040e70:	4a0b      	ldr	r2, [pc, #44]	@ (8040ea0 <HAL_MPU_Enable+0x38>)
 8040e72:	687b      	ldr	r3, [r7, #4]
 8040e74:	f043 0301 	orr.w	r3, r3, #1
 8040e78:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8040e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8040ea4 <HAL_MPU_Enable+0x3c>)
 8040e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8040e7e:	4a09      	ldr	r2, [pc, #36]	@ (8040ea4 <HAL_MPU_Enable+0x3c>)
 8040e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8040e84:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8040e86:	f3bf 8f4f 	dsb	sy
}
 8040e8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8040e8c:	f3bf 8f6f 	isb	sy
}
 8040e90:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8040e92:	bf00      	nop
 8040e94:	370c      	adds	r7, #12
 8040e96:	46bd      	mov	sp, r7
 8040e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e9c:	4770      	bx	lr
 8040e9e:	bf00      	nop
 8040ea0:	e000ed90 	.word	0xe000ed90
 8040ea4:	e000ed00 	.word	0xe000ed00

08040ea8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8040ea8:	b480      	push	{r7}
 8040eaa:	b083      	sub	sp, #12
 8040eac:	af00      	add	r7, sp, #0
 8040eae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8040eb0:	687b      	ldr	r3, [r7, #4]
 8040eb2:	785a      	ldrb	r2, [r3, #1]
 8040eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8040f24 <HAL_MPU_ConfigRegion+0x7c>)
 8040eb6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8040eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8040f24 <HAL_MPU_ConfigRegion+0x7c>)
 8040eba:	691b      	ldr	r3, [r3, #16]
 8040ebc:	4a19      	ldr	r2, [pc, #100]	@ (8040f24 <HAL_MPU_ConfigRegion+0x7c>)
 8040ebe:	f023 0301 	bic.w	r3, r3, #1
 8040ec2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8040ec4:	4a17      	ldr	r2, [pc, #92]	@ (8040f24 <HAL_MPU_ConfigRegion+0x7c>)
 8040ec6:	687b      	ldr	r3, [r7, #4]
 8040ec8:	685b      	ldr	r3, [r3, #4]
 8040eca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8040ecc:	687b      	ldr	r3, [r7, #4]
 8040ece:	7b1b      	ldrb	r3, [r3, #12]
 8040ed0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8040ed2:	687b      	ldr	r3, [r7, #4]
 8040ed4:	7adb      	ldrb	r3, [r3, #11]
 8040ed6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8040ed8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8040eda:	687b      	ldr	r3, [r7, #4]
 8040edc:	7a9b      	ldrb	r3, [r3, #10]
 8040ede:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8040ee0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8040ee2:	687b      	ldr	r3, [r7, #4]
 8040ee4:	7b5b      	ldrb	r3, [r3, #13]
 8040ee6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8040ee8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8040eea:	687b      	ldr	r3, [r7, #4]
 8040eec:	7b9b      	ldrb	r3, [r3, #14]
 8040eee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8040ef0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8040ef2:	687b      	ldr	r3, [r7, #4]
 8040ef4:	7bdb      	ldrb	r3, [r3, #15]
 8040ef6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8040ef8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8040efa:	687b      	ldr	r3, [r7, #4]
 8040efc:	7a5b      	ldrb	r3, [r3, #9]
 8040efe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8040f00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8040f02:	687b      	ldr	r3, [r7, #4]
 8040f04:	7a1b      	ldrb	r3, [r3, #8]
 8040f06:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8040f08:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8040f0a:	687a      	ldr	r2, [r7, #4]
 8040f0c:	7812      	ldrb	r2, [r2, #0]
 8040f0e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8040f10:	4a04      	ldr	r2, [pc, #16]	@ (8040f24 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8040f12:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8040f14:	6113      	str	r3, [r2, #16]
}
 8040f16:	bf00      	nop
 8040f18:	370c      	adds	r7, #12
 8040f1a:	46bd      	mov	sp, r7
 8040f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f20:	4770      	bx	lr
 8040f22:	bf00      	nop
 8040f24:	e000ed90 	.word	0xe000ed90

08040f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040f28:	b480      	push	{r7}
 8040f2a:	b089      	sub	sp, #36	@ 0x24
 8040f2c:	af00      	add	r7, sp, #0
 8040f2e:	6078      	str	r0, [r7, #4]
 8040f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8040f32:	2300      	movs	r3, #0
 8040f34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8040f36:	2300      	movs	r3, #0
 8040f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8040f3a:	2300      	movs	r3, #0
 8040f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8040f3e:	2300      	movs	r3, #0
 8040f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8040f42:	2300      	movs	r3, #0
 8040f44:	61fb      	str	r3, [r7, #28]
 8040f46:	e175      	b.n	8041234 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8040f48:	2201      	movs	r2, #1
 8040f4a:	69fb      	ldr	r3, [r7, #28]
 8040f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8040f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040f52:	683b      	ldr	r3, [r7, #0]
 8040f54:	681b      	ldr	r3, [r3, #0]
 8040f56:	697a      	ldr	r2, [r7, #20]
 8040f58:	4013      	ands	r3, r2
 8040f5a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8040f5c:	693a      	ldr	r2, [r7, #16]
 8040f5e:	697b      	ldr	r3, [r7, #20]
 8040f60:	429a      	cmp	r2, r3
 8040f62:	f040 8164 	bne.w	804122e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8040f66:	683b      	ldr	r3, [r7, #0]
 8040f68:	685b      	ldr	r3, [r3, #4]
 8040f6a:	f003 0303 	and.w	r3, r3, #3
 8040f6e:	2b01      	cmp	r3, #1
 8040f70:	d005      	beq.n	8040f7e <HAL_GPIO_Init+0x56>
 8040f72:	683b      	ldr	r3, [r7, #0]
 8040f74:	685b      	ldr	r3, [r3, #4]
 8040f76:	f003 0303 	and.w	r3, r3, #3
 8040f7a:	2b02      	cmp	r3, #2
 8040f7c:	d130      	bne.n	8040fe0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040f7e:	687b      	ldr	r3, [r7, #4]
 8040f80:	689b      	ldr	r3, [r3, #8]
 8040f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8040f84:	69fb      	ldr	r3, [r7, #28]
 8040f86:	005b      	lsls	r3, r3, #1
 8040f88:	2203      	movs	r2, #3
 8040f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8040f8e:	43db      	mvns	r3, r3
 8040f90:	69ba      	ldr	r2, [r7, #24]
 8040f92:	4013      	ands	r3, r2
 8040f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8040f96:	683b      	ldr	r3, [r7, #0]
 8040f98:	68da      	ldr	r2, [r3, #12]
 8040f9a:	69fb      	ldr	r3, [r7, #28]
 8040f9c:	005b      	lsls	r3, r3, #1
 8040f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8040fa2:	69ba      	ldr	r2, [r7, #24]
 8040fa4:	4313      	orrs	r3, r2
 8040fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040fa8:	687b      	ldr	r3, [r7, #4]
 8040faa:	69ba      	ldr	r2, [r7, #24]
 8040fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040fae:	687b      	ldr	r3, [r7, #4]
 8040fb0:	685b      	ldr	r3, [r3, #4]
 8040fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040fb4:	2201      	movs	r2, #1
 8040fb6:	69fb      	ldr	r3, [r7, #28]
 8040fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8040fbc:	43db      	mvns	r3, r3
 8040fbe:	69ba      	ldr	r2, [r7, #24]
 8040fc0:	4013      	ands	r3, r2
 8040fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040fc4:	683b      	ldr	r3, [r7, #0]
 8040fc6:	685b      	ldr	r3, [r3, #4]
 8040fc8:	091b      	lsrs	r3, r3, #4
 8040fca:	f003 0201 	and.w	r2, r3, #1
 8040fce:	69fb      	ldr	r3, [r7, #28]
 8040fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8040fd4:	69ba      	ldr	r2, [r7, #24]
 8040fd6:	4313      	orrs	r3, r2
 8040fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040fda:	687b      	ldr	r3, [r7, #4]
 8040fdc:	69ba      	ldr	r2, [r7, #24]
 8040fde:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040fe0:	683b      	ldr	r3, [r7, #0]
 8040fe2:	685b      	ldr	r3, [r3, #4]
 8040fe4:	f003 0303 	and.w	r3, r3, #3
 8040fe8:	2b03      	cmp	r3, #3
 8040fea:	d017      	beq.n	804101c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040fec:	687b      	ldr	r3, [r7, #4]
 8040fee:	68db      	ldr	r3, [r3, #12]
 8040ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8040ff2:	69fb      	ldr	r3, [r7, #28]
 8040ff4:	005b      	lsls	r3, r3, #1
 8040ff6:	2203      	movs	r2, #3
 8040ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8040ffc:	43db      	mvns	r3, r3
 8040ffe:	69ba      	ldr	r2, [r7, #24]
 8041000:	4013      	ands	r3, r2
 8041002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8041004:	683b      	ldr	r3, [r7, #0]
 8041006:	689a      	ldr	r2, [r3, #8]
 8041008:	69fb      	ldr	r3, [r7, #28]
 804100a:	005b      	lsls	r3, r3, #1
 804100c:	fa02 f303 	lsl.w	r3, r2, r3
 8041010:	69ba      	ldr	r2, [r7, #24]
 8041012:	4313      	orrs	r3, r2
 8041014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8041016:	687b      	ldr	r3, [r7, #4]
 8041018:	69ba      	ldr	r2, [r7, #24]
 804101a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 804101c:	683b      	ldr	r3, [r7, #0]
 804101e:	685b      	ldr	r3, [r3, #4]
 8041020:	f003 0303 	and.w	r3, r3, #3
 8041024:	2b02      	cmp	r3, #2
 8041026:	d123      	bne.n	8041070 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8041028:	69fb      	ldr	r3, [r7, #28]
 804102a:	08da      	lsrs	r2, r3, #3
 804102c:	687b      	ldr	r3, [r7, #4]
 804102e:	3208      	adds	r2, #8
 8041030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8041036:	69fb      	ldr	r3, [r7, #28]
 8041038:	f003 0307 	and.w	r3, r3, #7
 804103c:	009b      	lsls	r3, r3, #2
 804103e:	220f      	movs	r2, #15
 8041040:	fa02 f303 	lsl.w	r3, r2, r3
 8041044:	43db      	mvns	r3, r3
 8041046:	69ba      	ldr	r2, [r7, #24]
 8041048:	4013      	ands	r3, r2
 804104a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 804104c:	683b      	ldr	r3, [r7, #0]
 804104e:	691a      	ldr	r2, [r3, #16]
 8041050:	69fb      	ldr	r3, [r7, #28]
 8041052:	f003 0307 	and.w	r3, r3, #7
 8041056:	009b      	lsls	r3, r3, #2
 8041058:	fa02 f303 	lsl.w	r3, r2, r3
 804105c:	69ba      	ldr	r2, [r7, #24]
 804105e:	4313      	orrs	r3, r2
 8041060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8041062:	69fb      	ldr	r3, [r7, #28]
 8041064:	08da      	lsrs	r2, r3, #3
 8041066:	687b      	ldr	r3, [r7, #4]
 8041068:	3208      	adds	r2, #8
 804106a:	69b9      	ldr	r1, [r7, #24]
 804106c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041070:	687b      	ldr	r3, [r7, #4]
 8041072:	681b      	ldr	r3, [r3, #0]
 8041074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8041076:	69fb      	ldr	r3, [r7, #28]
 8041078:	005b      	lsls	r3, r3, #1
 804107a:	2203      	movs	r2, #3
 804107c:	fa02 f303 	lsl.w	r3, r2, r3
 8041080:	43db      	mvns	r3, r3
 8041082:	69ba      	ldr	r2, [r7, #24]
 8041084:	4013      	ands	r3, r2
 8041086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8041088:	683b      	ldr	r3, [r7, #0]
 804108a:	685b      	ldr	r3, [r3, #4]
 804108c:	f003 0203 	and.w	r2, r3, #3
 8041090:	69fb      	ldr	r3, [r7, #28]
 8041092:	005b      	lsls	r3, r3, #1
 8041094:	fa02 f303 	lsl.w	r3, r2, r3
 8041098:	69ba      	ldr	r2, [r7, #24]
 804109a:	4313      	orrs	r3, r2
 804109c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 804109e:	687b      	ldr	r3, [r7, #4]
 80410a0:	69ba      	ldr	r2, [r7, #24]
 80410a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80410a4:	683b      	ldr	r3, [r7, #0]
 80410a6:	685b      	ldr	r3, [r3, #4]
 80410a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80410ac:	2b00      	cmp	r3, #0
 80410ae:	f000 80be 	beq.w	804122e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80410b2:	4b66      	ldr	r3, [pc, #408]	@ (804124c <HAL_GPIO_Init+0x324>)
 80410b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80410b6:	4a65      	ldr	r2, [pc, #404]	@ (804124c <HAL_GPIO_Init+0x324>)
 80410b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80410bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80410be:	4b63      	ldr	r3, [pc, #396]	@ (804124c <HAL_GPIO_Init+0x324>)
 80410c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80410c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80410c6:	60fb      	str	r3, [r7, #12]
 80410c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80410ca:	4a61      	ldr	r2, [pc, #388]	@ (8041250 <HAL_GPIO_Init+0x328>)
 80410cc:	69fb      	ldr	r3, [r7, #28]
 80410ce:	089b      	lsrs	r3, r3, #2
 80410d0:	3302      	adds	r3, #2
 80410d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80410d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80410d8:	69fb      	ldr	r3, [r7, #28]
 80410da:	f003 0303 	and.w	r3, r3, #3
 80410de:	009b      	lsls	r3, r3, #2
 80410e0:	220f      	movs	r2, #15
 80410e2:	fa02 f303 	lsl.w	r3, r2, r3
 80410e6:	43db      	mvns	r3, r3
 80410e8:	69ba      	ldr	r2, [r7, #24]
 80410ea:	4013      	ands	r3, r2
 80410ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80410ee:	687b      	ldr	r3, [r7, #4]
 80410f0:	4a58      	ldr	r2, [pc, #352]	@ (8041254 <HAL_GPIO_Init+0x32c>)
 80410f2:	4293      	cmp	r3, r2
 80410f4:	d037      	beq.n	8041166 <HAL_GPIO_Init+0x23e>
 80410f6:	687b      	ldr	r3, [r7, #4]
 80410f8:	4a57      	ldr	r2, [pc, #348]	@ (8041258 <HAL_GPIO_Init+0x330>)
 80410fa:	4293      	cmp	r3, r2
 80410fc:	d031      	beq.n	8041162 <HAL_GPIO_Init+0x23a>
 80410fe:	687b      	ldr	r3, [r7, #4]
 8041100:	4a56      	ldr	r2, [pc, #344]	@ (804125c <HAL_GPIO_Init+0x334>)
 8041102:	4293      	cmp	r3, r2
 8041104:	d02b      	beq.n	804115e <HAL_GPIO_Init+0x236>
 8041106:	687b      	ldr	r3, [r7, #4]
 8041108:	4a55      	ldr	r2, [pc, #340]	@ (8041260 <HAL_GPIO_Init+0x338>)
 804110a:	4293      	cmp	r3, r2
 804110c:	d025      	beq.n	804115a <HAL_GPIO_Init+0x232>
 804110e:	687b      	ldr	r3, [r7, #4]
 8041110:	4a54      	ldr	r2, [pc, #336]	@ (8041264 <HAL_GPIO_Init+0x33c>)
 8041112:	4293      	cmp	r3, r2
 8041114:	d01f      	beq.n	8041156 <HAL_GPIO_Init+0x22e>
 8041116:	687b      	ldr	r3, [r7, #4]
 8041118:	4a53      	ldr	r2, [pc, #332]	@ (8041268 <HAL_GPIO_Init+0x340>)
 804111a:	4293      	cmp	r3, r2
 804111c:	d019      	beq.n	8041152 <HAL_GPIO_Init+0x22a>
 804111e:	687b      	ldr	r3, [r7, #4]
 8041120:	4a52      	ldr	r2, [pc, #328]	@ (804126c <HAL_GPIO_Init+0x344>)
 8041122:	4293      	cmp	r3, r2
 8041124:	d013      	beq.n	804114e <HAL_GPIO_Init+0x226>
 8041126:	687b      	ldr	r3, [r7, #4]
 8041128:	4a51      	ldr	r2, [pc, #324]	@ (8041270 <HAL_GPIO_Init+0x348>)
 804112a:	4293      	cmp	r3, r2
 804112c:	d00d      	beq.n	804114a <HAL_GPIO_Init+0x222>
 804112e:	687b      	ldr	r3, [r7, #4]
 8041130:	4a50      	ldr	r2, [pc, #320]	@ (8041274 <HAL_GPIO_Init+0x34c>)
 8041132:	4293      	cmp	r3, r2
 8041134:	d007      	beq.n	8041146 <HAL_GPIO_Init+0x21e>
 8041136:	687b      	ldr	r3, [r7, #4]
 8041138:	4a4f      	ldr	r2, [pc, #316]	@ (8041278 <HAL_GPIO_Init+0x350>)
 804113a:	4293      	cmp	r3, r2
 804113c:	d101      	bne.n	8041142 <HAL_GPIO_Init+0x21a>
 804113e:	2309      	movs	r3, #9
 8041140:	e012      	b.n	8041168 <HAL_GPIO_Init+0x240>
 8041142:	230a      	movs	r3, #10
 8041144:	e010      	b.n	8041168 <HAL_GPIO_Init+0x240>
 8041146:	2308      	movs	r3, #8
 8041148:	e00e      	b.n	8041168 <HAL_GPIO_Init+0x240>
 804114a:	2307      	movs	r3, #7
 804114c:	e00c      	b.n	8041168 <HAL_GPIO_Init+0x240>
 804114e:	2306      	movs	r3, #6
 8041150:	e00a      	b.n	8041168 <HAL_GPIO_Init+0x240>
 8041152:	2305      	movs	r3, #5
 8041154:	e008      	b.n	8041168 <HAL_GPIO_Init+0x240>
 8041156:	2304      	movs	r3, #4
 8041158:	e006      	b.n	8041168 <HAL_GPIO_Init+0x240>
 804115a:	2303      	movs	r3, #3
 804115c:	e004      	b.n	8041168 <HAL_GPIO_Init+0x240>
 804115e:	2302      	movs	r3, #2
 8041160:	e002      	b.n	8041168 <HAL_GPIO_Init+0x240>
 8041162:	2301      	movs	r3, #1
 8041164:	e000      	b.n	8041168 <HAL_GPIO_Init+0x240>
 8041166:	2300      	movs	r3, #0
 8041168:	69fa      	ldr	r2, [r7, #28]
 804116a:	f002 0203 	and.w	r2, r2, #3
 804116e:	0092      	lsls	r2, r2, #2
 8041170:	4093      	lsls	r3, r2
 8041172:	69ba      	ldr	r2, [r7, #24]
 8041174:	4313      	orrs	r3, r2
 8041176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8041178:	4935      	ldr	r1, [pc, #212]	@ (8041250 <HAL_GPIO_Init+0x328>)
 804117a:	69fb      	ldr	r3, [r7, #28]
 804117c:	089b      	lsrs	r3, r3, #2
 804117e:	3302      	adds	r3, #2
 8041180:	69ba      	ldr	r2, [r7, #24]
 8041182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8041186:	4b3d      	ldr	r3, [pc, #244]	@ (804127c <HAL_GPIO_Init+0x354>)
 8041188:	689b      	ldr	r3, [r3, #8]
 804118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804118c:	693b      	ldr	r3, [r7, #16]
 804118e:	43db      	mvns	r3, r3
 8041190:	69ba      	ldr	r2, [r7, #24]
 8041192:	4013      	ands	r3, r2
 8041194:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8041196:	683b      	ldr	r3, [r7, #0]
 8041198:	685b      	ldr	r3, [r3, #4]
 804119a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 804119e:	2b00      	cmp	r3, #0
 80411a0:	d003      	beq.n	80411aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80411a2:	69ba      	ldr	r2, [r7, #24]
 80411a4:	693b      	ldr	r3, [r7, #16]
 80411a6:	4313      	orrs	r3, r2
 80411a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80411aa:	4a34      	ldr	r2, [pc, #208]	@ (804127c <HAL_GPIO_Init+0x354>)
 80411ac:	69bb      	ldr	r3, [r7, #24]
 80411ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80411b0:	4b32      	ldr	r3, [pc, #200]	@ (804127c <HAL_GPIO_Init+0x354>)
 80411b2:	68db      	ldr	r3, [r3, #12]
 80411b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80411b6:	693b      	ldr	r3, [r7, #16]
 80411b8:	43db      	mvns	r3, r3
 80411ba:	69ba      	ldr	r2, [r7, #24]
 80411bc:	4013      	ands	r3, r2
 80411be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80411c0:	683b      	ldr	r3, [r7, #0]
 80411c2:	685b      	ldr	r3, [r3, #4]
 80411c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80411c8:	2b00      	cmp	r3, #0
 80411ca:	d003      	beq.n	80411d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80411cc:	69ba      	ldr	r2, [r7, #24]
 80411ce:	693b      	ldr	r3, [r7, #16]
 80411d0:	4313      	orrs	r3, r2
 80411d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80411d4:	4a29      	ldr	r2, [pc, #164]	@ (804127c <HAL_GPIO_Init+0x354>)
 80411d6:	69bb      	ldr	r3, [r7, #24]
 80411d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80411da:	4b28      	ldr	r3, [pc, #160]	@ (804127c <HAL_GPIO_Init+0x354>)
 80411dc:	685b      	ldr	r3, [r3, #4]
 80411de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80411e0:	693b      	ldr	r3, [r7, #16]
 80411e2:	43db      	mvns	r3, r3
 80411e4:	69ba      	ldr	r2, [r7, #24]
 80411e6:	4013      	ands	r3, r2
 80411e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80411ea:	683b      	ldr	r3, [r7, #0]
 80411ec:	685b      	ldr	r3, [r3, #4]
 80411ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80411f2:	2b00      	cmp	r3, #0
 80411f4:	d003      	beq.n	80411fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80411f6:	69ba      	ldr	r2, [r7, #24]
 80411f8:	693b      	ldr	r3, [r7, #16]
 80411fa:	4313      	orrs	r3, r2
 80411fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80411fe:	4a1f      	ldr	r2, [pc, #124]	@ (804127c <HAL_GPIO_Init+0x354>)
 8041200:	69bb      	ldr	r3, [r7, #24]
 8041202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8041204:	4b1d      	ldr	r3, [pc, #116]	@ (804127c <HAL_GPIO_Init+0x354>)
 8041206:	681b      	ldr	r3, [r3, #0]
 8041208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804120a:	693b      	ldr	r3, [r7, #16]
 804120c:	43db      	mvns	r3, r3
 804120e:	69ba      	ldr	r2, [r7, #24]
 8041210:	4013      	ands	r3, r2
 8041212:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8041214:	683b      	ldr	r3, [r7, #0]
 8041216:	685b      	ldr	r3, [r3, #4]
 8041218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 804121c:	2b00      	cmp	r3, #0
 804121e:	d003      	beq.n	8041228 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8041220:	69ba      	ldr	r2, [r7, #24]
 8041222:	693b      	ldr	r3, [r7, #16]
 8041224:	4313      	orrs	r3, r2
 8041226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8041228:	4a14      	ldr	r2, [pc, #80]	@ (804127c <HAL_GPIO_Init+0x354>)
 804122a:	69bb      	ldr	r3, [r7, #24]
 804122c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 804122e:	69fb      	ldr	r3, [r7, #28]
 8041230:	3301      	adds	r3, #1
 8041232:	61fb      	str	r3, [r7, #28]
 8041234:	69fb      	ldr	r3, [r7, #28]
 8041236:	2b0f      	cmp	r3, #15
 8041238:	f67f ae86 	bls.w	8040f48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 804123c:	bf00      	nop
 804123e:	bf00      	nop
 8041240:	3724      	adds	r7, #36	@ 0x24
 8041242:	46bd      	mov	sp, r7
 8041244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041248:	4770      	bx	lr
 804124a:	bf00      	nop
 804124c:	40023800 	.word	0x40023800
 8041250:	40013800 	.word	0x40013800
 8041254:	40020000 	.word	0x40020000
 8041258:	40020400 	.word	0x40020400
 804125c:	40020800 	.word	0x40020800
 8041260:	40020c00 	.word	0x40020c00
 8041264:	40021000 	.word	0x40021000
 8041268:	40021400 	.word	0x40021400
 804126c:	40021800 	.word	0x40021800
 8041270:	40021c00 	.word	0x40021c00
 8041274:	40022000 	.word	0x40022000
 8041278:	40022400 	.word	0x40022400
 804127c:	40013c00 	.word	0x40013c00

08041280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041280:	b480      	push	{r7}
 8041282:	b083      	sub	sp, #12
 8041284:	af00      	add	r7, sp, #0
 8041286:	6078      	str	r0, [r7, #4]
 8041288:	460b      	mov	r3, r1
 804128a:	807b      	strh	r3, [r7, #2]
 804128c:	4613      	mov	r3, r2
 804128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8041290:	787b      	ldrb	r3, [r7, #1]
 8041292:	2b00      	cmp	r3, #0
 8041294:	d003      	beq.n	804129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8041296:	887a      	ldrh	r2, [r7, #2]
 8041298:	687b      	ldr	r3, [r7, #4]
 804129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 804129c:	e003      	b.n	80412a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 804129e:	887b      	ldrh	r3, [r7, #2]
 80412a0:	041a      	lsls	r2, r3, #16
 80412a2:	687b      	ldr	r3, [r7, #4]
 80412a4:	619a      	str	r2, [r3, #24]
}
 80412a6:	bf00      	nop
 80412a8:	370c      	adds	r7, #12
 80412aa:	46bd      	mov	sp, r7
 80412ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412b0:	4770      	bx	lr
	...

080412b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80412b4:	b580      	push	{r7, lr}
 80412b6:	b086      	sub	sp, #24
 80412b8:	af00      	add	r7, sp, #0
 80412ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80412bc:	2300      	movs	r3, #0
 80412be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80412c0:	687b      	ldr	r3, [r7, #4]
 80412c2:	2b00      	cmp	r3, #0
 80412c4:	d101      	bne.n	80412ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80412c6:	2301      	movs	r3, #1
 80412c8:	e29b      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80412ca:	687b      	ldr	r3, [r7, #4]
 80412cc:	681b      	ldr	r3, [r3, #0]
 80412ce:	f003 0301 	and.w	r3, r3, #1
 80412d2:	2b00      	cmp	r3, #0
 80412d4:	f000 8087 	beq.w	80413e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80412d8:	4b96      	ldr	r3, [pc, #600]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 80412da:	689b      	ldr	r3, [r3, #8]
 80412dc:	f003 030c 	and.w	r3, r3, #12
 80412e0:	2b04      	cmp	r3, #4
 80412e2:	d00c      	beq.n	80412fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80412e4:	4b93      	ldr	r3, [pc, #588]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 80412e6:	689b      	ldr	r3, [r3, #8]
 80412e8:	f003 030c 	and.w	r3, r3, #12
 80412ec:	2b08      	cmp	r3, #8
 80412ee:	d112      	bne.n	8041316 <HAL_RCC_OscConfig+0x62>
 80412f0:	4b90      	ldr	r3, [pc, #576]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 80412f2:	685b      	ldr	r3, [r3, #4]
 80412f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80412f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80412fc:	d10b      	bne.n	8041316 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80412fe:	4b8d      	ldr	r3, [pc, #564]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041300:	681b      	ldr	r3, [r3, #0]
 8041302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041306:	2b00      	cmp	r3, #0
 8041308:	d06c      	beq.n	80413e4 <HAL_RCC_OscConfig+0x130>
 804130a:	687b      	ldr	r3, [r7, #4]
 804130c:	685b      	ldr	r3, [r3, #4]
 804130e:	2b00      	cmp	r3, #0
 8041310:	d168      	bne.n	80413e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8041312:	2301      	movs	r3, #1
 8041314:	e275      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041316:	687b      	ldr	r3, [r7, #4]
 8041318:	685b      	ldr	r3, [r3, #4]
 804131a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 804131e:	d106      	bne.n	804132e <HAL_RCC_OscConfig+0x7a>
 8041320:	4b84      	ldr	r3, [pc, #528]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041322:	681b      	ldr	r3, [r3, #0]
 8041324:	4a83      	ldr	r2, [pc, #524]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 804132a:	6013      	str	r3, [r2, #0]
 804132c:	e02e      	b.n	804138c <HAL_RCC_OscConfig+0xd8>
 804132e:	687b      	ldr	r3, [r7, #4]
 8041330:	685b      	ldr	r3, [r3, #4]
 8041332:	2b00      	cmp	r3, #0
 8041334:	d10c      	bne.n	8041350 <HAL_RCC_OscConfig+0x9c>
 8041336:	4b7f      	ldr	r3, [pc, #508]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041338:	681b      	ldr	r3, [r3, #0]
 804133a:	4a7e      	ldr	r2, [pc, #504]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 804133c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041340:	6013      	str	r3, [r2, #0]
 8041342:	4b7c      	ldr	r3, [pc, #496]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041344:	681b      	ldr	r3, [r3, #0]
 8041346:	4a7b      	ldr	r2, [pc, #492]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041348:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 804134c:	6013      	str	r3, [r2, #0]
 804134e:	e01d      	b.n	804138c <HAL_RCC_OscConfig+0xd8>
 8041350:	687b      	ldr	r3, [r7, #4]
 8041352:	685b      	ldr	r3, [r3, #4]
 8041354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8041358:	d10c      	bne.n	8041374 <HAL_RCC_OscConfig+0xc0>
 804135a:	4b76      	ldr	r3, [pc, #472]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 804135c:	681b      	ldr	r3, [r3, #0]
 804135e:	4a75      	ldr	r2, [pc, #468]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8041364:	6013      	str	r3, [r2, #0]
 8041366:	4b73      	ldr	r3, [pc, #460]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041368:	681b      	ldr	r3, [r3, #0]
 804136a:	4a72      	ldr	r2, [pc, #456]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 804136c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8041370:	6013      	str	r3, [r2, #0]
 8041372:	e00b      	b.n	804138c <HAL_RCC_OscConfig+0xd8>
 8041374:	4b6f      	ldr	r3, [pc, #444]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041376:	681b      	ldr	r3, [r3, #0]
 8041378:	4a6e      	ldr	r2, [pc, #440]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 804137a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 804137e:	6013      	str	r3, [r2, #0]
 8041380:	4b6c      	ldr	r3, [pc, #432]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041382:	681b      	ldr	r3, [r3, #0]
 8041384:	4a6b      	ldr	r2, [pc, #428]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 804138a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 804138c:	687b      	ldr	r3, [r7, #4]
 804138e:	685b      	ldr	r3, [r3, #4]
 8041390:	2b00      	cmp	r3, #0
 8041392:	d013      	beq.n	80413bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041394:	f7ff fc3a 	bl	8040c0c <HAL_GetTick>
 8041398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804139a:	e008      	b.n	80413ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804139c:	f7ff fc36 	bl	8040c0c <HAL_GetTick>
 80413a0:	4602      	mov	r2, r0
 80413a2:	693b      	ldr	r3, [r7, #16]
 80413a4:	1ad3      	subs	r3, r2, r3
 80413a6:	2b64      	cmp	r3, #100	@ 0x64
 80413a8:	d901      	bls.n	80413ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80413aa:	2303      	movs	r3, #3
 80413ac:	e229      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80413ae:	4b61      	ldr	r3, [pc, #388]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 80413b0:	681b      	ldr	r3, [r3, #0]
 80413b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80413b6:	2b00      	cmp	r3, #0
 80413b8:	d0f0      	beq.n	804139c <HAL_RCC_OscConfig+0xe8>
 80413ba:	e014      	b.n	80413e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80413bc:	f7ff fc26 	bl	8040c0c <HAL_GetTick>
 80413c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80413c2:	e008      	b.n	80413d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80413c4:	f7ff fc22 	bl	8040c0c <HAL_GetTick>
 80413c8:	4602      	mov	r2, r0
 80413ca:	693b      	ldr	r3, [r7, #16]
 80413cc:	1ad3      	subs	r3, r2, r3
 80413ce:	2b64      	cmp	r3, #100	@ 0x64
 80413d0:	d901      	bls.n	80413d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80413d2:	2303      	movs	r3, #3
 80413d4:	e215      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80413d6:	4b57      	ldr	r3, [pc, #348]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 80413d8:	681b      	ldr	r3, [r3, #0]
 80413da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80413de:	2b00      	cmp	r3, #0
 80413e0:	d1f0      	bne.n	80413c4 <HAL_RCC_OscConfig+0x110>
 80413e2:	e000      	b.n	80413e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80413e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80413e6:	687b      	ldr	r3, [r7, #4]
 80413e8:	681b      	ldr	r3, [r3, #0]
 80413ea:	f003 0302 	and.w	r3, r3, #2
 80413ee:	2b00      	cmp	r3, #0
 80413f0:	d069      	beq.n	80414c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80413f2:	4b50      	ldr	r3, [pc, #320]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 80413f4:	689b      	ldr	r3, [r3, #8]
 80413f6:	f003 030c 	and.w	r3, r3, #12
 80413fa:	2b00      	cmp	r3, #0
 80413fc:	d00b      	beq.n	8041416 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80413fe:	4b4d      	ldr	r3, [pc, #308]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041400:	689b      	ldr	r3, [r3, #8]
 8041402:	f003 030c 	and.w	r3, r3, #12
 8041406:	2b08      	cmp	r3, #8
 8041408:	d11c      	bne.n	8041444 <HAL_RCC_OscConfig+0x190>
 804140a:	4b4a      	ldr	r3, [pc, #296]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 804140c:	685b      	ldr	r3, [r3, #4]
 804140e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8041412:	2b00      	cmp	r3, #0
 8041414:	d116      	bne.n	8041444 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041416:	4b47      	ldr	r3, [pc, #284]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041418:	681b      	ldr	r3, [r3, #0]
 804141a:	f003 0302 	and.w	r3, r3, #2
 804141e:	2b00      	cmp	r3, #0
 8041420:	d005      	beq.n	804142e <HAL_RCC_OscConfig+0x17a>
 8041422:	687b      	ldr	r3, [r7, #4]
 8041424:	68db      	ldr	r3, [r3, #12]
 8041426:	2b01      	cmp	r3, #1
 8041428:	d001      	beq.n	804142e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 804142a:	2301      	movs	r3, #1
 804142c:	e1e9      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804142e:	4b41      	ldr	r3, [pc, #260]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041430:	681b      	ldr	r3, [r3, #0]
 8041432:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8041436:	687b      	ldr	r3, [r7, #4]
 8041438:	691b      	ldr	r3, [r3, #16]
 804143a:	00db      	lsls	r3, r3, #3
 804143c:	493d      	ldr	r1, [pc, #244]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 804143e:	4313      	orrs	r3, r2
 8041440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041442:	e040      	b.n	80414c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8041444:	687b      	ldr	r3, [r7, #4]
 8041446:	68db      	ldr	r3, [r3, #12]
 8041448:	2b00      	cmp	r3, #0
 804144a:	d023      	beq.n	8041494 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 804144c:	4b39      	ldr	r3, [pc, #228]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 804144e:	681b      	ldr	r3, [r3, #0]
 8041450:	4a38      	ldr	r2, [pc, #224]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041452:	f043 0301 	orr.w	r3, r3, #1
 8041456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041458:	f7ff fbd8 	bl	8040c0c <HAL_GetTick>
 804145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804145e:	e008      	b.n	8041472 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041460:	f7ff fbd4 	bl	8040c0c <HAL_GetTick>
 8041464:	4602      	mov	r2, r0
 8041466:	693b      	ldr	r3, [r7, #16]
 8041468:	1ad3      	subs	r3, r2, r3
 804146a:	2b02      	cmp	r3, #2
 804146c:	d901      	bls.n	8041472 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 804146e:	2303      	movs	r3, #3
 8041470:	e1c7      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041472:	4b30      	ldr	r3, [pc, #192]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041474:	681b      	ldr	r3, [r3, #0]
 8041476:	f003 0302 	and.w	r3, r3, #2
 804147a:	2b00      	cmp	r3, #0
 804147c:	d0f0      	beq.n	8041460 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804147e:	4b2d      	ldr	r3, [pc, #180]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041480:	681b      	ldr	r3, [r3, #0]
 8041482:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8041486:	687b      	ldr	r3, [r7, #4]
 8041488:	691b      	ldr	r3, [r3, #16]
 804148a:	00db      	lsls	r3, r3, #3
 804148c:	4929      	ldr	r1, [pc, #164]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 804148e:	4313      	orrs	r3, r2
 8041490:	600b      	str	r3, [r1, #0]
 8041492:	e018      	b.n	80414c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041494:	4b27      	ldr	r3, [pc, #156]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041496:	681b      	ldr	r3, [r3, #0]
 8041498:	4a26      	ldr	r2, [pc, #152]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 804149a:	f023 0301 	bic.w	r3, r3, #1
 804149e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80414a0:	f7ff fbb4 	bl	8040c0c <HAL_GetTick>
 80414a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80414a6:	e008      	b.n	80414ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80414a8:	f7ff fbb0 	bl	8040c0c <HAL_GetTick>
 80414ac:	4602      	mov	r2, r0
 80414ae:	693b      	ldr	r3, [r7, #16]
 80414b0:	1ad3      	subs	r3, r2, r3
 80414b2:	2b02      	cmp	r3, #2
 80414b4:	d901      	bls.n	80414ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80414b6:	2303      	movs	r3, #3
 80414b8:	e1a3      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80414ba:	4b1e      	ldr	r3, [pc, #120]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 80414bc:	681b      	ldr	r3, [r3, #0]
 80414be:	f003 0302 	and.w	r3, r3, #2
 80414c2:	2b00      	cmp	r3, #0
 80414c4:	d1f0      	bne.n	80414a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80414c6:	687b      	ldr	r3, [r7, #4]
 80414c8:	681b      	ldr	r3, [r3, #0]
 80414ca:	f003 0308 	and.w	r3, r3, #8
 80414ce:	2b00      	cmp	r3, #0
 80414d0:	d038      	beq.n	8041544 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80414d2:	687b      	ldr	r3, [r7, #4]
 80414d4:	695b      	ldr	r3, [r3, #20]
 80414d6:	2b00      	cmp	r3, #0
 80414d8:	d019      	beq.n	804150e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80414da:	4b16      	ldr	r3, [pc, #88]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 80414dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80414de:	4a15      	ldr	r2, [pc, #84]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 80414e0:	f043 0301 	orr.w	r3, r3, #1
 80414e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80414e6:	f7ff fb91 	bl	8040c0c <HAL_GetTick>
 80414ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80414ec:	e008      	b.n	8041500 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80414ee:	f7ff fb8d 	bl	8040c0c <HAL_GetTick>
 80414f2:	4602      	mov	r2, r0
 80414f4:	693b      	ldr	r3, [r7, #16]
 80414f6:	1ad3      	subs	r3, r2, r3
 80414f8:	2b02      	cmp	r3, #2
 80414fa:	d901      	bls.n	8041500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80414fc:	2303      	movs	r3, #3
 80414fe:	e180      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8041500:	4b0c      	ldr	r3, [pc, #48]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8041504:	f003 0302 	and.w	r3, r3, #2
 8041508:	2b00      	cmp	r3, #0
 804150a:	d0f0      	beq.n	80414ee <HAL_RCC_OscConfig+0x23a>
 804150c:	e01a      	b.n	8041544 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 804150e:	4b09      	ldr	r3, [pc, #36]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8041512:	4a08      	ldr	r2, [pc, #32]	@ (8041534 <HAL_RCC_OscConfig+0x280>)
 8041514:	f023 0301 	bic.w	r3, r3, #1
 8041518:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804151a:	f7ff fb77 	bl	8040c0c <HAL_GetTick>
 804151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041520:	e00a      	b.n	8041538 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041522:	f7ff fb73 	bl	8040c0c <HAL_GetTick>
 8041526:	4602      	mov	r2, r0
 8041528:	693b      	ldr	r3, [r7, #16]
 804152a:	1ad3      	subs	r3, r2, r3
 804152c:	2b02      	cmp	r3, #2
 804152e:	d903      	bls.n	8041538 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8041530:	2303      	movs	r3, #3
 8041532:	e166      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
 8041534:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041538:	4b92      	ldr	r3, [pc, #584]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 804153a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 804153c:	f003 0302 	and.w	r3, r3, #2
 8041540:	2b00      	cmp	r3, #0
 8041542:	d1ee      	bne.n	8041522 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041544:	687b      	ldr	r3, [r7, #4]
 8041546:	681b      	ldr	r3, [r3, #0]
 8041548:	f003 0304 	and.w	r3, r3, #4
 804154c:	2b00      	cmp	r3, #0
 804154e:	f000 80a4 	beq.w	804169a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041552:	4b8c      	ldr	r3, [pc, #560]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 804155a:	2b00      	cmp	r3, #0
 804155c:	d10d      	bne.n	804157a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 804155e:	4b89      	ldr	r3, [pc, #548]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041562:	4a88      	ldr	r2, [pc, #544]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8041568:	6413      	str	r3, [r2, #64]	@ 0x40
 804156a:	4b86      	ldr	r3, [pc, #536]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 804156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8041572:	60bb      	str	r3, [r7, #8]
 8041574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8041576:	2301      	movs	r3, #1
 8041578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804157a:	4b83      	ldr	r3, [pc, #524]	@ (8041788 <HAL_RCC_OscConfig+0x4d4>)
 804157c:	681b      	ldr	r3, [r3, #0]
 804157e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041582:	2b00      	cmp	r3, #0
 8041584:	d118      	bne.n	80415b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8041586:	4b80      	ldr	r3, [pc, #512]	@ (8041788 <HAL_RCC_OscConfig+0x4d4>)
 8041588:	681b      	ldr	r3, [r3, #0]
 804158a:	4a7f      	ldr	r2, [pc, #508]	@ (8041788 <HAL_RCC_OscConfig+0x4d4>)
 804158c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8041590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041592:	f7ff fb3b 	bl	8040c0c <HAL_GetTick>
 8041596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041598:	e008      	b.n	80415ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804159a:	f7ff fb37 	bl	8040c0c <HAL_GetTick>
 804159e:	4602      	mov	r2, r0
 80415a0:	693b      	ldr	r3, [r7, #16]
 80415a2:	1ad3      	subs	r3, r2, r3
 80415a4:	2b64      	cmp	r3, #100	@ 0x64
 80415a6:	d901      	bls.n	80415ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80415a8:	2303      	movs	r3, #3
 80415aa:	e12a      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80415ac:	4b76      	ldr	r3, [pc, #472]	@ (8041788 <HAL_RCC_OscConfig+0x4d4>)
 80415ae:	681b      	ldr	r3, [r3, #0]
 80415b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80415b4:	2b00      	cmp	r3, #0
 80415b6:	d0f0      	beq.n	804159a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80415b8:	687b      	ldr	r3, [r7, #4]
 80415ba:	689b      	ldr	r3, [r3, #8]
 80415bc:	2b01      	cmp	r3, #1
 80415be:	d106      	bne.n	80415ce <HAL_RCC_OscConfig+0x31a>
 80415c0:	4b70      	ldr	r3, [pc, #448]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80415c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80415c4:	4a6f      	ldr	r2, [pc, #444]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80415c6:	f043 0301 	orr.w	r3, r3, #1
 80415ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80415cc:	e02d      	b.n	804162a <HAL_RCC_OscConfig+0x376>
 80415ce:	687b      	ldr	r3, [r7, #4]
 80415d0:	689b      	ldr	r3, [r3, #8]
 80415d2:	2b00      	cmp	r3, #0
 80415d4:	d10c      	bne.n	80415f0 <HAL_RCC_OscConfig+0x33c>
 80415d6:	4b6b      	ldr	r3, [pc, #428]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80415d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80415da:	4a6a      	ldr	r2, [pc, #424]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80415dc:	f023 0301 	bic.w	r3, r3, #1
 80415e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80415e2:	4b68      	ldr	r3, [pc, #416]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80415e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80415e6:	4a67      	ldr	r2, [pc, #412]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80415e8:	f023 0304 	bic.w	r3, r3, #4
 80415ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80415ee:	e01c      	b.n	804162a <HAL_RCC_OscConfig+0x376>
 80415f0:	687b      	ldr	r3, [r7, #4]
 80415f2:	689b      	ldr	r3, [r3, #8]
 80415f4:	2b05      	cmp	r3, #5
 80415f6:	d10c      	bne.n	8041612 <HAL_RCC_OscConfig+0x35e>
 80415f8:	4b62      	ldr	r3, [pc, #392]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80415fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80415fc:	4a61      	ldr	r2, [pc, #388]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80415fe:	f043 0304 	orr.w	r3, r3, #4
 8041602:	6713      	str	r3, [r2, #112]	@ 0x70
 8041604:	4b5f      	ldr	r3, [pc, #380]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041608:	4a5e      	ldr	r2, [pc, #376]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 804160a:	f043 0301 	orr.w	r3, r3, #1
 804160e:	6713      	str	r3, [r2, #112]	@ 0x70
 8041610:	e00b      	b.n	804162a <HAL_RCC_OscConfig+0x376>
 8041612:	4b5c      	ldr	r3, [pc, #368]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041616:	4a5b      	ldr	r2, [pc, #364]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041618:	f023 0301 	bic.w	r3, r3, #1
 804161c:	6713      	str	r3, [r2, #112]	@ 0x70
 804161e:	4b59      	ldr	r3, [pc, #356]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041622:	4a58      	ldr	r2, [pc, #352]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041624:	f023 0304 	bic.w	r3, r3, #4
 8041628:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 804162a:	687b      	ldr	r3, [r7, #4]
 804162c:	689b      	ldr	r3, [r3, #8]
 804162e:	2b00      	cmp	r3, #0
 8041630:	d015      	beq.n	804165e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041632:	f7ff faeb 	bl	8040c0c <HAL_GetTick>
 8041636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041638:	e00a      	b.n	8041650 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804163a:	f7ff fae7 	bl	8040c0c <HAL_GetTick>
 804163e:	4602      	mov	r2, r0
 8041640:	693b      	ldr	r3, [r7, #16]
 8041642:	1ad3      	subs	r3, r2, r3
 8041644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041648:	4293      	cmp	r3, r2
 804164a:	d901      	bls.n	8041650 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 804164c:	2303      	movs	r3, #3
 804164e:	e0d8      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041650:	4b4c      	ldr	r3, [pc, #304]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041654:	f003 0302 	and.w	r3, r3, #2
 8041658:	2b00      	cmp	r3, #0
 804165a:	d0ee      	beq.n	804163a <HAL_RCC_OscConfig+0x386>
 804165c:	e014      	b.n	8041688 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804165e:	f7ff fad5 	bl	8040c0c <HAL_GetTick>
 8041662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041664:	e00a      	b.n	804167c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041666:	f7ff fad1 	bl	8040c0c <HAL_GetTick>
 804166a:	4602      	mov	r2, r0
 804166c:	693b      	ldr	r3, [r7, #16]
 804166e:	1ad3      	subs	r3, r2, r3
 8041670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041674:	4293      	cmp	r3, r2
 8041676:	d901      	bls.n	804167c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8041678:	2303      	movs	r3, #3
 804167a:	e0c2      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804167c:	4b41      	ldr	r3, [pc, #260]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 804167e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041680:	f003 0302 	and.w	r3, r3, #2
 8041684:	2b00      	cmp	r3, #0
 8041686:	d1ee      	bne.n	8041666 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041688:	7dfb      	ldrb	r3, [r7, #23]
 804168a:	2b01      	cmp	r3, #1
 804168c:	d105      	bne.n	804169a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 804168e:	4b3d      	ldr	r3, [pc, #244]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041692:	4a3c      	ldr	r2, [pc, #240]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8041698:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 804169a:	687b      	ldr	r3, [r7, #4]
 804169c:	699b      	ldr	r3, [r3, #24]
 804169e:	2b00      	cmp	r3, #0
 80416a0:	f000 80ae 	beq.w	8041800 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80416a4:	4b37      	ldr	r3, [pc, #220]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80416a6:	689b      	ldr	r3, [r3, #8]
 80416a8:	f003 030c 	and.w	r3, r3, #12
 80416ac:	2b08      	cmp	r3, #8
 80416ae:	d06d      	beq.n	804178c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80416b0:	687b      	ldr	r3, [r7, #4]
 80416b2:	699b      	ldr	r3, [r3, #24]
 80416b4:	2b02      	cmp	r3, #2
 80416b6:	d14b      	bne.n	8041750 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80416b8:	4b32      	ldr	r3, [pc, #200]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80416ba:	681b      	ldr	r3, [r3, #0]
 80416bc:	4a31      	ldr	r2, [pc, #196]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80416be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80416c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80416c4:	f7ff faa2 	bl	8040c0c <HAL_GetTick>
 80416c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80416ca:	e008      	b.n	80416de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80416cc:	f7ff fa9e 	bl	8040c0c <HAL_GetTick>
 80416d0:	4602      	mov	r2, r0
 80416d2:	693b      	ldr	r3, [r7, #16]
 80416d4:	1ad3      	subs	r3, r2, r3
 80416d6:	2b02      	cmp	r3, #2
 80416d8:	d901      	bls.n	80416de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80416da:	2303      	movs	r3, #3
 80416dc:	e091      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80416de:	4b29      	ldr	r3, [pc, #164]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 80416e0:	681b      	ldr	r3, [r3, #0]
 80416e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80416e6:	2b00      	cmp	r3, #0
 80416e8:	d1f0      	bne.n	80416cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80416ea:	687b      	ldr	r3, [r7, #4]
 80416ec:	69da      	ldr	r2, [r3, #28]
 80416ee:	687b      	ldr	r3, [r7, #4]
 80416f0:	6a1b      	ldr	r3, [r3, #32]
 80416f2:	431a      	orrs	r2, r3
 80416f4:	687b      	ldr	r3, [r7, #4]
 80416f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80416f8:	019b      	lsls	r3, r3, #6
 80416fa:	431a      	orrs	r2, r3
 80416fc:	687b      	ldr	r3, [r7, #4]
 80416fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8041700:	085b      	lsrs	r3, r3, #1
 8041702:	3b01      	subs	r3, #1
 8041704:	041b      	lsls	r3, r3, #16
 8041706:	431a      	orrs	r2, r3
 8041708:	687b      	ldr	r3, [r7, #4]
 804170a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804170c:	061b      	lsls	r3, r3, #24
 804170e:	431a      	orrs	r2, r3
 8041710:	687b      	ldr	r3, [r7, #4]
 8041712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041714:	071b      	lsls	r3, r3, #28
 8041716:	491b      	ldr	r1, [pc, #108]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041718:	4313      	orrs	r3, r2
 804171a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 804171c:	4b19      	ldr	r3, [pc, #100]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 804171e:	681b      	ldr	r3, [r3, #0]
 8041720:	4a18      	ldr	r2, [pc, #96]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8041726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041728:	f7ff fa70 	bl	8040c0c <HAL_GetTick>
 804172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804172e:	e008      	b.n	8041742 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041730:	f7ff fa6c 	bl	8040c0c <HAL_GetTick>
 8041734:	4602      	mov	r2, r0
 8041736:	693b      	ldr	r3, [r7, #16]
 8041738:	1ad3      	subs	r3, r2, r3
 804173a:	2b02      	cmp	r3, #2
 804173c:	d901      	bls.n	8041742 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 804173e:	2303      	movs	r3, #3
 8041740:	e05f      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041742:	4b10      	ldr	r3, [pc, #64]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041744:	681b      	ldr	r3, [r3, #0]
 8041746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804174a:	2b00      	cmp	r3, #0
 804174c:	d0f0      	beq.n	8041730 <HAL_RCC_OscConfig+0x47c>
 804174e:	e057      	b.n	8041800 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041750:	4b0c      	ldr	r3, [pc, #48]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041752:	681b      	ldr	r3, [r3, #0]
 8041754:	4a0b      	ldr	r2, [pc, #44]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 804175a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804175c:	f7ff fa56 	bl	8040c0c <HAL_GetTick>
 8041760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041762:	e008      	b.n	8041776 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041764:	f7ff fa52 	bl	8040c0c <HAL_GetTick>
 8041768:	4602      	mov	r2, r0
 804176a:	693b      	ldr	r3, [r7, #16]
 804176c:	1ad3      	subs	r3, r2, r3
 804176e:	2b02      	cmp	r3, #2
 8041770:	d901      	bls.n	8041776 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8041772:	2303      	movs	r3, #3
 8041774:	e045      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041776:	4b03      	ldr	r3, [pc, #12]	@ (8041784 <HAL_RCC_OscConfig+0x4d0>)
 8041778:	681b      	ldr	r3, [r3, #0]
 804177a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804177e:	2b00      	cmp	r3, #0
 8041780:	d1f0      	bne.n	8041764 <HAL_RCC_OscConfig+0x4b0>
 8041782:	e03d      	b.n	8041800 <HAL_RCC_OscConfig+0x54c>
 8041784:	40023800 	.word	0x40023800
 8041788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 804178c:	4b1f      	ldr	r3, [pc, #124]	@ (804180c <HAL_RCC_OscConfig+0x558>)
 804178e:	685b      	ldr	r3, [r3, #4]
 8041790:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041792:	687b      	ldr	r3, [r7, #4]
 8041794:	699b      	ldr	r3, [r3, #24]
 8041796:	2b01      	cmp	r3, #1
 8041798:	d030      	beq.n	80417fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804179a:	68fb      	ldr	r3, [r7, #12]
 804179c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80417a0:	687b      	ldr	r3, [r7, #4]
 80417a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80417a4:	429a      	cmp	r2, r3
 80417a6:	d129      	bne.n	80417fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80417a8:	68fb      	ldr	r3, [r7, #12]
 80417aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80417ae:	687b      	ldr	r3, [r7, #4]
 80417b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80417b2:	429a      	cmp	r2, r3
 80417b4:	d122      	bne.n	80417fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80417b6:	68fa      	ldr	r2, [r7, #12]
 80417b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80417bc:	4013      	ands	r3, r2
 80417be:	687a      	ldr	r2, [r7, #4]
 80417c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80417c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80417c4:	4293      	cmp	r3, r2
 80417c6:	d119      	bne.n	80417fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80417c8:	68fb      	ldr	r3, [r7, #12]
 80417ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80417ce:	687b      	ldr	r3, [r7, #4]
 80417d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80417d2:	085b      	lsrs	r3, r3, #1
 80417d4:	3b01      	subs	r3, #1
 80417d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80417d8:	429a      	cmp	r2, r3
 80417da:	d10f      	bne.n	80417fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80417dc:	68fb      	ldr	r3, [r7, #12]
 80417de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80417e2:	687b      	ldr	r3, [r7, #4]
 80417e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80417e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80417e8:	429a      	cmp	r2, r3
 80417ea:	d107      	bne.n	80417fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80417ec:	68fb      	ldr	r3, [r7, #12]
 80417ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80417f2:	687b      	ldr	r3, [r7, #4]
 80417f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80417f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80417f8:	429a      	cmp	r2, r3
 80417fa:	d001      	beq.n	8041800 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80417fc:	2301      	movs	r3, #1
 80417fe:	e000      	b.n	8041802 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8041800:	2300      	movs	r3, #0
}
 8041802:	4618      	mov	r0, r3
 8041804:	3718      	adds	r7, #24
 8041806:	46bd      	mov	sp, r7
 8041808:	bd80      	pop	{r7, pc}
 804180a:	bf00      	nop
 804180c:	40023800 	.word	0x40023800

08041810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041810:	b580      	push	{r7, lr}
 8041812:	b084      	sub	sp, #16
 8041814:	af00      	add	r7, sp, #0
 8041816:	6078      	str	r0, [r7, #4]
 8041818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 804181a:	2300      	movs	r3, #0
 804181c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804181e:	687b      	ldr	r3, [r7, #4]
 8041820:	2b00      	cmp	r3, #0
 8041822:	d101      	bne.n	8041828 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8041824:	2301      	movs	r3, #1
 8041826:	e0d0      	b.n	80419ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8041828:	4b6a      	ldr	r3, [pc, #424]	@ (80419d4 <HAL_RCC_ClockConfig+0x1c4>)
 804182a:	681b      	ldr	r3, [r3, #0]
 804182c:	f003 030f 	and.w	r3, r3, #15
 8041830:	683a      	ldr	r2, [r7, #0]
 8041832:	429a      	cmp	r2, r3
 8041834:	d910      	bls.n	8041858 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041836:	4b67      	ldr	r3, [pc, #412]	@ (80419d4 <HAL_RCC_ClockConfig+0x1c4>)
 8041838:	681b      	ldr	r3, [r3, #0]
 804183a:	f023 020f 	bic.w	r2, r3, #15
 804183e:	4965      	ldr	r1, [pc, #404]	@ (80419d4 <HAL_RCC_ClockConfig+0x1c4>)
 8041840:	683b      	ldr	r3, [r7, #0]
 8041842:	4313      	orrs	r3, r2
 8041844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041846:	4b63      	ldr	r3, [pc, #396]	@ (80419d4 <HAL_RCC_ClockConfig+0x1c4>)
 8041848:	681b      	ldr	r3, [r3, #0]
 804184a:	f003 030f 	and.w	r3, r3, #15
 804184e:	683a      	ldr	r2, [r7, #0]
 8041850:	429a      	cmp	r2, r3
 8041852:	d001      	beq.n	8041858 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041854:	2301      	movs	r3, #1
 8041856:	e0b8      	b.n	80419ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041858:	687b      	ldr	r3, [r7, #4]
 804185a:	681b      	ldr	r3, [r3, #0]
 804185c:	f003 0302 	and.w	r3, r3, #2
 8041860:	2b00      	cmp	r3, #0
 8041862:	d020      	beq.n	80418a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041864:	687b      	ldr	r3, [r7, #4]
 8041866:	681b      	ldr	r3, [r3, #0]
 8041868:	f003 0304 	and.w	r3, r3, #4
 804186c:	2b00      	cmp	r3, #0
 804186e:	d005      	beq.n	804187c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8041870:	4b59      	ldr	r3, [pc, #356]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 8041872:	689b      	ldr	r3, [r3, #8]
 8041874:	4a58      	ldr	r2, [pc, #352]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 8041876:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 804187a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804187c:	687b      	ldr	r3, [r7, #4]
 804187e:	681b      	ldr	r3, [r3, #0]
 8041880:	f003 0308 	and.w	r3, r3, #8
 8041884:	2b00      	cmp	r3, #0
 8041886:	d005      	beq.n	8041894 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8041888:	4b53      	ldr	r3, [pc, #332]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 804188a:	689b      	ldr	r3, [r3, #8]
 804188c:	4a52      	ldr	r2, [pc, #328]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 804188e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8041892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041894:	4b50      	ldr	r3, [pc, #320]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 8041896:	689b      	ldr	r3, [r3, #8]
 8041898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 804189c:	687b      	ldr	r3, [r7, #4]
 804189e:	689b      	ldr	r3, [r3, #8]
 80418a0:	494d      	ldr	r1, [pc, #308]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 80418a2:	4313      	orrs	r3, r2
 80418a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80418a6:	687b      	ldr	r3, [r7, #4]
 80418a8:	681b      	ldr	r3, [r3, #0]
 80418aa:	f003 0301 	and.w	r3, r3, #1
 80418ae:	2b00      	cmp	r3, #0
 80418b0:	d040      	beq.n	8041934 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80418b2:	687b      	ldr	r3, [r7, #4]
 80418b4:	685b      	ldr	r3, [r3, #4]
 80418b6:	2b01      	cmp	r3, #1
 80418b8:	d107      	bne.n	80418ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80418ba:	4b47      	ldr	r3, [pc, #284]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 80418bc:	681b      	ldr	r3, [r3, #0]
 80418be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80418c2:	2b00      	cmp	r3, #0
 80418c4:	d115      	bne.n	80418f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80418c6:	2301      	movs	r3, #1
 80418c8:	e07f      	b.n	80419ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80418ca:	687b      	ldr	r3, [r7, #4]
 80418cc:	685b      	ldr	r3, [r3, #4]
 80418ce:	2b02      	cmp	r3, #2
 80418d0:	d107      	bne.n	80418e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80418d2:	4b41      	ldr	r3, [pc, #260]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 80418d4:	681b      	ldr	r3, [r3, #0]
 80418d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80418da:	2b00      	cmp	r3, #0
 80418dc:	d109      	bne.n	80418f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80418de:	2301      	movs	r3, #1
 80418e0:	e073      	b.n	80419ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80418e2:	4b3d      	ldr	r3, [pc, #244]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 80418e4:	681b      	ldr	r3, [r3, #0]
 80418e6:	f003 0302 	and.w	r3, r3, #2
 80418ea:	2b00      	cmp	r3, #0
 80418ec:	d101      	bne.n	80418f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80418ee:	2301      	movs	r3, #1
 80418f0:	e06b      	b.n	80419ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80418f2:	4b39      	ldr	r3, [pc, #228]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 80418f4:	689b      	ldr	r3, [r3, #8]
 80418f6:	f023 0203 	bic.w	r2, r3, #3
 80418fa:	687b      	ldr	r3, [r7, #4]
 80418fc:	685b      	ldr	r3, [r3, #4]
 80418fe:	4936      	ldr	r1, [pc, #216]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 8041900:	4313      	orrs	r3, r2
 8041902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041904:	f7ff f982 	bl	8040c0c <HAL_GetTick>
 8041908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804190a:	e00a      	b.n	8041922 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804190c:	f7ff f97e 	bl	8040c0c <HAL_GetTick>
 8041910:	4602      	mov	r2, r0
 8041912:	68fb      	ldr	r3, [r7, #12]
 8041914:	1ad3      	subs	r3, r2, r3
 8041916:	f241 3288 	movw	r2, #5000	@ 0x1388
 804191a:	4293      	cmp	r3, r2
 804191c:	d901      	bls.n	8041922 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 804191e:	2303      	movs	r3, #3
 8041920:	e053      	b.n	80419ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041922:	4b2d      	ldr	r3, [pc, #180]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 8041924:	689b      	ldr	r3, [r3, #8]
 8041926:	f003 020c 	and.w	r2, r3, #12
 804192a:	687b      	ldr	r3, [r7, #4]
 804192c:	685b      	ldr	r3, [r3, #4]
 804192e:	009b      	lsls	r3, r3, #2
 8041930:	429a      	cmp	r2, r3
 8041932:	d1eb      	bne.n	804190c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8041934:	4b27      	ldr	r3, [pc, #156]	@ (80419d4 <HAL_RCC_ClockConfig+0x1c4>)
 8041936:	681b      	ldr	r3, [r3, #0]
 8041938:	f003 030f 	and.w	r3, r3, #15
 804193c:	683a      	ldr	r2, [r7, #0]
 804193e:	429a      	cmp	r2, r3
 8041940:	d210      	bcs.n	8041964 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041942:	4b24      	ldr	r3, [pc, #144]	@ (80419d4 <HAL_RCC_ClockConfig+0x1c4>)
 8041944:	681b      	ldr	r3, [r3, #0]
 8041946:	f023 020f 	bic.w	r2, r3, #15
 804194a:	4922      	ldr	r1, [pc, #136]	@ (80419d4 <HAL_RCC_ClockConfig+0x1c4>)
 804194c:	683b      	ldr	r3, [r7, #0]
 804194e:	4313      	orrs	r3, r2
 8041950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041952:	4b20      	ldr	r3, [pc, #128]	@ (80419d4 <HAL_RCC_ClockConfig+0x1c4>)
 8041954:	681b      	ldr	r3, [r3, #0]
 8041956:	f003 030f 	and.w	r3, r3, #15
 804195a:	683a      	ldr	r2, [r7, #0]
 804195c:	429a      	cmp	r2, r3
 804195e:	d001      	beq.n	8041964 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8041960:	2301      	movs	r3, #1
 8041962:	e032      	b.n	80419ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041964:	687b      	ldr	r3, [r7, #4]
 8041966:	681b      	ldr	r3, [r3, #0]
 8041968:	f003 0304 	and.w	r3, r3, #4
 804196c:	2b00      	cmp	r3, #0
 804196e:	d008      	beq.n	8041982 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8041970:	4b19      	ldr	r3, [pc, #100]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 8041972:	689b      	ldr	r3, [r3, #8]
 8041974:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8041978:	687b      	ldr	r3, [r7, #4]
 804197a:	68db      	ldr	r3, [r3, #12]
 804197c:	4916      	ldr	r1, [pc, #88]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 804197e:	4313      	orrs	r3, r2
 8041980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041982:	687b      	ldr	r3, [r7, #4]
 8041984:	681b      	ldr	r3, [r3, #0]
 8041986:	f003 0308 	and.w	r3, r3, #8
 804198a:	2b00      	cmp	r3, #0
 804198c:	d009      	beq.n	80419a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 804198e:	4b12      	ldr	r3, [pc, #72]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 8041990:	689b      	ldr	r3, [r3, #8]
 8041992:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8041996:	687b      	ldr	r3, [r7, #4]
 8041998:	691b      	ldr	r3, [r3, #16]
 804199a:	00db      	lsls	r3, r3, #3
 804199c:	490e      	ldr	r1, [pc, #56]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 804199e:	4313      	orrs	r3, r2
 80419a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80419a2:	f000 f821 	bl	80419e8 <HAL_RCC_GetSysClockFreq>
 80419a6:	4602      	mov	r2, r0
 80419a8:	4b0b      	ldr	r3, [pc, #44]	@ (80419d8 <HAL_RCC_ClockConfig+0x1c8>)
 80419aa:	689b      	ldr	r3, [r3, #8]
 80419ac:	091b      	lsrs	r3, r3, #4
 80419ae:	f003 030f 	and.w	r3, r3, #15
 80419b2:	490a      	ldr	r1, [pc, #40]	@ (80419dc <HAL_RCC_ClockConfig+0x1cc>)
 80419b4:	5ccb      	ldrb	r3, [r1, r3]
 80419b6:	fa22 f303 	lsr.w	r3, r2, r3
 80419ba:	4a09      	ldr	r2, [pc, #36]	@ (80419e0 <HAL_RCC_ClockConfig+0x1d0>)
 80419bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80419be:	4b09      	ldr	r3, [pc, #36]	@ (80419e4 <HAL_RCC_ClockConfig+0x1d4>)
 80419c0:	681b      	ldr	r3, [r3, #0]
 80419c2:	4618      	mov	r0, r3
 80419c4:	f7ff f8de 	bl	8040b84 <HAL_InitTick>

  return HAL_OK;
 80419c8:	2300      	movs	r3, #0
}
 80419ca:	4618      	mov	r0, r3
 80419cc:	3710      	adds	r7, #16
 80419ce:	46bd      	mov	sp, r7
 80419d0:	bd80      	pop	{r7, pc}
 80419d2:	bf00      	nop
 80419d4:	40023c00 	.word	0x40023c00
 80419d8:	40023800 	.word	0x40023800
 80419dc:	08043d70 	.word	0x08043d70
 80419e0:	20000000 	.word	0x20000000
 80419e4:	20000004 	.word	0x20000004

080419e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80419e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80419ec:	b090      	sub	sp, #64	@ 0x40
 80419ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80419f0:	2300      	movs	r3, #0
 80419f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80419f4:	2300      	movs	r3, #0
 80419f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80419f8:	2300      	movs	r3, #0
 80419fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80419fc:	2300      	movs	r3, #0
 80419fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8041a00:	4b59      	ldr	r3, [pc, #356]	@ (8041b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8041a02:	689b      	ldr	r3, [r3, #8]
 8041a04:	f003 030c 	and.w	r3, r3, #12
 8041a08:	2b08      	cmp	r3, #8
 8041a0a:	d00d      	beq.n	8041a28 <HAL_RCC_GetSysClockFreq+0x40>
 8041a0c:	2b08      	cmp	r3, #8
 8041a0e:	f200 80a1 	bhi.w	8041b54 <HAL_RCC_GetSysClockFreq+0x16c>
 8041a12:	2b00      	cmp	r3, #0
 8041a14:	d002      	beq.n	8041a1c <HAL_RCC_GetSysClockFreq+0x34>
 8041a16:	2b04      	cmp	r3, #4
 8041a18:	d003      	beq.n	8041a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8041a1a:	e09b      	b.n	8041b54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8041a1c:	4b53      	ldr	r3, [pc, #332]	@ (8041b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8041a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8041a20:	e09b      	b.n	8041b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8041a22:	4b53      	ldr	r3, [pc, #332]	@ (8041b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8041a24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8041a26:	e098      	b.n	8041b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8041a28:	4b4f      	ldr	r3, [pc, #316]	@ (8041b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8041a2a:	685b      	ldr	r3, [r3, #4]
 8041a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8041a30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8041a32:	4b4d      	ldr	r3, [pc, #308]	@ (8041b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8041a34:	685b      	ldr	r3, [r3, #4]
 8041a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8041a3a:	2b00      	cmp	r3, #0
 8041a3c:	d028      	beq.n	8041a90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8041a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8041b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8041a40:	685b      	ldr	r3, [r3, #4]
 8041a42:	099b      	lsrs	r3, r3, #6
 8041a44:	2200      	movs	r2, #0
 8041a46:	623b      	str	r3, [r7, #32]
 8041a48:	627a      	str	r2, [r7, #36]	@ 0x24
 8041a4a:	6a3b      	ldr	r3, [r7, #32]
 8041a4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8041a50:	2100      	movs	r1, #0
 8041a52:	4b47      	ldr	r3, [pc, #284]	@ (8041b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8041a54:	fb03 f201 	mul.w	r2, r3, r1
 8041a58:	2300      	movs	r3, #0
 8041a5a:	fb00 f303 	mul.w	r3, r0, r3
 8041a5e:	4413      	add	r3, r2
 8041a60:	4a43      	ldr	r2, [pc, #268]	@ (8041b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8041a62:	fba0 1202 	umull	r1, r2, r0, r2
 8041a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8041a68:	460a      	mov	r2, r1
 8041a6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8041a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8041a6e:	4413      	add	r3, r2
 8041a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8041a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8041a74:	2200      	movs	r2, #0
 8041a76:	61bb      	str	r3, [r7, #24]
 8041a78:	61fa      	str	r2, [r7, #28]
 8041a7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8041a7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8041a82:	f7fe fc2d 	bl	80402e0 <__aeabi_uldivmod>
 8041a86:	4602      	mov	r2, r0
 8041a88:	460b      	mov	r3, r1
 8041a8a:	4613      	mov	r3, r2
 8041a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8041a8e:	e053      	b.n	8041b38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8041a90:	4b35      	ldr	r3, [pc, #212]	@ (8041b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8041a92:	685b      	ldr	r3, [r3, #4]
 8041a94:	099b      	lsrs	r3, r3, #6
 8041a96:	2200      	movs	r2, #0
 8041a98:	613b      	str	r3, [r7, #16]
 8041a9a:	617a      	str	r2, [r7, #20]
 8041a9c:	693b      	ldr	r3, [r7, #16]
 8041a9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8041aa2:	f04f 0b00 	mov.w	fp, #0
 8041aa6:	4652      	mov	r2, sl
 8041aa8:	465b      	mov	r3, fp
 8041aaa:	f04f 0000 	mov.w	r0, #0
 8041aae:	f04f 0100 	mov.w	r1, #0
 8041ab2:	0159      	lsls	r1, r3, #5
 8041ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8041ab8:	0150      	lsls	r0, r2, #5
 8041aba:	4602      	mov	r2, r0
 8041abc:	460b      	mov	r3, r1
 8041abe:	ebb2 080a 	subs.w	r8, r2, sl
 8041ac2:	eb63 090b 	sbc.w	r9, r3, fp
 8041ac6:	f04f 0200 	mov.w	r2, #0
 8041aca:	f04f 0300 	mov.w	r3, #0
 8041ace:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8041ad2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8041ad6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8041ada:	ebb2 0408 	subs.w	r4, r2, r8
 8041ade:	eb63 0509 	sbc.w	r5, r3, r9
 8041ae2:	f04f 0200 	mov.w	r2, #0
 8041ae6:	f04f 0300 	mov.w	r3, #0
 8041aea:	00eb      	lsls	r3, r5, #3
 8041aec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8041af0:	00e2      	lsls	r2, r4, #3
 8041af2:	4614      	mov	r4, r2
 8041af4:	461d      	mov	r5, r3
 8041af6:	eb14 030a 	adds.w	r3, r4, sl
 8041afa:	603b      	str	r3, [r7, #0]
 8041afc:	eb45 030b 	adc.w	r3, r5, fp
 8041b00:	607b      	str	r3, [r7, #4]
 8041b02:	f04f 0200 	mov.w	r2, #0
 8041b06:	f04f 0300 	mov.w	r3, #0
 8041b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8041b0e:	4629      	mov	r1, r5
 8041b10:	028b      	lsls	r3, r1, #10
 8041b12:	4621      	mov	r1, r4
 8041b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8041b18:	4621      	mov	r1, r4
 8041b1a:	028a      	lsls	r2, r1, #10
 8041b1c:	4610      	mov	r0, r2
 8041b1e:	4619      	mov	r1, r3
 8041b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8041b22:	2200      	movs	r2, #0
 8041b24:	60bb      	str	r3, [r7, #8]
 8041b26:	60fa      	str	r2, [r7, #12]
 8041b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8041b2c:	f7fe fbd8 	bl	80402e0 <__aeabi_uldivmod>
 8041b30:	4602      	mov	r2, r0
 8041b32:	460b      	mov	r3, r1
 8041b34:	4613      	mov	r3, r2
 8041b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8041b38:	4b0b      	ldr	r3, [pc, #44]	@ (8041b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8041b3a:	685b      	ldr	r3, [r3, #4]
 8041b3c:	0c1b      	lsrs	r3, r3, #16
 8041b3e:	f003 0303 	and.w	r3, r3, #3
 8041b42:	3301      	adds	r3, #1
 8041b44:	005b      	lsls	r3, r3, #1
 8041b46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8041b48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8041b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8041b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8041b50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8041b52:	e002      	b.n	8041b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8041b54:	4b05      	ldr	r3, [pc, #20]	@ (8041b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8041b56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8041b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8041b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8041b5c:	4618      	mov	r0, r3
 8041b5e:	3740      	adds	r7, #64	@ 0x40
 8041b60:	46bd      	mov	sp, r7
 8041b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8041b66:	bf00      	nop
 8041b68:	40023800 	.word	0x40023800
 8041b6c:	00f42400 	.word	0x00f42400
 8041b70:	017d7840 	.word	0x017d7840

08041b74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041b74:	b480      	push	{r7}
 8041b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8041b78:	4b03      	ldr	r3, [pc, #12]	@ (8041b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8041b7a:	681b      	ldr	r3, [r3, #0]
}
 8041b7c:	4618      	mov	r0, r3
 8041b7e:	46bd      	mov	sp, r7
 8041b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b84:	4770      	bx	lr
 8041b86:	bf00      	nop
 8041b88:	20000000 	.word	0x20000000

08041b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041b8c:	b580      	push	{r7, lr}
 8041b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8041b90:	f7ff fff0 	bl	8041b74 <HAL_RCC_GetHCLKFreq>
 8041b94:	4602      	mov	r2, r0
 8041b96:	4b05      	ldr	r3, [pc, #20]	@ (8041bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8041b98:	689b      	ldr	r3, [r3, #8]
 8041b9a:	0a9b      	lsrs	r3, r3, #10
 8041b9c:	f003 0307 	and.w	r3, r3, #7
 8041ba0:	4903      	ldr	r1, [pc, #12]	@ (8041bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8041ba2:	5ccb      	ldrb	r3, [r1, r3]
 8041ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041ba8:	4618      	mov	r0, r3
 8041baa:	bd80      	pop	{r7, pc}
 8041bac:	40023800 	.word	0x40023800
 8041bb0:	08043d80 	.word	0x08043d80

08041bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8041bb4:	b580      	push	{r7, lr}
 8041bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8041bb8:	f7ff ffdc 	bl	8041b74 <HAL_RCC_GetHCLKFreq>
 8041bbc:	4602      	mov	r2, r0
 8041bbe:	4b05      	ldr	r3, [pc, #20]	@ (8041bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8041bc0:	689b      	ldr	r3, [r3, #8]
 8041bc2:	0b5b      	lsrs	r3, r3, #13
 8041bc4:	f003 0307 	and.w	r3, r3, #7
 8041bc8:	4903      	ldr	r1, [pc, #12]	@ (8041bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8041bca:	5ccb      	ldrb	r3, [r1, r3]
 8041bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041bd0:	4618      	mov	r0, r3
 8041bd2:	bd80      	pop	{r7, pc}
 8041bd4:	40023800 	.word	0x40023800
 8041bd8:	08043d80 	.word	0x08043d80

08041bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8041bdc:	b580      	push	{r7, lr}
 8041bde:	b088      	sub	sp, #32
 8041be0:	af00      	add	r7, sp, #0
 8041be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8041be4:	2300      	movs	r3, #0
 8041be6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8041be8:	2300      	movs	r3, #0
 8041bea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8041bec:	2300      	movs	r3, #0
 8041bee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8041bf0:	2300      	movs	r3, #0
 8041bf2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8041bf4:	2300      	movs	r3, #0
 8041bf6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8041bf8:	687b      	ldr	r3, [r7, #4]
 8041bfa:	681b      	ldr	r3, [r3, #0]
 8041bfc:	f003 0301 	and.w	r3, r3, #1
 8041c00:	2b00      	cmp	r3, #0
 8041c02:	d012      	beq.n	8041c2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8041c04:	4b69      	ldr	r3, [pc, #420]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c06:	689b      	ldr	r3, [r3, #8]
 8041c08:	4a68      	ldr	r2, [pc, #416]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8041c0e:	6093      	str	r3, [r2, #8]
 8041c10:	4b66      	ldr	r3, [pc, #408]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c12:	689a      	ldr	r2, [r3, #8]
 8041c14:	687b      	ldr	r3, [r7, #4]
 8041c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8041c18:	4964      	ldr	r1, [pc, #400]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c1a:	4313      	orrs	r3, r2
 8041c1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8041c1e:	687b      	ldr	r3, [r7, #4]
 8041c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8041c22:	2b00      	cmp	r3, #0
 8041c24:	d101      	bne.n	8041c2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8041c26:	2301      	movs	r3, #1
 8041c28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8041c2a:	687b      	ldr	r3, [r7, #4]
 8041c2c:	681b      	ldr	r3, [r3, #0]
 8041c2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8041c32:	2b00      	cmp	r3, #0
 8041c34:	d017      	beq.n	8041c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8041c36:	4b5d      	ldr	r3, [pc, #372]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8041c3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8041c40:	687b      	ldr	r3, [r7, #4]
 8041c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8041c44:	4959      	ldr	r1, [pc, #356]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c46:	4313      	orrs	r3, r2
 8041c48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8041c4c:	687b      	ldr	r3, [r7, #4]
 8041c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8041c50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8041c54:	d101      	bne.n	8041c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8041c56:	2301      	movs	r3, #1
 8041c58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8041c5a:	687b      	ldr	r3, [r7, #4]
 8041c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8041c5e:	2b00      	cmp	r3, #0
 8041c60:	d101      	bne.n	8041c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8041c62:	2301      	movs	r3, #1
 8041c64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8041c66:	687b      	ldr	r3, [r7, #4]
 8041c68:	681b      	ldr	r3, [r3, #0]
 8041c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8041c6e:	2b00      	cmp	r3, #0
 8041c70:	d017      	beq.n	8041ca2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8041c72:	4b4e      	ldr	r3, [pc, #312]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8041c78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8041c7c:	687b      	ldr	r3, [r7, #4]
 8041c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041c80:	494a      	ldr	r1, [pc, #296]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c82:	4313      	orrs	r3, r2
 8041c84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8041c88:	687b      	ldr	r3, [r7, #4]
 8041c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041c8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8041c90:	d101      	bne.n	8041c96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8041c92:	2301      	movs	r3, #1
 8041c94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8041c96:	687b      	ldr	r3, [r7, #4]
 8041c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041c9a:	2b00      	cmp	r3, #0
 8041c9c:	d101      	bne.n	8041ca2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8041c9e:	2301      	movs	r3, #1
 8041ca0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8041ca2:	687b      	ldr	r3, [r7, #4]
 8041ca4:	681b      	ldr	r3, [r3, #0]
 8041ca6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8041caa:	2b00      	cmp	r3, #0
 8041cac:	d001      	beq.n	8041cb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8041cae:	2301      	movs	r3, #1
 8041cb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8041cb2:	687b      	ldr	r3, [r7, #4]
 8041cb4:	681b      	ldr	r3, [r3, #0]
 8041cb6:	f003 0320 	and.w	r3, r3, #32
 8041cba:	2b00      	cmp	r3, #0
 8041cbc:	f000 808b 	beq.w	8041dd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8041cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041cc4:	4a39      	ldr	r2, [pc, #228]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8041cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8041ccc:	4b37      	ldr	r3, [pc, #220]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8041cd4:	60bb      	str	r3, [r7, #8]
 8041cd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8041cd8:	4b35      	ldr	r3, [pc, #212]	@ (8041db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041cda:	681b      	ldr	r3, [r3, #0]
 8041cdc:	4a34      	ldr	r2, [pc, #208]	@ (8041db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8041ce2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041ce4:	f7fe ff92 	bl	8040c0c <HAL_GetTick>
 8041ce8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8041cea:	e008      	b.n	8041cfe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041cec:	f7fe ff8e 	bl	8040c0c <HAL_GetTick>
 8041cf0:	4602      	mov	r2, r0
 8041cf2:	697b      	ldr	r3, [r7, #20]
 8041cf4:	1ad3      	subs	r3, r2, r3
 8041cf6:	2b64      	cmp	r3, #100	@ 0x64
 8041cf8:	d901      	bls.n	8041cfe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8041cfa:	2303      	movs	r3, #3
 8041cfc:	e38f      	b.n	804241e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8041cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8041db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041d00:	681b      	ldr	r3, [r3, #0]
 8041d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041d06:	2b00      	cmp	r3, #0
 8041d08:	d0f0      	beq.n	8041cec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8041d0a:	4b28      	ldr	r3, [pc, #160]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8041d12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8041d14:	693b      	ldr	r3, [r7, #16]
 8041d16:	2b00      	cmp	r3, #0
 8041d18:	d035      	beq.n	8041d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8041d1a:	687b      	ldr	r3, [r7, #4]
 8041d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8041d22:	693a      	ldr	r2, [r7, #16]
 8041d24:	429a      	cmp	r2, r3
 8041d26:	d02e      	beq.n	8041d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8041d28:	4b20      	ldr	r3, [pc, #128]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8041d30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8041d32:	4b1e      	ldr	r3, [pc, #120]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041d36:	4a1d      	ldr	r2, [pc, #116]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8041d3c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8041d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041d42:	4a1a      	ldr	r2, [pc, #104]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041d48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8041d4a:	4a18      	ldr	r2, [pc, #96]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041d4c:	693b      	ldr	r3, [r7, #16]
 8041d4e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8041d50:	4b16      	ldr	r3, [pc, #88]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041d54:	f003 0301 	and.w	r3, r3, #1
 8041d58:	2b01      	cmp	r3, #1
 8041d5a:	d114      	bne.n	8041d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041d5c:	f7fe ff56 	bl	8040c0c <HAL_GetTick>
 8041d60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041d62:	e00a      	b.n	8041d7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041d64:	f7fe ff52 	bl	8040c0c <HAL_GetTick>
 8041d68:	4602      	mov	r2, r0
 8041d6a:	697b      	ldr	r3, [r7, #20]
 8041d6c:	1ad3      	subs	r3, r2, r3
 8041d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041d72:	4293      	cmp	r3, r2
 8041d74:	d901      	bls.n	8041d7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8041d76:	2303      	movs	r3, #3
 8041d78:	e351      	b.n	804241e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041d7e:	f003 0302 	and.w	r3, r3, #2
 8041d82:	2b00      	cmp	r3, #0
 8041d84:	d0ee      	beq.n	8041d64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8041d86:	687b      	ldr	r3, [r7, #4]
 8041d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8041d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8041d92:	d111      	bne.n	8041db8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8041d94:	4b05      	ldr	r3, [pc, #20]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041d96:	689b      	ldr	r3, [r3, #8]
 8041d98:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8041d9c:	687b      	ldr	r3, [r7, #4]
 8041d9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8041da0:	4b04      	ldr	r3, [pc, #16]	@ (8041db4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8041da2:	400b      	ands	r3, r1
 8041da4:	4901      	ldr	r1, [pc, #4]	@ (8041dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041da6:	4313      	orrs	r3, r2
 8041da8:	608b      	str	r3, [r1, #8]
 8041daa:	e00b      	b.n	8041dc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8041dac:	40023800 	.word	0x40023800
 8041db0:	40007000 	.word	0x40007000
 8041db4:	0ffffcff 	.word	0x0ffffcff
 8041db8:	4bac      	ldr	r3, [pc, #688]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dba:	689b      	ldr	r3, [r3, #8]
 8041dbc:	4aab      	ldr	r2, [pc, #684]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dbe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8041dc2:	6093      	str	r3, [r2, #8]
 8041dc4:	4ba9      	ldr	r3, [pc, #676]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8041dc8:	687b      	ldr	r3, [r7, #4]
 8041dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8041dd0:	49a6      	ldr	r1, [pc, #664]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dd2:	4313      	orrs	r3, r2
 8041dd4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8041dd6:	687b      	ldr	r3, [r7, #4]
 8041dd8:	681b      	ldr	r3, [r3, #0]
 8041dda:	f003 0310 	and.w	r3, r3, #16
 8041dde:	2b00      	cmp	r3, #0
 8041de0:	d010      	beq.n	8041e04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8041de2:	4ba2      	ldr	r3, [pc, #648]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8041de8:	4aa0      	ldr	r2, [pc, #640]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8041dee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8041df2:	4b9e      	ldr	r3, [pc, #632]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041df4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8041df8:	687b      	ldr	r3, [r7, #4]
 8041dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8041dfc:	499b      	ldr	r1, [pc, #620]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dfe:	4313      	orrs	r3, r2
 8041e00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8041e04:	687b      	ldr	r3, [r7, #4]
 8041e06:	681b      	ldr	r3, [r3, #0]
 8041e08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8041e0c:	2b00      	cmp	r3, #0
 8041e0e:	d00a      	beq.n	8041e26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8041e10:	4b96      	ldr	r3, [pc, #600]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041e16:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8041e1a:	687b      	ldr	r3, [r7, #4]
 8041e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8041e1e:	4993      	ldr	r1, [pc, #588]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e20:	4313      	orrs	r3, r2
 8041e22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8041e26:	687b      	ldr	r3, [r7, #4]
 8041e28:	681b      	ldr	r3, [r3, #0]
 8041e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8041e2e:	2b00      	cmp	r3, #0
 8041e30:	d00a      	beq.n	8041e48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8041e32:	4b8e      	ldr	r3, [pc, #568]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041e38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8041e3c:	687b      	ldr	r3, [r7, #4]
 8041e3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8041e40:	498a      	ldr	r1, [pc, #552]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e42:	4313      	orrs	r3, r2
 8041e44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8041e48:	687b      	ldr	r3, [r7, #4]
 8041e4a:	681b      	ldr	r3, [r3, #0]
 8041e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8041e50:	2b00      	cmp	r3, #0
 8041e52:	d00a      	beq.n	8041e6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8041e54:	4b85      	ldr	r3, [pc, #532]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041e5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8041e5e:	687b      	ldr	r3, [r7, #4]
 8041e60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8041e62:	4982      	ldr	r1, [pc, #520]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e64:	4313      	orrs	r3, r2
 8041e66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8041e6a:	687b      	ldr	r3, [r7, #4]
 8041e6c:	681b      	ldr	r3, [r3, #0]
 8041e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041e72:	2b00      	cmp	r3, #0
 8041e74:	d00a      	beq.n	8041e8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8041e76:	4b7d      	ldr	r3, [pc, #500]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041e7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8041e80:	687b      	ldr	r3, [r7, #4]
 8041e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041e84:	4979      	ldr	r1, [pc, #484]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e86:	4313      	orrs	r3, r2
 8041e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8041e8c:	687b      	ldr	r3, [r7, #4]
 8041e8e:	681b      	ldr	r3, [r3, #0]
 8041e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041e94:	2b00      	cmp	r3, #0
 8041e96:	d00a      	beq.n	8041eae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8041e98:	4b74      	ldr	r3, [pc, #464]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041e9e:	f023 0203 	bic.w	r2, r3, #3
 8041ea2:	687b      	ldr	r3, [r7, #4]
 8041ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8041ea6:	4971      	ldr	r1, [pc, #452]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ea8:	4313      	orrs	r3, r2
 8041eaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8041eae:	687b      	ldr	r3, [r7, #4]
 8041eb0:	681b      	ldr	r3, [r3, #0]
 8041eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8041eb6:	2b00      	cmp	r3, #0
 8041eb8:	d00a      	beq.n	8041ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8041eba:	4b6c      	ldr	r3, [pc, #432]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041ec0:	f023 020c 	bic.w	r2, r3, #12
 8041ec4:	687b      	ldr	r3, [r7, #4]
 8041ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8041ec8:	4968      	ldr	r1, [pc, #416]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041eca:	4313      	orrs	r3, r2
 8041ecc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8041ed0:	687b      	ldr	r3, [r7, #4]
 8041ed2:	681b      	ldr	r3, [r3, #0]
 8041ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041ed8:	2b00      	cmp	r3, #0
 8041eda:	d00a      	beq.n	8041ef2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8041edc:	4b63      	ldr	r3, [pc, #396]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041ee2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8041ee6:	687b      	ldr	r3, [r7, #4]
 8041ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8041eea:	4960      	ldr	r1, [pc, #384]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041eec:	4313      	orrs	r3, r2
 8041eee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8041ef2:	687b      	ldr	r3, [r7, #4]
 8041ef4:	681b      	ldr	r3, [r3, #0]
 8041ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8041efa:	2b00      	cmp	r3, #0
 8041efc:	d00a      	beq.n	8041f14 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8041efe:	4b5b      	ldr	r3, [pc, #364]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041f04:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8041f08:	687b      	ldr	r3, [r7, #4]
 8041f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8041f0c:	4957      	ldr	r1, [pc, #348]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f0e:	4313      	orrs	r3, r2
 8041f10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8041f14:	687b      	ldr	r3, [r7, #4]
 8041f16:	681b      	ldr	r3, [r3, #0]
 8041f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8041f1c:	2b00      	cmp	r3, #0
 8041f1e:	d00a      	beq.n	8041f36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8041f20:	4b52      	ldr	r3, [pc, #328]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041f26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8041f2a:	687b      	ldr	r3, [r7, #4]
 8041f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8041f2e:	494f      	ldr	r1, [pc, #316]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f30:	4313      	orrs	r3, r2
 8041f32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8041f36:	687b      	ldr	r3, [r7, #4]
 8041f38:	681b      	ldr	r3, [r3, #0]
 8041f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8041f3e:	2b00      	cmp	r3, #0
 8041f40:	d00a      	beq.n	8041f58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8041f42:	4b4a      	ldr	r3, [pc, #296]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041f48:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8041f4c:	687b      	ldr	r3, [r7, #4]
 8041f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8041f50:	4946      	ldr	r1, [pc, #280]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f52:	4313      	orrs	r3, r2
 8041f54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8041f58:	687b      	ldr	r3, [r7, #4]
 8041f5a:	681b      	ldr	r3, [r3, #0]
 8041f5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8041f60:	2b00      	cmp	r3, #0
 8041f62:	d00a      	beq.n	8041f7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8041f64:	4b41      	ldr	r3, [pc, #260]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041f6a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8041f6e:	687b      	ldr	r3, [r7, #4]
 8041f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8041f72:	493e      	ldr	r1, [pc, #248]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f74:	4313      	orrs	r3, r2
 8041f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8041f7a:	687b      	ldr	r3, [r7, #4]
 8041f7c:	681b      	ldr	r3, [r3, #0]
 8041f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8041f82:	2b00      	cmp	r3, #0
 8041f84:	d00a      	beq.n	8041f9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8041f86:	4b39      	ldr	r3, [pc, #228]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041f8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8041f90:	687b      	ldr	r3, [r7, #4]
 8041f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8041f94:	4935      	ldr	r1, [pc, #212]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f96:	4313      	orrs	r3, r2
 8041f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8041f9c:	687b      	ldr	r3, [r7, #4]
 8041f9e:	681b      	ldr	r3, [r3, #0]
 8041fa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8041fa4:	2b00      	cmp	r3, #0
 8041fa6:	d00a      	beq.n	8041fbe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8041fa8:	4b30      	ldr	r3, [pc, #192]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041fae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8041fb2:	687b      	ldr	r3, [r7, #4]
 8041fb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8041fb6:	492d      	ldr	r1, [pc, #180]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041fb8:	4313      	orrs	r3, r2
 8041fba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8041fbe:	687b      	ldr	r3, [r7, #4]
 8041fc0:	681b      	ldr	r3, [r3, #0]
 8041fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8041fc6:	2b00      	cmp	r3, #0
 8041fc8:	d011      	beq.n	8041fee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8041fca:	4b28      	ldr	r3, [pc, #160]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041fd0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8041fd4:	687b      	ldr	r3, [r7, #4]
 8041fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8041fd8:	4924      	ldr	r1, [pc, #144]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041fda:	4313      	orrs	r3, r2
 8041fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8041fe0:	687b      	ldr	r3, [r7, #4]
 8041fe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8041fe4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8041fe8:	d101      	bne.n	8041fee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8041fea:	2301      	movs	r3, #1
 8041fec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8041fee:	687b      	ldr	r3, [r7, #4]
 8041ff0:	681b      	ldr	r3, [r3, #0]
 8041ff2:	f003 0308 	and.w	r3, r3, #8
 8041ff6:	2b00      	cmp	r3, #0
 8041ff8:	d001      	beq.n	8041ffe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8041ffa:	2301      	movs	r3, #1
 8041ffc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8041ffe:	687b      	ldr	r3, [r7, #4]
 8042000:	681b      	ldr	r3, [r3, #0]
 8042002:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8042006:	2b00      	cmp	r3, #0
 8042008:	d00a      	beq.n	8042020 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 804200a:	4b18      	ldr	r3, [pc, #96]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8042010:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8042014:	687b      	ldr	r3, [r7, #4]
 8042016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8042018:	4914      	ldr	r1, [pc, #80]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804201a:	4313      	orrs	r3, r2
 804201c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8042020:	687b      	ldr	r3, [r7, #4]
 8042022:	681b      	ldr	r3, [r3, #0]
 8042024:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8042028:	2b00      	cmp	r3, #0
 804202a:	d00b      	beq.n	8042044 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 804202c:	4b0f      	ldr	r3, [pc, #60]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8042032:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8042036:	687b      	ldr	r3, [r7, #4]
 8042038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 804203c:	490b      	ldr	r1, [pc, #44]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804203e:	4313      	orrs	r3, r2
 8042040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8042044:	687b      	ldr	r3, [r7, #4]
 8042046:	681b      	ldr	r3, [r3, #0]
 8042048:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 804204c:	2b00      	cmp	r3, #0
 804204e:	d00f      	beq.n	8042070 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8042050:	4b06      	ldr	r3, [pc, #24]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8042056:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 804205a:	687b      	ldr	r3, [r7, #4]
 804205c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8042060:	4902      	ldr	r1, [pc, #8]	@ (804206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042062:	4313      	orrs	r3, r2
 8042064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8042068:	e002      	b.n	8042070 <HAL_RCCEx_PeriphCLKConfig+0x494>
 804206a:	bf00      	nop
 804206c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8042070:	687b      	ldr	r3, [r7, #4]
 8042072:	681b      	ldr	r3, [r3, #0]
 8042074:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8042078:	2b00      	cmp	r3, #0
 804207a:	d00b      	beq.n	8042094 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 804207c:	4b8a      	ldr	r3, [pc, #552]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804207e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8042082:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8042086:	687b      	ldr	r3, [r7, #4]
 8042088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 804208c:	4986      	ldr	r1, [pc, #536]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804208e:	4313      	orrs	r3, r2
 8042090:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8042094:	687b      	ldr	r3, [r7, #4]
 8042096:	681b      	ldr	r3, [r3, #0]
 8042098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 804209c:	2b00      	cmp	r3, #0
 804209e:	d00b      	beq.n	80420b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80420a0:	4b81      	ldr	r3, [pc, #516]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80420a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80420aa:	687b      	ldr	r3, [r7, #4]
 80420ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80420b0:	497d      	ldr	r1, [pc, #500]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420b2:	4313      	orrs	r3, r2
 80420b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80420b8:	69fb      	ldr	r3, [r7, #28]
 80420ba:	2b01      	cmp	r3, #1
 80420bc:	d006      	beq.n	80420cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80420be:	687b      	ldr	r3, [r7, #4]
 80420c0:	681b      	ldr	r3, [r3, #0]
 80420c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80420c6:	2b00      	cmp	r3, #0
 80420c8:	f000 80d6 	beq.w	8042278 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80420cc:	4b76      	ldr	r3, [pc, #472]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420ce:	681b      	ldr	r3, [r3, #0]
 80420d0:	4a75      	ldr	r2, [pc, #468]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80420d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80420d8:	f7fe fd98 	bl	8040c0c <HAL_GetTick>
 80420dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80420de:	e008      	b.n	80420f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80420e0:	f7fe fd94 	bl	8040c0c <HAL_GetTick>
 80420e4:	4602      	mov	r2, r0
 80420e6:	697b      	ldr	r3, [r7, #20]
 80420e8:	1ad3      	subs	r3, r2, r3
 80420ea:	2b64      	cmp	r3, #100	@ 0x64
 80420ec:	d901      	bls.n	80420f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80420ee:	2303      	movs	r3, #3
 80420f0:	e195      	b.n	804241e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80420f2:	4b6d      	ldr	r3, [pc, #436]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420f4:	681b      	ldr	r3, [r3, #0]
 80420f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80420fa:	2b00      	cmp	r3, #0
 80420fc:	d1f0      	bne.n	80420e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80420fe:	687b      	ldr	r3, [r7, #4]
 8042100:	681b      	ldr	r3, [r3, #0]
 8042102:	f003 0301 	and.w	r3, r3, #1
 8042106:	2b00      	cmp	r3, #0
 8042108:	d021      	beq.n	804214e <HAL_RCCEx_PeriphCLKConfig+0x572>
 804210a:	687b      	ldr	r3, [r7, #4]
 804210c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 804210e:	2b00      	cmp	r3, #0
 8042110:	d11d      	bne.n	804214e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8042112:	4b65      	ldr	r3, [pc, #404]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8042118:	0c1b      	lsrs	r3, r3, #16
 804211a:	f003 0303 	and.w	r3, r3, #3
 804211e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8042120:	4b61      	ldr	r3, [pc, #388]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8042126:	0e1b      	lsrs	r3, r3, #24
 8042128:	f003 030f 	and.w	r3, r3, #15
 804212c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 804212e:	687b      	ldr	r3, [r7, #4]
 8042130:	685b      	ldr	r3, [r3, #4]
 8042132:	019a      	lsls	r2, r3, #6
 8042134:	693b      	ldr	r3, [r7, #16]
 8042136:	041b      	lsls	r3, r3, #16
 8042138:	431a      	orrs	r2, r3
 804213a:	68fb      	ldr	r3, [r7, #12]
 804213c:	061b      	lsls	r3, r3, #24
 804213e:	431a      	orrs	r2, r3
 8042140:	687b      	ldr	r3, [r7, #4]
 8042142:	689b      	ldr	r3, [r3, #8]
 8042144:	071b      	lsls	r3, r3, #28
 8042146:	4958      	ldr	r1, [pc, #352]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042148:	4313      	orrs	r3, r2
 804214a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 804214e:	687b      	ldr	r3, [r7, #4]
 8042150:	681b      	ldr	r3, [r3, #0]
 8042152:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8042156:	2b00      	cmp	r3, #0
 8042158:	d004      	beq.n	8042164 <HAL_RCCEx_PeriphCLKConfig+0x588>
 804215a:	687b      	ldr	r3, [r7, #4]
 804215c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804215e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8042162:	d00a      	beq.n	804217a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8042164:	687b      	ldr	r3, [r7, #4]
 8042166:	681b      	ldr	r3, [r3, #0]
 8042168:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 804216c:	2b00      	cmp	r3, #0
 804216e:	d02e      	beq.n	80421ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8042170:	687b      	ldr	r3, [r7, #4]
 8042172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8042178:	d129      	bne.n	80421ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 804217a:	4b4b      	ldr	r3, [pc, #300]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804217c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8042180:	0c1b      	lsrs	r3, r3, #16
 8042182:	f003 0303 	and.w	r3, r3, #3
 8042186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8042188:	4b47      	ldr	r3, [pc, #284]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804218a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 804218e:	0f1b      	lsrs	r3, r3, #28
 8042190:	f003 0307 	and.w	r3, r3, #7
 8042194:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8042196:	687b      	ldr	r3, [r7, #4]
 8042198:	685b      	ldr	r3, [r3, #4]
 804219a:	019a      	lsls	r2, r3, #6
 804219c:	693b      	ldr	r3, [r7, #16]
 804219e:	041b      	lsls	r3, r3, #16
 80421a0:	431a      	orrs	r2, r3
 80421a2:	687b      	ldr	r3, [r7, #4]
 80421a4:	68db      	ldr	r3, [r3, #12]
 80421a6:	061b      	lsls	r3, r3, #24
 80421a8:	431a      	orrs	r2, r3
 80421aa:	68fb      	ldr	r3, [r7, #12]
 80421ac:	071b      	lsls	r3, r3, #28
 80421ae:	493e      	ldr	r1, [pc, #248]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80421b0:	4313      	orrs	r3, r2
 80421b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80421b6:	4b3c      	ldr	r3, [pc, #240]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80421b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80421bc:	f023 021f 	bic.w	r2, r3, #31
 80421c0:	687b      	ldr	r3, [r7, #4]
 80421c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80421c4:	3b01      	subs	r3, #1
 80421c6:	4938      	ldr	r1, [pc, #224]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80421c8:	4313      	orrs	r3, r2
 80421ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80421ce:	687b      	ldr	r3, [r7, #4]
 80421d0:	681b      	ldr	r3, [r3, #0]
 80421d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80421d6:	2b00      	cmp	r3, #0
 80421d8:	d01d      	beq.n	8042216 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80421da:	4b33      	ldr	r3, [pc, #204]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80421dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80421e0:	0e1b      	lsrs	r3, r3, #24
 80421e2:	f003 030f 	and.w	r3, r3, #15
 80421e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80421e8:	4b2f      	ldr	r3, [pc, #188]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80421ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80421ee:	0f1b      	lsrs	r3, r3, #28
 80421f0:	f003 0307 	and.w	r3, r3, #7
 80421f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80421f6:	687b      	ldr	r3, [r7, #4]
 80421f8:	685b      	ldr	r3, [r3, #4]
 80421fa:	019a      	lsls	r2, r3, #6
 80421fc:	687b      	ldr	r3, [r7, #4]
 80421fe:	691b      	ldr	r3, [r3, #16]
 8042200:	041b      	lsls	r3, r3, #16
 8042202:	431a      	orrs	r2, r3
 8042204:	693b      	ldr	r3, [r7, #16]
 8042206:	061b      	lsls	r3, r3, #24
 8042208:	431a      	orrs	r2, r3
 804220a:	68fb      	ldr	r3, [r7, #12]
 804220c:	071b      	lsls	r3, r3, #28
 804220e:	4926      	ldr	r1, [pc, #152]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042210:	4313      	orrs	r3, r2
 8042212:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8042216:	687b      	ldr	r3, [r7, #4]
 8042218:	681b      	ldr	r3, [r3, #0]
 804221a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804221e:	2b00      	cmp	r3, #0
 8042220:	d011      	beq.n	8042246 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8042222:	687b      	ldr	r3, [r7, #4]
 8042224:	685b      	ldr	r3, [r3, #4]
 8042226:	019a      	lsls	r2, r3, #6
 8042228:	687b      	ldr	r3, [r7, #4]
 804222a:	691b      	ldr	r3, [r3, #16]
 804222c:	041b      	lsls	r3, r3, #16
 804222e:	431a      	orrs	r2, r3
 8042230:	687b      	ldr	r3, [r7, #4]
 8042232:	68db      	ldr	r3, [r3, #12]
 8042234:	061b      	lsls	r3, r3, #24
 8042236:	431a      	orrs	r2, r3
 8042238:	687b      	ldr	r3, [r7, #4]
 804223a:	689b      	ldr	r3, [r3, #8]
 804223c:	071b      	lsls	r3, r3, #28
 804223e:	491a      	ldr	r1, [pc, #104]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042240:	4313      	orrs	r3, r2
 8042242:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8042246:	4b18      	ldr	r3, [pc, #96]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042248:	681b      	ldr	r3, [r3, #0]
 804224a:	4a17      	ldr	r2, [pc, #92]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804224c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8042250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042252:	f7fe fcdb 	bl	8040c0c <HAL_GetTick>
 8042256:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8042258:	e008      	b.n	804226c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 804225a:	f7fe fcd7 	bl	8040c0c <HAL_GetTick>
 804225e:	4602      	mov	r2, r0
 8042260:	697b      	ldr	r3, [r7, #20]
 8042262:	1ad3      	subs	r3, r2, r3
 8042264:	2b64      	cmp	r3, #100	@ 0x64
 8042266:	d901      	bls.n	804226c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042268:	2303      	movs	r3, #3
 804226a:	e0d8      	b.n	804241e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804226c:	4b0e      	ldr	r3, [pc, #56]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804226e:	681b      	ldr	r3, [r3, #0]
 8042270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8042274:	2b00      	cmp	r3, #0
 8042276:	d0f0      	beq.n	804225a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8042278:	69bb      	ldr	r3, [r7, #24]
 804227a:	2b01      	cmp	r3, #1
 804227c:	f040 80ce 	bne.w	804241c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8042280:	4b09      	ldr	r3, [pc, #36]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042282:	681b      	ldr	r3, [r3, #0]
 8042284:	4a08      	ldr	r2, [pc, #32]	@ (80422a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 804228a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804228c:	f7fe fcbe 	bl	8040c0c <HAL_GetTick>
 8042290:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8042292:	e00b      	b.n	80422ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8042294:	f7fe fcba 	bl	8040c0c <HAL_GetTick>
 8042298:	4602      	mov	r2, r0
 804229a:	697b      	ldr	r3, [r7, #20]
 804229c:	1ad3      	subs	r3, r2, r3
 804229e:	2b64      	cmp	r3, #100	@ 0x64
 80422a0:	d904      	bls.n	80422ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80422a2:	2303      	movs	r3, #3
 80422a4:	e0bb      	b.n	804241e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80422a6:	bf00      	nop
 80422a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80422ac:	4b5e      	ldr	r3, [pc, #376]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422ae:	681b      	ldr	r3, [r3, #0]
 80422b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80422b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80422b8:	d0ec      	beq.n	8042294 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80422ba:	687b      	ldr	r3, [r7, #4]
 80422bc:	681b      	ldr	r3, [r3, #0]
 80422be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80422c2:	2b00      	cmp	r3, #0
 80422c4:	d003      	beq.n	80422ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80422c6:	687b      	ldr	r3, [r7, #4]
 80422c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80422ca:	2b00      	cmp	r3, #0
 80422cc:	d009      	beq.n	80422e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80422ce:	687b      	ldr	r3, [r7, #4]
 80422d0:	681b      	ldr	r3, [r3, #0]
 80422d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80422d6:	2b00      	cmp	r3, #0
 80422d8:	d02e      	beq.n	8042338 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80422da:	687b      	ldr	r3, [r7, #4]
 80422dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80422de:	2b00      	cmp	r3, #0
 80422e0:	d12a      	bne.n	8042338 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80422e2:	4b51      	ldr	r3, [pc, #324]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80422e8:	0c1b      	lsrs	r3, r3, #16
 80422ea:	f003 0303 	and.w	r3, r3, #3
 80422ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80422f0:	4b4d      	ldr	r3, [pc, #308]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80422f6:	0f1b      	lsrs	r3, r3, #28
 80422f8:	f003 0307 	and.w	r3, r3, #7
 80422fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80422fe:	687b      	ldr	r3, [r7, #4]
 8042300:	695b      	ldr	r3, [r3, #20]
 8042302:	019a      	lsls	r2, r3, #6
 8042304:	693b      	ldr	r3, [r7, #16]
 8042306:	041b      	lsls	r3, r3, #16
 8042308:	431a      	orrs	r2, r3
 804230a:	687b      	ldr	r3, [r7, #4]
 804230c:	699b      	ldr	r3, [r3, #24]
 804230e:	061b      	lsls	r3, r3, #24
 8042310:	431a      	orrs	r2, r3
 8042312:	68fb      	ldr	r3, [r7, #12]
 8042314:	071b      	lsls	r3, r3, #28
 8042316:	4944      	ldr	r1, [pc, #272]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042318:	4313      	orrs	r3, r2
 804231a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 804231e:	4b42      	ldr	r3, [pc, #264]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8042324:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8042328:	687b      	ldr	r3, [r7, #4]
 804232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804232c:	3b01      	subs	r3, #1
 804232e:	021b      	lsls	r3, r3, #8
 8042330:	493d      	ldr	r1, [pc, #244]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042332:	4313      	orrs	r3, r2
 8042334:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8042338:	687b      	ldr	r3, [r7, #4]
 804233a:	681b      	ldr	r3, [r3, #0]
 804233c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8042340:	2b00      	cmp	r3, #0
 8042342:	d022      	beq.n	804238a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8042344:	687b      	ldr	r3, [r7, #4]
 8042346:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8042348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 804234c:	d11d      	bne.n	804238a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 804234e:	4b36      	ldr	r3, [pc, #216]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8042354:	0e1b      	lsrs	r3, r3, #24
 8042356:	f003 030f 	and.w	r3, r3, #15
 804235a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 804235c:	4b32      	ldr	r3, [pc, #200]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8042362:	0f1b      	lsrs	r3, r3, #28
 8042364:	f003 0307 	and.w	r3, r3, #7
 8042368:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 804236a:	687b      	ldr	r3, [r7, #4]
 804236c:	695b      	ldr	r3, [r3, #20]
 804236e:	019a      	lsls	r2, r3, #6
 8042370:	687b      	ldr	r3, [r7, #4]
 8042372:	6a1b      	ldr	r3, [r3, #32]
 8042374:	041b      	lsls	r3, r3, #16
 8042376:	431a      	orrs	r2, r3
 8042378:	693b      	ldr	r3, [r7, #16]
 804237a:	061b      	lsls	r3, r3, #24
 804237c:	431a      	orrs	r2, r3
 804237e:	68fb      	ldr	r3, [r7, #12]
 8042380:	071b      	lsls	r3, r3, #28
 8042382:	4929      	ldr	r1, [pc, #164]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042384:	4313      	orrs	r3, r2
 8042386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 804238a:	687b      	ldr	r3, [r7, #4]
 804238c:	681b      	ldr	r3, [r3, #0]
 804238e:	f003 0308 	and.w	r3, r3, #8
 8042392:	2b00      	cmp	r3, #0
 8042394:	d028      	beq.n	80423e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8042396:	4b24      	ldr	r3, [pc, #144]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 804239c:	0e1b      	lsrs	r3, r3, #24
 804239e:	f003 030f 	and.w	r3, r3, #15
 80423a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80423a4:	4b20      	ldr	r3, [pc, #128]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80423a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80423aa:	0c1b      	lsrs	r3, r3, #16
 80423ac:	f003 0303 	and.w	r3, r3, #3
 80423b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80423b2:	687b      	ldr	r3, [r7, #4]
 80423b4:	695b      	ldr	r3, [r3, #20]
 80423b6:	019a      	lsls	r2, r3, #6
 80423b8:	68fb      	ldr	r3, [r7, #12]
 80423ba:	041b      	lsls	r3, r3, #16
 80423bc:	431a      	orrs	r2, r3
 80423be:	693b      	ldr	r3, [r7, #16]
 80423c0:	061b      	lsls	r3, r3, #24
 80423c2:	431a      	orrs	r2, r3
 80423c4:	687b      	ldr	r3, [r7, #4]
 80423c6:	69db      	ldr	r3, [r3, #28]
 80423c8:	071b      	lsls	r3, r3, #28
 80423ca:	4917      	ldr	r1, [pc, #92]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80423cc:	4313      	orrs	r3, r2
 80423ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80423d2:	4b15      	ldr	r3, [pc, #84]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80423d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80423d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80423dc:	687b      	ldr	r3, [r7, #4]
 80423de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80423e0:	4911      	ldr	r1, [pc, #68]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80423e2:	4313      	orrs	r3, r2
 80423e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80423e8:	4b0f      	ldr	r3, [pc, #60]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80423ea:	681b      	ldr	r3, [r3, #0]
 80423ec:	4a0e      	ldr	r2, [pc, #56]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80423ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80423f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80423f4:	f7fe fc0a 	bl	8040c0c <HAL_GetTick>
 80423f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80423fa:	e008      	b.n	804240e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80423fc:	f7fe fc06 	bl	8040c0c <HAL_GetTick>
 8042400:	4602      	mov	r2, r0
 8042402:	697b      	ldr	r3, [r7, #20]
 8042404:	1ad3      	subs	r3, r2, r3
 8042406:	2b64      	cmp	r3, #100	@ 0x64
 8042408:	d901      	bls.n	804240e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 804240a:	2303      	movs	r3, #3
 804240c:	e007      	b.n	804241e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 804240e:	4b06      	ldr	r3, [pc, #24]	@ (8042428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042410:	681b      	ldr	r3, [r3, #0]
 8042412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8042416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804241a:	d1ef      	bne.n	80423fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 804241c:	2300      	movs	r3, #0
}
 804241e:	4618      	mov	r0, r3
 8042420:	3720      	adds	r7, #32
 8042422:	46bd      	mov	sp, r7
 8042424:	bd80      	pop	{r7, pc}
 8042426:	bf00      	nop
 8042428:	40023800 	.word	0x40023800

0804242c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 804242c:	b580      	push	{r7, lr}
 804242e:	b082      	sub	sp, #8
 8042430:	af00      	add	r7, sp, #0
 8042432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8042434:	687b      	ldr	r3, [r7, #4]
 8042436:	2b00      	cmp	r3, #0
 8042438:	d101      	bne.n	804243e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804243a:	2301      	movs	r3, #1
 804243c:	e040      	b.n	80424c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 804243e:	687b      	ldr	r3, [r7, #4]
 8042440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8042442:	2b00      	cmp	r3, #0
 8042444:	d106      	bne.n	8042454 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042446:	687b      	ldr	r3, [r7, #4]
 8042448:	2200      	movs	r2, #0
 804244a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804244e:	6878      	ldr	r0, [r7, #4]
 8042450:	f7fe fa1a 	bl	8040888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042454:	687b      	ldr	r3, [r7, #4]
 8042456:	2224      	movs	r2, #36	@ 0x24
 8042458:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 804245a:	687b      	ldr	r3, [r7, #4]
 804245c:	681b      	ldr	r3, [r3, #0]
 804245e:	681a      	ldr	r2, [r3, #0]
 8042460:	687b      	ldr	r3, [r7, #4]
 8042462:	681b      	ldr	r3, [r3, #0]
 8042464:	f022 0201 	bic.w	r2, r2, #1
 8042468:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804246a:	687b      	ldr	r3, [r7, #4]
 804246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804246e:	2b00      	cmp	r3, #0
 8042470:	d002      	beq.n	8042478 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8042472:	6878      	ldr	r0, [r7, #4]
 8042474:	f000 fb16 	bl	8042aa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8042478:	6878      	ldr	r0, [r7, #4]
 804247a:	f000 f8af 	bl	80425dc <UART_SetConfig>
 804247e:	4603      	mov	r3, r0
 8042480:	2b01      	cmp	r3, #1
 8042482:	d101      	bne.n	8042488 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8042484:	2301      	movs	r3, #1
 8042486:	e01b      	b.n	80424c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8042488:	687b      	ldr	r3, [r7, #4]
 804248a:	681b      	ldr	r3, [r3, #0]
 804248c:	685a      	ldr	r2, [r3, #4]
 804248e:	687b      	ldr	r3, [r7, #4]
 8042490:	681b      	ldr	r3, [r3, #0]
 8042492:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8042496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8042498:	687b      	ldr	r3, [r7, #4]
 804249a:	681b      	ldr	r3, [r3, #0]
 804249c:	689a      	ldr	r2, [r3, #8]
 804249e:	687b      	ldr	r3, [r7, #4]
 80424a0:	681b      	ldr	r3, [r3, #0]
 80424a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80424a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80424a8:	687b      	ldr	r3, [r7, #4]
 80424aa:	681b      	ldr	r3, [r3, #0]
 80424ac:	681a      	ldr	r2, [r3, #0]
 80424ae:	687b      	ldr	r3, [r7, #4]
 80424b0:	681b      	ldr	r3, [r3, #0]
 80424b2:	f042 0201 	orr.w	r2, r2, #1
 80424b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80424b8:	6878      	ldr	r0, [r7, #4]
 80424ba:	f000 fb95 	bl	8042be8 <UART_CheckIdleState>
 80424be:	4603      	mov	r3, r0
}
 80424c0:	4618      	mov	r0, r3
 80424c2:	3708      	adds	r7, #8
 80424c4:	46bd      	mov	sp, r7
 80424c6:	bd80      	pop	{r7, pc}

080424c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80424c8:	b580      	push	{r7, lr}
 80424ca:	b08a      	sub	sp, #40	@ 0x28
 80424cc:	af02      	add	r7, sp, #8
 80424ce:	60f8      	str	r0, [r7, #12]
 80424d0:	60b9      	str	r1, [r7, #8]
 80424d2:	603b      	str	r3, [r7, #0]
 80424d4:	4613      	mov	r3, r2
 80424d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80424d8:	68fb      	ldr	r3, [r7, #12]
 80424da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80424dc:	2b20      	cmp	r3, #32
 80424de:	d177      	bne.n	80425d0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80424e0:	68bb      	ldr	r3, [r7, #8]
 80424e2:	2b00      	cmp	r3, #0
 80424e4:	d002      	beq.n	80424ec <HAL_UART_Transmit+0x24>
 80424e6:	88fb      	ldrh	r3, [r7, #6]
 80424e8:	2b00      	cmp	r3, #0
 80424ea:	d101      	bne.n	80424f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80424ec:	2301      	movs	r3, #1
 80424ee:	e070      	b.n	80425d2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80424f0:	68fb      	ldr	r3, [r7, #12]
 80424f2:	2200      	movs	r2, #0
 80424f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80424f8:	68fb      	ldr	r3, [r7, #12]
 80424fa:	2221      	movs	r2, #33	@ 0x21
 80424fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80424fe:	f7fe fb85 	bl	8040c0c <HAL_GetTick>
 8042502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8042504:	68fb      	ldr	r3, [r7, #12]
 8042506:	88fa      	ldrh	r2, [r7, #6]
 8042508:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 804250c:	68fb      	ldr	r3, [r7, #12]
 804250e:	88fa      	ldrh	r2, [r7, #6]
 8042510:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8042514:	68fb      	ldr	r3, [r7, #12]
 8042516:	689b      	ldr	r3, [r3, #8]
 8042518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 804251c:	d108      	bne.n	8042530 <HAL_UART_Transmit+0x68>
 804251e:	68fb      	ldr	r3, [r7, #12]
 8042520:	691b      	ldr	r3, [r3, #16]
 8042522:	2b00      	cmp	r3, #0
 8042524:	d104      	bne.n	8042530 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8042526:	2300      	movs	r3, #0
 8042528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 804252a:	68bb      	ldr	r3, [r7, #8]
 804252c:	61bb      	str	r3, [r7, #24]
 804252e:	e003      	b.n	8042538 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8042530:	68bb      	ldr	r3, [r7, #8]
 8042532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8042534:	2300      	movs	r3, #0
 8042536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8042538:	e02f      	b.n	804259a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 804253a:	683b      	ldr	r3, [r7, #0]
 804253c:	9300      	str	r3, [sp, #0]
 804253e:	697b      	ldr	r3, [r7, #20]
 8042540:	2200      	movs	r2, #0
 8042542:	2180      	movs	r1, #128	@ 0x80
 8042544:	68f8      	ldr	r0, [r7, #12]
 8042546:	f000 fbf7 	bl	8042d38 <UART_WaitOnFlagUntilTimeout>
 804254a:	4603      	mov	r3, r0
 804254c:	2b00      	cmp	r3, #0
 804254e:	d004      	beq.n	804255a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8042550:	68fb      	ldr	r3, [r7, #12]
 8042552:	2220      	movs	r2, #32
 8042554:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8042556:	2303      	movs	r3, #3
 8042558:	e03b      	b.n	80425d2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 804255a:	69fb      	ldr	r3, [r7, #28]
 804255c:	2b00      	cmp	r3, #0
 804255e:	d10b      	bne.n	8042578 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8042560:	69bb      	ldr	r3, [r7, #24]
 8042562:	881b      	ldrh	r3, [r3, #0]
 8042564:	461a      	mov	r2, r3
 8042566:	68fb      	ldr	r3, [r7, #12]
 8042568:	681b      	ldr	r3, [r3, #0]
 804256a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 804256e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8042570:	69bb      	ldr	r3, [r7, #24]
 8042572:	3302      	adds	r3, #2
 8042574:	61bb      	str	r3, [r7, #24]
 8042576:	e007      	b.n	8042588 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8042578:	69fb      	ldr	r3, [r7, #28]
 804257a:	781a      	ldrb	r2, [r3, #0]
 804257c:	68fb      	ldr	r3, [r7, #12]
 804257e:	681b      	ldr	r3, [r3, #0]
 8042580:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8042582:	69fb      	ldr	r3, [r7, #28]
 8042584:	3301      	adds	r3, #1
 8042586:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8042588:	68fb      	ldr	r3, [r7, #12]
 804258a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 804258e:	b29b      	uxth	r3, r3
 8042590:	3b01      	subs	r3, #1
 8042592:	b29a      	uxth	r2, r3
 8042594:	68fb      	ldr	r3, [r7, #12]
 8042596:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 804259a:	68fb      	ldr	r3, [r7, #12]
 804259c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80425a0:	b29b      	uxth	r3, r3
 80425a2:	2b00      	cmp	r3, #0
 80425a4:	d1c9      	bne.n	804253a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80425a6:	683b      	ldr	r3, [r7, #0]
 80425a8:	9300      	str	r3, [sp, #0]
 80425aa:	697b      	ldr	r3, [r7, #20]
 80425ac:	2200      	movs	r2, #0
 80425ae:	2140      	movs	r1, #64	@ 0x40
 80425b0:	68f8      	ldr	r0, [r7, #12]
 80425b2:	f000 fbc1 	bl	8042d38 <UART_WaitOnFlagUntilTimeout>
 80425b6:	4603      	mov	r3, r0
 80425b8:	2b00      	cmp	r3, #0
 80425ba:	d004      	beq.n	80425c6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80425bc:	68fb      	ldr	r3, [r7, #12]
 80425be:	2220      	movs	r2, #32
 80425c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80425c2:	2303      	movs	r3, #3
 80425c4:	e005      	b.n	80425d2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80425c6:	68fb      	ldr	r3, [r7, #12]
 80425c8:	2220      	movs	r2, #32
 80425ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80425cc:	2300      	movs	r3, #0
 80425ce:	e000      	b.n	80425d2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80425d0:	2302      	movs	r3, #2
  }
}
 80425d2:	4618      	mov	r0, r3
 80425d4:	3720      	adds	r7, #32
 80425d6:	46bd      	mov	sp, r7
 80425d8:	bd80      	pop	{r7, pc}
	...

080425dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80425dc:	b580      	push	{r7, lr}
 80425de:	b088      	sub	sp, #32
 80425e0:	af00      	add	r7, sp, #0
 80425e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80425e4:	2300      	movs	r3, #0
 80425e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80425e8:	687b      	ldr	r3, [r7, #4]
 80425ea:	689a      	ldr	r2, [r3, #8]
 80425ec:	687b      	ldr	r3, [r7, #4]
 80425ee:	691b      	ldr	r3, [r3, #16]
 80425f0:	431a      	orrs	r2, r3
 80425f2:	687b      	ldr	r3, [r7, #4]
 80425f4:	695b      	ldr	r3, [r3, #20]
 80425f6:	431a      	orrs	r2, r3
 80425f8:	687b      	ldr	r3, [r7, #4]
 80425fa:	69db      	ldr	r3, [r3, #28]
 80425fc:	4313      	orrs	r3, r2
 80425fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8042600:	687b      	ldr	r3, [r7, #4]
 8042602:	681b      	ldr	r3, [r3, #0]
 8042604:	681a      	ldr	r2, [r3, #0]
 8042606:	4ba6      	ldr	r3, [pc, #664]	@ (80428a0 <UART_SetConfig+0x2c4>)
 8042608:	4013      	ands	r3, r2
 804260a:	687a      	ldr	r2, [r7, #4]
 804260c:	6812      	ldr	r2, [r2, #0]
 804260e:	6979      	ldr	r1, [r7, #20]
 8042610:	430b      	orrs	r3, r1
 8042612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8042614:	687b      	ldr	r3, [r7, #4]
 8042616:	681b      	ldr	r3, [r3, #0]
 8042618:	685b      	ldr	r3, [r3, #4]
 804261a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 804261e:	687b      	ldr	r3, [r7, #4]
 8042620:	68da      	ldr	r2, [r3, #12]
 8042622:	687b      	ldr	r3, [r7, #4]
 8042624:	681b      	ldr	r3, [r3, #0]
 8042626:	430a      	orrs	r2, r1
 8042628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 804262a:	687b      	ldr	r3, [r7, #4]
 804262c:	699b      	ldr	r3, [r3, #24]
 804262e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8042630:	687b      	ldr	r3, [r7, #4]
 8042632:	6a1b      	ldr	r3, [r3, #32]
 8042634:	697a      	ldr	r2, [r7, #20]
 8042636:	4313      	orrs	r3, r2
 8042638:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 804263a:	687b      	ldr	r3, [r7, #4]
 804263c:	681b      	ldr	r3, [r3, #0]
 804263e:	689b      	ldr	r3, [r3, #8]
 8042640:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8042644:	687b      	ldr	r3, [r7, #4]
 8042646:	681b      	ldr	r3, [r3, #0]
 8042648:	697a      	ldr	r2, [r7, #20]
 804264a:	430a      	orrs	r2, r1
 804264c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 804264e:	687b      	ldr	r3, [r7, #4]
 8042650:	681b      	ldr	r3, [r3, #0]
 8042652:	4a94      	ldr	r2, [pc, #592]	@ (80428a4 <UART_SetConfig+0x2c8>)
 8042654:	4293      	cmp	r3, r2
 8042656:	d120      	bne.n	804269a <UART_SetConfig+0xbe>
 8042658:	4b93      	ldr	r3, [pc, #588]	@ (80428a8 <UART_SetConfig+0x2cc>)
 804265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 804265e:	f003 0303 	and.w	r3, r3, #3
 8042662:	2b03      	cmp	r3, #3
 8042664:	d816      	bhi.n	8042694 <UART_SetConfig+0xb8>
 8042666:	a201      	add	r2, pc, #4	@ (adr r2, 804266c <UART_SetConfig+0x90>)
 8042668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804266c:	0804267d 	.word	0x0804267d
 8042670:	08042689 	.word	0x08042689
 8042674:	08042683 	.word	0x08042683
 8042678:	0804268f 	.word	0x0804268f
 804267c:	2301      	movs	r3, #1
 804267e:	77fb      	strb	r3, [r7, #31]
 8042680:	e150      	b.n	8042924 <UART_SetConfig+0x348>
 8042682:	2302      	movs	r3, #2
 8042684:	77fb      	strb	r3, [r7, #31]
 8042686:	e14d      	b.n	8042924 <UART_SetConfig+0x348>
 8042688:	2304      	movs	r3, #4
 804268a:	77fb      	strb	r3, [r7, #31]
 804268c:	e14a      	b.n	8042924 <UART_SetConfig+0x348>
 804268e:	2308      	movs	r3, #8
 8042690:	77fb      	strb	r3, [r7, #31]
 8042692:	e147      	b.n	8042924 <UART_SetConfig+0x348>
 8042694:	2310      	movs	r3, #16
 8042696:	77fb      	strb	r3, [r7, #31]
 8042698:	e144      	b.n	8042924 <UART_SetConfig+0x348>
 804269a:	687b      	ldr	r3, [r7, #4]
 804269c:	681b      	ldr	r3, [r3, #0]
 804269e:	4a83      	ldr	r2, [pc, #524]	@ (80428ac <UART_SetConfig+0x2d0>)
 80426a0:	4293      	cmp	r3, r2
 80426a2:	d132      	bne.n	804270a <UART_SetConfig+0x12e>
 80426a4:	4b80      	ldr	r3, [pc, #512]	@ (80428a8 <UART_SetConfig+0x2cc>)
 80426a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80426aa:	f003 030c 	and.w	r3, r3, #12
 80426ae:	2b0c      	cmp	r3, #12
 80426b0:	d828      	bhi.n	8042704 <UART_SetConfig+0x128>
 80426b2:	a201      	add	r2, pc, #4	@ (adr r2, 80426b8 <UART_SetConfig+0xdc>)
 80426b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80426b8:	080426ed 	.word	0x080426ed
 80426bc:	08042705 	.word	0x08042705
 80426c0:	08042705 	.word	0x08042705
 80426c4:	08042705 	.word	0x08042705
 80426c8:	080426f9 	.word	0x080426f9
 80426cc:	08042705 	.word	0x08042705
 80426d0:	08042705 	.word	0x08042705
 80426d4:	08042705 	.word	0x08042705
 80426d8:	080426f3 	.word	0x080426f3
 80426dc:	08042705 	.word	0x08042705
 80426e0:	08042705 	.word	0x08042705
 80426e4:	08042705 	.word	0x08042705
 80426e8:	080426ff 	.word	0x080426ff
 80426ec:	2300      	movs	r3, #0
 80426ee:	77fb      	strb	r3, [r7, #31]
 80426f0:	e118      	b.n	8042924 <UART_SetConfig+0x348>
 80426f2:	2302      	movs	r3, #2
 80426f4:	77fb      	strb	r3, [r7, #31]
 80426f6:	e115      	b.n	8042924 <UART_SetConfig+0x348>
 80426f8:	2304      	movs	r3, #4
 80426fa:	77fb      	strb	r3, [r7, #31]
 80426fc:	e112      	b.n	8042924 <UART_SetConfig+0x348>
 80426fe:	2308      	movs	r3, #8
 8042700:	77fb      	strb	r3, [r7, #31]
 8042702:	e10f      	b.n	8042924 <UART_SetConfig+0x348>
 8042704:	2310      	movs	r3, #16
 8042706:	77fb      	strb	r3, [r7, #31]
 8042708:	e10c      	b.n	8042924 <UART_SetConfig+0x348>
 804270a:	687b      	ldr	r3, [r7, #4]
 804270c:	681b      	ldr	r3, [r3, #0]
 804270e:	4a68      	ldr	r2, [pc, #416]	@ (80428b0 <UART_SetConfig+0x2d4>)
 8042710:	4293      	cmp	r3, r2
 8042712:	d120      	bne.n	8042756 <UART_SetConfig+0x17a>
 8042714:	4b64      	ldr	r3, [pc, #400]	@ (80428a8 <UART_SetConfig+0x2cc>)
 8042716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 804271a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 804271e:	2b30      	cmp	r3, #48	@ 0x30
 8042720:	d013      	beq.n	804274a <UART_SetConfig+0x16e>
 8042722:	2b30      	cmp	r3, #48	@ 0x30
 8042724:	d814      	bhi.n	8042750 <UART_SetConfig+0x174>
 8042726:	2b20      	cmp	r3, #32
 8042728:	d009      	beq.n	804273e <UART_SetConfig+0x162>
 804272a:	2b20      	cmp	r3, #32
 804272c:	d810      	bhi.n	8042750 <UART_SetConfig+0x174>
 804272e:	2b00      	cmp	r3, #0
 8042730:	d002      	beq.n	8042738 <UART_SetConfig+0x15c>
 8042732:	2b10      	cmp	r3, #16
 8042734:	d006      	beq.n	8042744 <UART_SetConfig+0x168>
 8042736:	e00b      	b.n	8042750 <UART_SetConfig+0x174>
 8042738:	2300      	movs	r3, #0
 804273a:	77fb      	strb	r3, [r7, #31]
 804273c:	e0f2      	b.n	8042924 <UART_SetConfig+0x348>
 804273e:	2302      	movs	r3, #2
 8042740:	77fb      	strb	r3, [r7, #31]
 8042742:	e0ef      	b.n	8042924 <UART_SetConfig+0x348>
 8042744:	2304      	movs	r3, #4
 8042746:	77fb      	strb	r3, [r7, #31]
 8042748:	e0ec      	b.n	8042924 <UART_SetConfig+0x348>
 804274a:	2308      	movs	r3, #8
 804274c:	77fb      	strb	r3, [r7, #31]
 804274e:	e0e9      	b.n	8042924 <UART_SetConfig+0x348>
 8042750:	2310      	movs	r3, #16
 8042752:	77fb      	strb	r3, [r7, #31]
 8042754:	e0e6      	b.n	8042924 <UART_SetConfig+0x348>
 8042756:	687b      	ldr	r3, [r7, #4]
 8042758:	681b      	ldr	r3, [r3, #0]
 804275a:	4a56      	ldr	r2, [pc, #344]	@ (80428b4 <UART_SetConfig+0x2d8>)
 804275c:	4293      	cmp	r3, r2
 804275e:	d120      	bne.n	80427a2 <UART_SetConfig+0x1c6>
 8042760:	4b51      	ldr	r3, [pc, #324]	@ (80428a8 <UART_SetConfig+0x2cc>)
 8042762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8042766:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 804276a:	2bc0      	cmp	r3, #192	@ 0xc0
 804276c:	d013      	beq.n	8042796 <UART_SetConfig+0x1ba>
 804276e:	2bc0      	cmp	r3, #192	@ 0xc0
 8042770:	d814      	bhi.n	804279c <UART_SetConfig+0x1c0>
 8042772:	2b80      	cmp	r3, #128	@ 0x80
 8042774:	d009      	beq.n	804278a <UART_SetConfig+0x1ae>
 8042776:	2b80      	cmp	r3, #128	@ 0x80
 8042778:	d810      	bhi.n	804279c <UART_SetConfig+0x1c0>
 804277a:	2b00      	cmp	r3, #0
 804277c:	d002      	beq.n	8042784 <UART_SetConfig+0x1a8>
 804277e:	2b40      	cmp	r3, #64	@ 0x40
 8042780:	d006      	beq.n	8042790 <UART_SetConfig+0x1b4>
 8042782:	e00b      	b.n	804279c <UART_SetConfig+0x1c0>
 8042784:	2300      	movs	r3, #0
 8042786:	77fb      	strb	r3, [r7, #31]
 8042788:	e0cc      	b.n	8042924 <UART_SetConfig+0x348>
 804278a:	2302      	movs	r3, #2
 804278c:	77fb      	strb	r3, [r7, #31]
 804278e:	e0c9      	b.n	8042924 <UART_SetConfig+0x348>
 8042790:	2304      	movs	r3, #4
 8042792:	77fb      	strb	r3, [r7, #31]
 8042794:	e0c6      	b.n	8042924 <UART_SetConfig+0x348>
 8042796:	2308      	movs	r3, #8
 8042798:	77fb      	strb	r3, [r7, #31]
 804279a:	e0c3      	b.n	8042924 <UART_SetConfig+0x348>
 804279c:	2310      	movs	r3, #16
 804279e:	77fb      	strb	r3, [r7, #31]
 80427a0:	e0c0      	b.n	8042924 <UART_SetConfig+0x348>
 80427a2:	687b      	ldr	r3, [r7, #4]
 80427a4:	681b      	ldr	r3, [r3, #0]
 80427a6:	4a44      	ldr	r2, [pc, #272]	@ (80428b8 <UART_SetConfig+0x2dc>)
 80427a8:	4293      	cmp	r3, r2
 80427aa:	d125      	bne.n	80427f8 <UART_SetConfig+0x21c>
 80427ac:	4b3e      	ldr	r3, [pc, #248]	@ (80428a8 <UART_SetConfig+0x2cc>)
 80427ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80427b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80427b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80427ba:	d017      	beq.n	80427ec <UART_SetConfig+0x210>
 80427bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80427c0:	d817      	bhi.n	80427f2 <UART_SetConfig+0x216>
 80427c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80427c6:	d00b      	beq.n	80427e0 <UART_SetConfig+0x204>
 80427c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80427cc:	d811      	bhi.n	80427f2 <UART_SetConfig+0x216>
 80427ce:	2b00      	cmp	r3, #0
 80427d0:	d003      	beq.n	80427da <UART_SetConfig+0x1fe>
 80427d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80427d6:	d006      	beq.n	80427e6 <UART_SetConfig+0x20a>
 80427d8:	e00b      	b.n	80427f2 <UART_SetConfig+0x216>
 80427da:	2300      	movs	r3, #0
 80427dc:	77fb      	strb	r3, [r7, #31]
 80427de:	e0a1      	b.n	8042924 <UART_SetConfig+0x348>
 80427e0:	2302      	movs	r3, #2
 80427e2:	77fb      	strb	r3, [r7, #31]
 80427e4:	e09e      	b.n	8042924 <UART_SetConfig+0x348>
 80427e6:	2304      	movs	r3, #4
 80427e8:	77fb      	strb	r3, [r7, #31]
 80427ea:	e09b      	b.n	8042924 <UART_SetConfig+0x348>
 80427ec:	2308      	movs	r3, #8
 80427ee:	77fb      	strb	r3, [r7, #31]
 80427f0:	e098      	b.n	8042924 <UART_SetConfig+0x348>
 80427f2:	2310      	movs	r3, #16
 80427f4:	77fb      	strb	r3, [r7, #31]
 80427f6:	e095      	b.n	8042924 <UART_SetConfig+0x348>
 80427f8:	687b      	ldr	r3, [r7, #4]
 80427fa:	681b      	ldr	r3, [r3, #0]
 80427fc:	4a2f      	ldr	r2, [pc, #188]	@ (80428bc <UART_SetConfig+0x2e0>)
 80427fe:	4293      	cmp	r3, r2
 8042800:	d125      	bne.n	804284e <UART_SetConfig+0x272>
 8042802:	4b29      	ldr	r3, [pc, #164]	@ (80428a8 <UART_SetConfig+0x2cc>)
 8042804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8042808:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 804280c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8042810:	d017      	beq.n	8042842 <UART_SetConfig+0x266>
 8042812:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8042816:	d817      	bhi.n	8042848 <UART_SetConfig+0x26c>
 8042818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 804281c:	d00b      	beq.n	8042836 <UART_SetConfig+0x25a>
 804281e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8042822:	d811      	bhi.n	8042848 <UART_SetConfig+0x26c>
 8042824:	2b00      	cmp	r3, #0
 8042826:	d003      	beq.n	8042830 <UART_SetConfig+0x254>
 8042828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 804282c:	d006      	beq.n	804283c <UART_SetConfig+0x260>
 804282e:	e00b      	b.n	8042848 <UART_SetConfig+0x26c>
 8042830:	2301      	movs	r3, #1
 8042832:	77fb      	strb	r3, [r7, #31]
 8042834:	e076      	b.n	8042924 <UART_SetConfig+0x348>
 8042836:	2302      	movs	r3, #2
 8042838:	77fb      	strb	r3, [r7, #31]
 804283a:	e073      	b.n	8042924 <UART_SetConfig+0x348>
 804283c:	2304      	movs	r3, #4
 804283e:	77fb      	strb	r3, [r7, #31]
 8042840:	e070      	b.n	8042924 <UART_SetConfig+0x348>
 8042842:	2308      	movs	r3, #8
 8042844:	77fb      	strb	r3, [r7, #31]
 8042846:	e06d      	b.n	8042924 <UART_SetConfig+0x348>
 8042848:	2310      	movs	r3, #16
 804284a:	77fb      	strb	r3, [r7, #31]
 804284c:	e06a      	b.n	8042924 <UART_SetConfig+0x348>
 804284e:	687b      	ldr	r3, [r7, #4]
 8042850:	681b      	ldr	r3, [r3, #0]
 8042852:	4a1b      	ldr	r2, [pc, #108]	@ (80428c0 <UART_SetConfig+0x2e4>)
 8042854:	4293      	cmp	r3, r2
 8042856:	d138      	bne.n	80428ca <UART_SetConfig+0x2ee>
 8042858:	4b13      	ldr	r3, [pc, #76]	@ (80428a8 <UART_SetConfig+0x2cc>)
 804285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 804285e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8042862:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8042866:	d017      	beq.n	8042898 <UART_SetConfig+0x2bc>
 8042868:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 804286c:	d82a      	bhi.n	80428c4 <UART_SetConfig+0x2e8>
 804286e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8042872:	d00b      	beq.n	804288c <UART_SetConfig+0x2b0>
 8042874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8042878:	d824      	bhi.n	80428c4 <UART_SetConfig+0x2e8>
 804287a:	2b00      	cmp	r3, #0
 804287c:	d003      	beq.n	8042886 <UART_SetConfig+0x2aa>
 804287e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8042882:	d006      	beq.n	8042892 <UART_SetConfig+0x2b6>
 8042884:	e01e      	b.n	80428c4 <UART_SetConfig+0x2e8>
 8042886:	2300      	movs	r3, #0
 8042888:	77fb      	strb	r3, [r7, #31]
 804288a:	e04b      	b.n	8042924 <UART_SetConfig+0x348>
 804288c:	2302      	movs	r3, #2
 804288e:	77fb      	strb	r3, [r7, #31]
 8042890:	e048      	b.n	8042924 <UART_SetConfig+0x348>
 8042892:	2304      	movs	r3, #4
 8042894:	77fb      	strb	r3, [r7, #31]
 8042896:	e045      	b.n	8042924 <UART_SetConfig+0x348>
 8042898:	2308      	movs	r3, #8
 804289a:	77fb      	strb	r3, [r7, #31]
 804289c:	e042      	b.n	8042924 <UART_SetConfig+0x348>
 804289e:	bf00      	nop
 80428a0:	efff69f3 	.word	0xefff69f3
 80428a4:	40011000 	.word	0x40011000
 80428a8:	40023800 	.word	0x40023800
 80428ac:	40004400 	.word	0x40004400
 80428b0:	40004800 	.word	0x40004800
 80428b4:	40004c00 	.word	0x40004c00
 80428b8:	40005000 	.word	0x40005000
 80428bc:	40011400 	.word	0x40011400
 80428c0:	40007800 	.word	0x40007800
 80428c4:	2310      	movs	r3, #16
 80428c6:	77fb      	strb	r3, [r7, #31]
 80428c8:	e02c      	b.n	8042924 <UART_SetConfig+0x348>
 80428ca:	687b      	ldr	r3, [r7, #4]
 80428cc:	681b      	ldr	r3, [r3, #0]
 80428ce:	4a72      	ldr	r2, [pc, #456]	@ (8042a98 <UART_SetConfig+0x4bc>)
 80428d0:	4293      	cmp	r3, r2
 80428d2:	d125      	bne.n	8042920 <UART_SetConfig+0x344>
 80428d4:	4b71      	ldr	r3, [pc, #452]	@ (8042a9c <UART_SetConfig+0x4c0>)
 80428d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80428da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80428de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80428e2:	d017      	beq.n	8042914 <UART_SetConfig+0x338>
 80428e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80428e8:	d817      	bhi.n	804291a <UART_SetConfig+0x33e>
 80428ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80428ee:	d00b      	beq.n	8042908 <UART_SetConfig+0x32c>
 80428f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80428f4:	d811      	bhi.n	804291a <UART_SetConfig+0x33e>
 80428f6:	2b00      	cmp	r3, #0
 80428f8:	d003      	beq.n	8042902 <UART_SetConfig+0x326>
 80428fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80428fe:	d006      	beq.n	804290e <UART_SetConfig+0x332>
 8042900:	e00b      	b.n	804291a <UART_SetConfig+0x33e>
 8042902:	2300      	movs	r3, #0
 8042904:	77fb      	strb	r3, [r7, #31]
 8042906:	e00d      	b.n	8042924 <UART_SetConfig+0x348>
 8042908:	2302      	movs	r3, #2
 804290a:	77fb      	strb	r3, [r7, #31]
 804290c:	e00a      	b.n	8042924 <UART_SetConfig+0x348>
 804290e:	2304      	movs	r3, #4
 8042910:	77fb      	strb	r3, [r7, #31]
 8042912:	e007      	b.n	8042924 <UART_SetConfig+0x348>
 8042914:	2308      	movs	r3, #8
 8042916:	77fb      	strb	r3, [r7, #31]
 8042918:	e004      	b.n	8042924 <UART_SetConfig+0x348>
 804291a:	2310      	movs	r3, #16
 804291c:	77fb      	strb	r3, [r7, #31]
 804291e:	e001      	b.n	8042924 <UART_SetConfig+0x348>
 8042920:	2310      	movs	r3, #16
 8042922:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8042924:	687b      	ldr	r3, [r7, #4]
 8042926:	69db      	ldr	r3, [r3, #28]
 8042928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 804292c:	d15b      	bne.n	80429e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 804292e:	7ffb      	ldrb	r3, [r7, #31]
 8042930:	2b08      	cmp	r3, #8
 8042932:	d828      	bhi.n	8042986 <UART_SetConfig+0x3aa>
 8042934:	a201      	add	r2, pc, #4	@ (adr r2, 804293c <UART_SetConfig+0x360>)
 8042936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804293a:	bf00      	nop
 804293c:	08042961 	.word	0x08042961
 8042940:	08042969 	.word	0x08042969
 8042944:	08042971 	.word	0x08042971
 8042948:	08042987 	.word	0x08042987
 804294c:	08042977 	.word	0x08042977
 8042950:	08042987 	.word	0x08042987
 8042954:	08042987 	.word	0x08042987
 8042958:	08042987 	.word	0x08042987
 804295c:	0804297f 	.word	0x0804297f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042960:	f7ff f914 	bl	8041b8c <HAL_RCC_GetPCLK1Freq>
 8042964:	61b8      	str	r0, [r7, #24]
        break;
 8042966:	e013      	b.n	8042990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042968:	f7ff f924 	bl	8041bb4 <HAL_RCC_GetPCLK2Freq>
 804296c:	61b8      	str	r0, [r7, #24]
        break;
 804296e:	e00f      	b.n	8042990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042970:	4b4b      	ldr	r3, [pc, #300]	@ (8042aa0 <UART_SetConfig+0x4c4>)
 8042972:	61bb      	str	r3, [r7, #24]
        break;
 8042974:	e00c      	b.n	8042990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042976:	f7ff f837 	bl	80419e8 <HAL_RCC_GetSysClockFreq>
 804297a:	61b8      	str	r0, [r7, #24]
        break;
 804297c:	e008      	b.n	8042990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804297e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042982:	61bb      	str	r3, [r7, #24]
        break;
 8042984:	e004      	b.n	8042990 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8042986:	2300      	movs	r3, #0
 8042988:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 804298a:	2301      	movs	r3, #1
 804298c:	77bb      	strb	r3, [r7, #30]
        break;
 804298e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8042990:	69bb      	ldr	r3, [r7, #24]
 8042992:	2b00      	cmp	r3, #0
 8042994:	d074      	beq.n	8042a80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8042996:	69bb      	ldr	r3, [r7, #24]
 8042998:	005a      	lsls	r2, r3, #1
 804299a:	687b      	ldr	r3, [r7, #4]
 804299c:	685b      	ldr	r3, [r3, #4]
 804299e:	085b      	lsrs	r3, r3, #1
 80429a0:	441a      	add	r2, r3
 80429a2:	687b      	ldr	r3, [r7, #4]
 80429a4:	685b      	ldr	r3, [r3, #4]
 80429a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80429aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80429ac:	693b      	ldr	r3, [r7, #16]
 80429ae:	2b0f      	cmp	r3, #15
 80429b0:	d916      	bls.n	80429e0 <UART_SetConfig+0x404>
 80429b2:	693b      	ldr	r3, [r7, #16]
 80429b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80429b8:	d212      	bcs.n	80429e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80429ba:	693b      	ldr	r3, [r7, #16]
 80429bc:	b29b      	uxth	r3, r3
 80429be:	f023 030f 	bic.w	r3, r3, #15
 80429c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80429c4:	693b      	ldr	r3, [r7, #16]
 80429c6:	085b      	lsrs	r3, r3, #1
 80429c8:	b29b      	uxth	r3, r3
 80429ca:	f003 0307 	and.w	r3, r3, #7
 80429ce:	b29a      	uxth	r2, r3
 80429d0:	89fb      	ldrh	r3, [r7, #14]
 80429d2:	4313      	orrs	r3, r2
 80429d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80429d6:	687b      	ldr	r3, [r7, #4]
 80429d8:	681b      	ldr	r3, [r3, #0]
 80429da:	89fa      	ldrh	r2, [r7, #14]
 80429dc:	60da      	str	r2, [r3, #12]
 80429de:	e04f      	b.n	8042a80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80429e0:	2301      	movs	r3, #1
 80429e2:	77bb      	strb	r3, [r7, #30]
 80429e4:	e04c      	b.n	8042a80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80429e6:	7ffb      	ldrb	r3, [r7, #31]
 80429e8:	2b08      	cmp	r3, #8
 80429ea:	d828      	bhi.n	8042a3e <UART_SetConfig+0x462>
 80429ec:	a201      	add	r2, pc, #4	@ (adr r2, 80429f4 <UART_SetConfig+0x418>)
 80429ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80429f2:	bf00      	nop
 80429f4:	08042a19 	.word	0x08042a19
 80429f8:	08042a21 	.word	0x08042a21
 80429fc:	08042a29 	.word	0x08042a29
 8042a00:	08042a3f 	.word	0x08042a3f
 8042a04:	08042a2f 	.word	0x08042a2f
 8042a08:	08042a3f 	.word	0x08042a3f
 8042a0c:	08042a3f 	.word	0x08042a3f
 8042a10:	08042a3f 	.word	0x08042a3f
 8042a14:	08042a37 	.word	0x08042a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042a18:	f7ff f8b8 	bl	8041b8c <HAL_RCC_GetPCLK1Freq>
 8042a1c:	61b8      	str	r0, [r7, #24]
        break;
 8042a1e:	e013      	b.n	8042a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042a20:	f7ff f8c8 	bl	8041bb4 <HAL_RCC_GetPCLK2Freq>
 8042a24:	61b8      	str	r0, [r7, #24]
        break;
 8042a26:	e00f      	b.n	8042a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042a28:	4b1d      	ldr	r3, [pc, #116]	@ (8042aa0 <UART_SetConfig+0x4c4>)
 8042a2a:	61bb      	str	r3, [r7, #24]
        break;
 8042a2c:	e00c      	b.n	8042a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042a2e:	f7fe ffdb 	bl	80419e8 <HAL_RCC_GetSysClockFreq>
 8042a32:	61b8      	str	r0, [r7, #24]
        break;
 8042a34:	e008      	b.n	8042a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042a3a:	61bb      	str	r3, [r7, #24]
        break;
 8042a3c:	e004      	b.n	8042a48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8042a3e:	2300      	movs	r3, #0
 8042a40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8042a42:	2301      	movs	r3, #1
 8042a44:	77bb      	strb	r3, [r7, #30]
        break;
 8042a46:	bf00      	nop
    }

    if (pclk != 0U)
 8042a48:	69bb      	ldr	r3, [r7, #24]
 8042a4a:	2b00      	cmp	r3, #0
 8042a4c:	d018      	beq.n	8042a80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8042a4e:	687b      	ldr	r3, [r7, #4]
 8042a50:	685b      	ldr	r3, [r3, #4]
 8042a52:	085a      	lsrs	r2, r3, #1
 8042a54:	69bb      	ldr	r3, [r7, #24]
 8042a56:	441a      	add	r2, r3
 8042a58:	687b      	ldr	r3, [r7, #4]
 8042a5a:	685b      	ldr	r3, [r3, #4]
 8042a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8042a60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042a62:	693b      	ldr	r3, [r7, #16]
 8042a64:	2b0f      	cmp	r3, #15
 8042a66:	d909      	bls.n	8042a7c <UART_SetConfig+0x4a0>
 8042a68:	693b      	ldr	r3, [r7, #16]
 8042a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042a6e:	d205      	bcs.n	8042a7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8042a70:	693b      	ldr	r3, [r7, #16]
 8042a72:	b29a      	uxth	r2, r3
 8042a74:	687b      	ldr	r3, [r7, #4]
 8042a76:	681b      	ldr	r3, [r3, #0]
 8042a78:	60da      	str	r2, [r3, #12]
 8042a7a:	e001      	b.n	8042a80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8042a7c:	2301      	movs	r3, #1
 8042a7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8042a80:	687b      	ldr	r3, [r7, #4]
 8042a82:	2200      	movs	r2, #0
 8042a84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8042a86:	687b      	ldr	r3, [r7, #4]
 8042a88:	2200      	movs	r2, #0
 8042a8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8042a8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8042a8e:	4618      	mov	r0, r3
 8042a90:	3720      	adds	r7, #32
 8042a92:	46bd      	mov	sp, r7
 8042a94:	bd80      	pop	{r7, pc}
 8042a96:	bf00      	nop
 8042a98:	40007c00 	.word	0x40007c00
 8042a9c:	40023800 	.word	0x40023800
 8042aa0:	00f42400 	.word	0x00f42400

08042aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8042aa4:	b480      	push	{r7}
 8042aa6:	b083      	sub	sp, #12
 8042aa8:	af00      	add	r7, sp, #0
 8042aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8042aac:	687b      	ldr	r3, [r7, #4]
 8042aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042ab0:	f003 0308 	and.w	r3, r3, #8
 8042ab4:	2b00      	cmp	r3, #0
 8042ab6:	d00a      	beq.n	8042ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8042ab8:	687b      	ldr	r3, [r7, #4]
 8042aba:	681b      	ldr	r3, [r3, #0]
 8042abc:	685b      	ldr	r3, [r3, #4]
 8042abe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8042ac2:	687b      	ldr	r3, [r7, #4]
 8042ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8042ac6:	687b      	ldr	r3, [r7, #4]
 8042ac8:	681b      	ldr	r3, [r3, #0]
 8042aca:	430a      	orrs	r2, r1
 8042acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8042ace:	687b      	ldr	r3, [r7, #4]
 8042ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042ad2:	f003 0301 	and.w	r3, r3, #1
 8042ad6:	2b00      	cmp	r3, #0
 8042ad8:	d00a      	beq.n	8042af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8042ada:	687b      	ldr	r3, [r7, #4]
 8042adc:	681b      	ldr	r3, [r3, #0]
 8042ade:	685b      	ldr	r3, [r3, #4]
 8042ae0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8042ae4:	687b      	ldr	r3, [r7, #4]
 8042ae6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8042ae8:	687b      	ldr	r3, [r7, #4]
 8042aea:	681b      	ldr	r3, [r3, #0]
 8042aec:	430a      	orrs	r2, r1
 8042aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8042af0:	687b      	ldr	r3, [r7, #4]
 8042af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042af4:	f003 0302 	and.w	r3, r3, #2
 8042af8:	2b00      	cmp	r3, #0
 8042afa:	d00a      	beq.n	8042b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8042afc:	687b      	ldr	r3, [r7, #4]
 8042afe:	681b      	ldr	r3, [r3, #0]
 8042b00:	685b      	ldr	r3, [r3, #4]
 8042b02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8042b06:	687b      	ldr	r3, [r7, #4]
 8042b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8042b0a:	687b      	ldr	r3, [r7, #4]
 8042b0c:	681b      	ldr	r3, [r3, #0]
 8042b0e:	430a      	orrs	r2, r1
 8042b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8042b12:	687b      	ldr	r3, [r7, #4]
 8042b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042b16:	f003 0304 	and.w	r3, r3, #4
 8042b1a:	2b00      	cmp	r3, #0
 8042b1c:	d00a      	beq.n	8042b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8042b1e:	687b      	ldr	r3, [r7, #4]
 8042b20:	681b      	ldr	r3, [r3, #0]
 8042b22:	685b      	ldr	r3, [r3, #4]
 8042b24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8042b28:	687b      	ldr	r3, [r7, #4]
 8042b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8042b2c:	687b      	ldr	r3, [r7, #4]
 8042b2e:	681b      	ldr	r3, [r3, #0]
 8042b30:	430a      	orrs	r2, r1
 8042b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8042b34:	687b      	ldr	r3, [r7, #4]
 8042b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042b38:	f003 0310 	and.w	r3, r3, #16
 8042b3c:	2b00      	cmp	r3, #0
 8042b3e:	d00a      	beq.n	8042b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8042b40:	687b      	ldr	r3, [r7, #4]
 8042b42:	681b      	ldr	r3, [r3, #0]
 8042b44:	689b      	ldr	r3, [r3, #8]
 8042b46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8042b4a:	687b      	ldr	r3, [r7, #4]
 8042b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8042b4e:	687b      	ldr	r3, [r7, #4]
 8042b50:	681b      	ldr	r3, [r3, #0]
 8042b52:	430a      	orrs	r2, r1
 8042b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8042b56:	687b      	ldr	r3, [r7, #4]
 8042b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042b5a:	f003 0320 	and.w	r3, r3, #32
 8042b5e:	2b00      	cmp	r3, #0
 8042b60:	d00a      	beq.n	8042b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8042b62:	687b      	ldr	r3, [r7, #4]
 8042b64:	681b      	ldr	r3, [r3, #0]
 8042b66:	689b      	ldr	r3, [r3, #8]
 8042b68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8042b6c:	687b      	ldr	r3, [r7, #4]
 8042b6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8042b70:	687b      	ldr	r3, [r7, #4]
 8042b72:	681b      	ldr	r3, [r3, #0]
 8042b74:	430a      	orrs	r2, r1
 8042b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042b78:	687b      	ldr	r3, [r7, #4]
 8042b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8042b80:	2b00      	cmp	r3, #0
 8042b82:	d01a      	beq.n	8042bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8042b84:	687b      	ldr	r3, [r7, #4]
 8042b86:	681b      	ldr	r3, [r3, #0]
 8042b88:	685b      	ldr	r3, [r3, #4]
 8042b8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8042b8e:	687b      	ldr	r3, [r7, #4]
 8042b90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8042b92:	687b      	ldr	r3, [r7, #4]
 8042b94:	681b      	ldr	r3, [r3, #0]
 8042b96:	430a      	orrs	r2, r1
 8042b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042b9a:	687b      	ldr	r3, [r7, #4]
 8042b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8042ba2:	d10a      	bne.n	8042bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8042ba4:	687b      	ldr	r3, [r7, #4]
 8042ba6:	681b      	ldr	r3, [r3, #0]
 8042ba8:	685b      	ldr	r3, [r3, #4]
 8042baa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8042bae:	687b      	ldr	r3, [r7, #4]
 8042bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8042bb2:	687b      	ldr	r3, [r7, #4]
 8042bb4:	681b      	ldr	r3, [r3, #0]
 8042bb6:	430a      	orrs	r2, r1
 8042bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8042bba:	687b      	ldr	r3, [r7, #4]
 8042bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8042bc2:	2b00      	cmp	r3, #0
 8042bc4:	d00a      	beq.n	8042bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8042bc6:	687b      	ldr	r3, [r7, #4]
 8042bc8:	681b      	ldr	r3, [r3, #0]
 8042bca:	685b      	ldr	r3, [r3, #4]
 8042bcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8042bd0:	687b      	ldr	r3, [r7, #4]
 8042bd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8042bd4:	687b      	ldr	r3, [r7, #4]
 8042bd6:	681b      	ldr	r3, [r3, #0]
 8042bd8:	430a      	orrs	r2, r1
 8042bda:	605a      	str	r2, [r3, #4]
  }
}
 8042bdc:	bf00      	nop
 8042bde:	370c      	adds	r7, #12
 8042be0:	46bd      	mov	sp, r7
 8042be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042be6:	4770      	bx	lr

08042be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8042be8:	b580      	push	{r7, lr}
 8042bea:	b098      	sub	sp, #96	@ 0x60
 8042bec:	af02      	add	r7, sp, #8
 8042bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042bf0:	687b      	ldr	r3, [r7, #4]
 8042bf2:	2200      	movs	r2, #0
 8042bf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8042bf8:	f7fe f808 	bl	8040c0c <HAL_GetTick>
 8042bfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8042bfe:	687b      	ldr	r3, [r7, #4]
 8042c00:	681b      	ldr	r3, [r3, #0]
 8042c02:	681b      	ldr	r3, [r3, #0]
 8042c04:	f003 0308 	and.w	r3, r3, #8
 8042c08:	2b08      	cmp	r3, #8
 8042c0a:	d12e      	bne.n	8042c6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042c0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8042c10:	9300      	str	r3, [sp, #0]
 8042c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8042c14:	2200      	movs	r2, #0
 8042c16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8042c1a:	6878      	ldr	r0, [r7, #4]
 8042c1c:	f000 f88c 	bl	8042d38 <UART_WaitOnFlagUntilTimeout>
 8042c20:	4603      	mov	r3, r0
 8042c22:	2b00      	cmp	r3, #0
 8042c24:	d021      	beq.n	8042c6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8042c26:	687b      	ldr	r3, [r7, #4]
 8042c28:	681b      	ldr	r3, [r3, #0]
 8042c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042c2e:	e853 3f00 	ldrex	r3, [r3]
 8042c32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8042c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8042c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8042c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8042c3c:	687b      	ldr	r3, [r7, #4]
 8042c3e:	681b      	ldr	r3, [r3, #0]
 8042c40:	461a      	mov	r2, r3
 8042c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8042c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8042c46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8042c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8042c4c:	e841 2300 	strex	r3, r2, [r1]
 8042c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8042c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8042c54:	2b00      	cmp	r3, #0
 8042c56:	d1e6      	bne.n	8042c26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8042c58:	687b      	ldr	r3, [r7, #4]
 8042c5a:	2220      	movs	r2, #32
 8042c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8042c5e:	687b      	ldr	r3, [r7, #4]
 8042c60:	2200      	movs	r2, #0
 8042c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042c66:	2303      	movs	r3, #3
 8042c68:	e062      	b.n	8042d30 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8042c6a:	687b      	ldr	r3, [r7, #4]
 8042c6c:	681b      	ldr	r3, [r3, #0]
 8042c6e:	681b      	ldr	r3, [r3, #0]
 8042c70:	f003 0304 	and.w	r3, r3, #4
 8042c74:	2b04      	cmp	r3, #4
 8042c76:	d149      	bne.n	8042d0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042c78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8042c7c:	9300      	str	r3, [sp, #0]
 8042c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8042c80:	2200      	movs	r2, #0
 8042c82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8042c86:	6878      	ldr	r0, [r7, #4]
 8042c88:	f000 f856 	bl	8042d38 <UART_WaitOnFlagUntilTimeout>
 8042c8c:	4603      	mov	r3, r0
 8042c8e:	2b00      	cmp	r3, #0
 8042c90:	d03c      	beq.n	8042d0c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8042c92:	687b      	ldr	r3, [r7, #4]
 8042c94:	681b      	ldr	r3, [r3, #0]
 8042c96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042c9a:	e853 3f00 	ldrex	r3, [r3]
 8042c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8042ca0:	6a3b      	ldr	r3, [r7, #32]
 8042ca2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8042ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8042ca8:	687b      	ldr	r3, [r7, #4]
 8042caa:	681b      	ldr	r3, [r3, #0]
 8042cac:	461a      	mov	r2, r3
 8042cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8042cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8042cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042cb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8042cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8042cb8:	e841 2300 	strex	r3, r2, [r1]
 8042cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8042cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8042cc0:	2b00      	cmp	r3, #0
 8042cc2:	d1e6      	bne.n	8042c92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042cc4:	687b      	ldr	r3, [r7, #4]
 8042cc6:	681b      	ldr	r3, [r3, #0]
 8042cc8:	3308      	adds	r3, #8
 8042cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042ccc:	693b      	ldr	r3, [r7, #16]
 8042cce:	e853 3f00 	ldrex	r3, [r3]
 8042cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8042cd4:	68fb      	ldr	r3, [r7, #12]
 8042cd6:	f023 0301 	bic.w	r3, r3, #1
 8042cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8042cdc:	687b      	ldr	r3, [r7, #4]
 8042cde:	681b      	ldr	r3, [r3, #0]
 8042ce0:	3308      	adds	r3, #8
 8042ce2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8042ce4:	61fa      	str	r2, [r7, #28]
 8042ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042ce8:	69b9      	ldr	r1, [r7, #24]
 8042cea:	69fa      	ldr	r2, [r7, #28]
 8042cec:	e841 2300 	strex	r3, r2, [r1]
 8042cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8042cf2:	697b      	ldr	r3, [r7, #20]
 8042cf4:	2b00      	cmp	r3, #0
 8042cf6:	d1e5      	bne.n	8042cc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8042cf8:	687b      	ldr	r3, [r7, #4]
 8042cfa:	2220      	movs	r2, #32
 8042cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8042d00:	687b      	ldr	r3, [r7, #4]
 8042d02:	2200      	movs	r2, #0
 8042d04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042d08:	2303      	movs	r3, #3
 8042d0a:	e011      	b.n	8042d30 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8042d0c:	687b      	ldr	r3, [r7, #4]
 8042d0e:	2220      	movs	r2, #32
 8042d10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8042d12:	687b      	ldr	r3, [r7, #4]
 8042d14:	2220      	movs	r2, #32
 8042d16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042d1a:	687b      	ldr	r3, [r7, #4]
 8042d1c:	2200      	movs	r2, #0
 8042d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8042d20:	687b      	ldr	r3, [r7, #4]
 8042d22:	2200      	movs	r2, #0
 8042d24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8042d26:	687b      	ldr	r3, [r7, #4]
 8042d28:	2200      	movs	r2, #0
 8042d2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8042d2e:	2300      	movs	r3, #0
}
 8042d30:	4618      	mov	r0, r3
 8042d32:	3758      	adds	r7, #88	@ 0x58
 8042d34:	46bd      	mov	sp, r7
 8042d36:	bd80      	pop	{r7, pc}

08042d38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8042d38:	b580      	push	{r7, lr}
 8042d3a:	b084      	sub	sp, #16
 8042d3c:	af00      	add	r7, sp, #0
 8042d3e:	60f8      	str	r0, [r7, #12]
 8042d40:	60b9      	str	r1, [r7, #8]
 8042d42:	603b      	str	r3, [r7, #0]
 8042d44:	4613      	mov	r3, r2
 8042d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042d48:	e04f      	b.n	8042dea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042d4a:	69bb      	ldr	r3, [r7, #24]
 8042d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042d50:	d04b      	beq.n	8042dea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042d52:	f7fd ff5b 	bl	8040c0c <HAL_GetTick>
 8042d56:	4602      	mov	r2, r0
 8042d58:	683b      	ldr	r3, [r7, #0]
 8042d5a:	1ad3      	subs	r3, r2, r3
 8042d5c:	69ba      	ldr	r2, [r7, #24]
 8042d5e:	429a      	cmp	r2, r3
 8042d60:	d302      	bcc.n	8042d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8042d62:	69bb      	ldr	r3, [r7, #24]
 8042d64:	2b00      	cmp	r3, #0
 8042d66:	d101      	bne.n	8042d6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8042d68:	2303      	movs	r3, #3
 8042d6a:	e04e      	b.n	8042e0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8042d6c:	68fb      	ldr	r3, [r7, #12]
 8042d6e:	681b      	ldr	r3, [r3, #0]
 8042d70:	681b      	ldr	r3, [r3, #0]
 8042d72:	f003 0304 	and.w	r3, r3, #4
 8042d76:	2b00      	cmp	r3, #0
 8042d78:	d037      	beq.n	8042dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8042d7a:	68bb      	ldr	r3, [r7, #8]
 8042d7c:	2b80      	cmp	r3, #128	@ 0x80
 8042d7e:	d034      	beq.n	8042dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8042d80:	68bb      	ldr	r3, [r7, #8]
 8042d82:	2b40      	cmp	r3, #64	@ 0x40
 8042d84:	d031      	beq.n	8042dea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8042d86:	68fb      	ldr	r3, [r7, #12]
 8042d88:	681b      	ldr	r3, [r3, #0]
 8042d8a:	69db      	ldr	r3, [r3, #28]
 8042d8c:	f003 0308 	and.w	r3, r3, #8
 8042d90:	2b08      	cmp	r3, #8
 8042d92:	d110      	bne.n	8042db6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8042d94:	68fb      	ldr	r3, [r7, #12]
 8042d96:	681b      	ldr	r3, [r3, #0]
 8042d98:	2208      	movs	r2, #8
 8042d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8042d9c:	68f8      	ldr	r0, [r7, #12]
 8042d9e:	f000 f838 	bl	8042e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8042da2:	68fb      	ldr	r3, [r7, #12]
 8042da4:	2208      	movs	r2, #8
 8042da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042daa:	68fb      	ldr	r3, [r7, #12]
 8042dac:	2200      	movs	r2, #0
 8042dae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8042db2:	2301      	movs	r3, #1
 8042db4:	e029      	b.n	8042e0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8042db6:	68fb      	ldr	r3, [r7, #12]
 8042db8:	681b      	ldr	r3, [r3, #0]
 8042dba:	69db      	ldr	r3, [r3, #28]
 8042dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8042dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8042dc4:	d111      	bne.n	8042dea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042dc6:	68fb      	ldr	r3, [r7, #12]
 8042dc8:	681b      	ldr	r3, [r3, #0]
 8042dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8042dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8042dd0:	68f8      	ldr	r0, [r7, #12]
 8042dd2:	f000 f81e 	bl	8042e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8042dd6:	68fb      	ldr	r3, [r7, #12]
 8042dd8:	2220      	movs	r2, #32
 8042dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042dde:	68fb      	ldr	r3, [r7, #12]
 8042de0:	2200      	movs	r2, #0
 8042de2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8042de6:	2303      	movs	r3, #3
 8042de8:	e00f      	b.n	8042e0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042dea:	68fb      	ldr	r3, [r7, #12]
 8042dec:	681b      	ldr	r3, [r3, #0]
 8042dee:	69da      	ldr	r2, [r3, #28]
 8042df0:	68bb      	ldr	r3, [r7, #8]
 8042df2:	4013      	ands	r3, r2
 8042df4:	68ba      	ldr	r2, [r7, #8]
 8042df6:	429a      	cmp	r2, r3
 8042df8:	bf0c      	ite	eq
 8042dfa:	2301      	moveq	r3, #1
 8042dfc:	2300      	movne	r3, #0
 8042dfe:	b2db      	uxtb	r3, r3
 8042e00:	461a      	mov	r2, r3
 8042e02:	79fb      	ldrb	r3, [r7, #7]
 8042e04:	429a      	cmp	r2, r3
 8042e06:	d0a0      	beq.n	8042d4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8042e08:	2300      	movs	r3, #0
}
 8042e0a:	4618      	mov	r0, r3
 8042e0c:	3710      	adds	r7, #16
 8042e0e:	46bd      	mov	sp, r7
 8042e10:	bd80      	pop	{r7, pc}

08042e12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8042e12:	b480      	push	{r7}
 8042e14:	b095      	sub	sp, #84	@ 0x54
 8042e16:	af00      	add	r7, sp, #0
 8042e18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8042e1a:	687b      	ldr	r3, [r7, #4]
 8042e1c:	681b      	ldr	r3, [r3, #0]
 8042e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8042e22:	e853 3f00 	ldrex	r3, [r3]
 8042e26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8042e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8042e2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8042e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8042e30:	687b      	ldr	r3, [r7, #4]
 8042e32:	681b      	ldr	r3, [r3, #0]
 8042e34:	461a      	mov	r2, r3
 8042e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8042e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8042e3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042e3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8042e3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8042e40:	e841 2300 	strex	r3, r2, [r1]
 8042e44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8042e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042e48:	2b00      	cmp	r3, #0
 8042e4a:	d1e6      	bne.n	8042e1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042e4c:	687b      	ldr	r3, [r7, #4]
 8042e4e:	681b      	ldr	r3, [r3, #0]
 8042e50:	3308      	adds	r3, #8
 8042e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042e54:	6a3b      	ldr	r3, [r7, #32]
 8042e56:	e853 3f00 	ldrex	r3, [r3]
 8042e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8042e5c:	69fb      	ldr	r3, [r7, #28]
 8042e5e:	f023 0301 	bic.w	r3, r3, #1
 8042e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8042e64:	687b      	ldr	r3, [r7, #4]
 8042e66:	681b      	ldr	r3, [r3, #0]
 8042e68:	3308      	adds	r3, #8
 8042e6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8042e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8042e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8042e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8042e74:	e841 2300 	strex	r3, r2, [r1]
 8042e78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8042e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042e7c:	2b00      	cmp	r3, #0
 8042e7e:	d1e5      	bne.n	8042e4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042e80:	687b      	ldr	r3, [r7, #4]
 8042e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8042e84:	2b01      	cmp	r3, #1
 8042e86:	d118      	bne.n	8042eba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042e88:	687b      	ldr	r3, [r7, #4]
 8042e8a:	681b      	ldr	r3, [r3, #0]
 8042e8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042e8e:	68fb      	ldr	r3, [r7, #12]
 8042e90:	e853 3f00 	ldrex	r3, [r3]
 8042e94:	60bb      	str	r3, [r7, #8]
   return(result);
 8042e96:	68bb      	ldr	r3, [r7, #8]
 8042e98:	f023 0310 	bic.w	r3, r3, #16
 8042e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8042e9e:	687b      	ldr	r3, [r7, #4]
 8042ea0:	681b      	ldr	r3, [r3, #0]
 8042ea2:	461a      	mov	r2, r3
 8042ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8042ea6:	61bb      	str	r3, [r7, #24]
 8042ea8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042eaa:	6979      	ldr	r1, [r7, #20]
 8042eac:	69ba      	ldr	r2, [r7, #24]
 8042eae:	e841 2300 	strex	r3, r2, [r1]
 8042eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8042eb4:	693b      	ldr	r3, [r7, #16]
 8042eb6:	2b00      	cmp	r3, #0
 8042eb8:	d1e6      	bne.n	8042e88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8042eba:	687b      	ldr	r3, [r7, #4]
 8042ebc:	2220      	movs	r2, #32
 8042ebe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042ec2:	687b      	ldr	r3, [r7, #4]
 8042ec4:	2200      	movs	r2, #0
 8042ec6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8042ec8:	687b      	ldr	r3, [r7, #4]
 8042eca:	2200      	movs	r2, #0
 8042ecc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8042ece:	bf00      	nop
 8042ed0:	3754      	adds	r7, #84	@ 0x54
 8042ed2:	46bd      	mov	sp, r7
 8042ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ed8:	4770      	bx	lr
	...

08042edc <std>:
 8042edc:	2300      	movs	r3, #0
 8042ede:	b510      	push	{r4, lr}
 8042ee0:	4604      	mov	r4, r0
 8042ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8042ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8042eea:	6083      	str	r3, [r0, #8]
 8042eec:	8181      	strh	r1, [r0, #12]
 8042eee:	6643      	str	r3, [r0, #100]	@ 0x64
 8042ef0:	81c2      	strh	r2, [r0, #14]
 8042ef2:	6183      	str	r3, [r0, #24]
 8042ef4:	4619      	mov	r1, r3
 8042ef6:	2208      	movs	r2, #8
 8042ef8:	305c      	adds	r0, #92	@ 0x5c
 8042efa:	f000 f906 	bl	804310a <memset>
 8042efe:	4b0d      	ldr	r3, [pc, #52]	@ (8042f34 <std+0x58>)
 8042f00:	6263      	str	r3, [r4, #36]	@ 0x24
 8042f02:	4b0d      	ldr	r3, [pc, #52]	@ (8042f38 <std+0x5c>)
 8042f04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8042f06:	4b0d      	ldr	r3, [pc, #52]	@ (8042f3c <std+0x60>)
 8042f08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8042f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8042f40 <std+0x64>)
 8042f0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8042f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8042f44 <std+0x68>)
 8042f10:	6224      	str	r4, [r4, #32]
 8042f12:	429c      	cmp	r4, r3
 8042f14:	d006      	beq.n	8042f24 <std+0x48>
 8042f16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8042f1a:	4294      	cmp	r4, r2
 8042f1c:	d002      	beq.n	8042f24 <std+0x48>
 8042f1e:	33d0      	adds	r3, #208	@ 0xd0
 8042f20:	429c      	cmp	r4, r3
 8042f22:	d105      	bne.n	8042f30 <std+0x54>
 8042f24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8042f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042f2c:	f000 b966 	b.w	80431fc <__retarget_lock_init_recursive>
 8042f30:	bd10      	pop	{r4, pc}
 8042f32:	bf00      	nop
 8042f34:	08043085 	.word	0x08043085
 8042f38:	080430a7 	.word	0x080430a7
 8042f3c:	080430df 	.word	0x080430df
 8042f40:	08043103 	.word	0x08043103
 8042f44:	20000114 	.word	0x20000114

08042f48 <stdio_exit_handler>:
 8042f48:	4a02      	ldr	r2, [pc, #8]	@ (8042f54 <stdio_exit_handler+0xc>)
 8042f4a:	4903      	ldr	r1, [pc, #12]	@ (8042f58 <stdio_exit_handler+0x10>)
 8042f4c:	4803      	ldr	r0, [pc, #12]	@ (8042f5c <stdio_exit_handler+0x14>)
 8042f4e:	f000 b869 	b.w	8043024 <_fwalk_sglue>
 8042f52:	bf00      	nop
 8042f54:	2000000c 	.word	0x2000000c
 8042f58:	08043a9d 	.word	0x08043a9d
 8042f5c:	2000001c 	.word	0x2000001c

08042f60 <cleanup_stdio>:
 8042f60:	6841      	ldr	r1, [r0, #4]
 8042f62:	4b0c      	ldr	r3, [pc, #48]	@ (8042f94 <cleanup_stdio+0x34>)
 8042f64:	4299      	cmp	r1, r3
 8042f66:	b510      	push	{r4, lr}
 8042f68:	4604      	mov	r4, r0
 8042f6a:	d001      	beq.n	8042f70 <cleanup_stdio+0x10>
 8042f6c:	f000 fd96 	bl	8043a9c <_fflush_r>
 8042f70:	68a1      	ldr	r1, [r4, #8]
 8042f72:	4b09      	ldr	r3, [pc, #36]	@ (8042f98 <cleanup_stdio+0x38>)
 8042f74:	4299      	cmp	r1, r3
 8042f76:	d002      	beq.n	8042f7e <cleanup_stdio+0x1e>
 8042f78:	4620      	mov	r0, r4
 8042f7a:	f000 fd8f 	bl	8043a9c <_fflush_r>
 8042f7e:	68e1      	ldr	r1, [r4, #12]
 8042f80:	4b06      	ldr	r3, [pc, #24]	@ (8042f9c <cleanup_stdio+0x3c>)
 8042f82:	4299      	cmp	r1, r3
 8042f84:	d004      	beq.n	8042f90 <cleanup_stdio+0x30>
 8042f86:	4620      	mov	r0, r4
 8042f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042f8c:	f000 bd86 	b.w	8043a9c <_fflush_r>
 8042f90:	bd10      	pop	{r4, pc}
 8042f92:	bf00      	nop
 8042f94:	20000114 	.word	0x20000114
 8042f98:	2000017c 	.word	0x2000017c
 8042f9c:	200001e4 	.word	0x200001e4

08042fa0 <global_stdio_init.part.0>:
 8042fa0:	b510      	push	{r4, lr}
 8042fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8042fd0 <global_stdio_init.part.0+0x30>)
 8042fa4:	4c0b      	ldr	r4, [pc, #44]	@ (8042fd4 <global_stdio_init.part.0+0x34>)
 8042fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8042fd8 <global_stdio_init.part.0+0x38>)
 8042fa8:	601a      	str	r2, [r3, #0]
 8042faa:	4620      	mov	r0, r4
 8042fac:	2200      	movs	r2, #0
 8042fae:	2104      	movs	r1, #4
 8042fb0:	f7ff ff94 	bl	8042edc <std>
 8042fb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8042fb8:	2201      	movs	r2, #1
 8042fba:	2109      	movs	r1, #9
 8042fbc:	f7ff ff8e 	bl	8042edc <std>
 8042fc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8042fc4:	2202      	movs	r2, #2
 8042fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042fca:	2112      	movs	r1, #18
 8042fcc:	f7ff bf86 	b.w	8042edc <std>
 8042fd0:	2000024c 	.word	0x2000024c
 8042fd4:	20000114 	.word	0x20000114
 8042fd8:	08042f49 	.word	0x08042f49

08042fdc <__sfp_lock_acquire>:
 8042fdc:	4801      	ldr	r0, [pc, #4]	@ (8042fe4 <__sfp_lock_acquire+0x8>)
 8042fde:	f000 b90e 	b.w	80431fe <__retarget_lock_acquire_recursive>
 8042fe2:	bf00      	nop
 8042fe4:	20000255 	.word	0x20000255

08042fe8 <__sfp_lock_release>:
 8042fe8:	4801      	ldr	r0, [pc, #4]	@ (8042ff0 <__sfp_lock_release+0x8>)
 8042fea:	f000 b909 	b.w	8043200 <__retarget_lock_release_recursive>
 8042fee:	bf00      	nop
 8042ff0:	20000255 	.word	0x20000255

08042ff4 <__sinit>:
 8042ff4:	b510      	push	{r4, lr}
 8042ff6:	4604      	mov	r4, r0
 8042ff8:	f7ff fff0 	bl	8042fdc <__sfp_lock_acquire>
 8042ffc:	6a23      	ldr	r3, [r4, #32]
 8042ffe:	b11b      	cbz	r3, 8043008 <__sinit+0x14>
 8043000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8043004:	f7ff bff0 	b.w	8042fe8 <__sfp_lock_release>
 8043008:	4b04      	ldr	r3, [pc, #16]	@ (804301c <__sinit+0x28>)
 804300a:	6223      	str	r3, [r4, #32]
 804300c:	4b04      	ldr	r3, [pc, #16]	@ (8043020 <__sinit+0x2c>)
 804300e:	681b      	ldr	r3, [r3, #0]
 8043010:	2b00      	cmp	r3, #0
 8043012:	d1f5      	bne.n	8043000 <__sinit+0xc>
 8043014:	f7ff ffc4 	bl	8042fa0 <global_stdio_init.part.0>
 8043018:	e7f2      	b.n	8043000 <__sinit+0xc>
 804301a:	bf00      	nop
 804301c:	08042f61 	.word	0x08042f61
 8043020:	2000024c 	.word	0x2000024c

08043024 <_fwalk_sglue>:
 8043024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8043028:	4607      	mov	r7, r0
 804302a:	4688      	mov	r8, r1
 804302c:	4614      	mov	r4, r2
 804302e:	2600      	movs	r6, #0
 8043030:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8043034:	f1b9 0901 	subs.w	r9, r9, #1
 8043038:	d505      	bpl.n	8043046 <_fwalk_sglue+0x22>
 804303a:	6824      	ldr	r4, [r4, #0]
 804303c:	2c00      	cmp	r4, #0
 804303e:	d1f7      	bne.n	8043030 <_fwalk_sglue+0xc>
 8043040:	4630      	mov	r0, r6
 8043042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8043046:	89ab      	ldrh	r3, [r5, #12]
 8043048:	2b01      	cmp	r3, #1
 804304a:	d907      	bls.n	804305c <_fwalk_sglue+0x38>
 804304c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8043050:	3301      	adds	r3, #1
 8043052:	d003      	beq.n	804305c <_fwalk_sglue+0x38>
 8043054:	4629      	mov	r1, r5
 8043056:	4638      	mov	r0, r7
 8043058:	47c0      	blx	r8
 804305a:	4306      	orrs	r6, r0
 804305c:	3568      	adds	r5, #104	@ 0x68
 804305e:	e7e9      	b.n	8043034 <_fwalk_sglue+0x10>

08043060 <iprintf>:
 8043060:	b40f      	push	{r0, r1, r2, r3}
 8043062:	b507      	push	{r0, r1, r2, lr}
 8043064:	4906      	ldr	r1, [pc, #24]	@ (8043080 <iprintf+0x20>)
 8043066:	ab04      	add	r3, sp, #16
 8043068:	6808      	ldr	r0, [r1, #0]
 804306a:	f853 2b04 	ldr.w	r2, [r3], #4
 804306e:	6881      	ldr	r1, [r0, #8]
 8043070:	9301      	str	r3, [sp, #4]
 8043072:	f000 f9e9 	bl	8043448 <_vfiprintf_r>
 8043076:	b003      	add	sp, #12
 8043078:	f85d eb04 	ldr.w	lr, [sp], #4
 804307c:	b004      	add	sp, #16
 804307e:	4770      	bx	lr
 8043080:	20000018 	.word	0x20000018

08043084 <__sread>:
 8043084:	b510      	push	{r4, lr}
 8043086:	460c      	mov	r4, r1
 8043088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804308c:	f000 f868 	bl	8043160 <_read_r>
 8043090:	2800      	cmp	r0, #0
 8043092:	bfab      	itete	ge
 8043094:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8043096:	89a3      	ldrhlt	r3, [r4, #12]
 8043098:	181b      	addge	r3, r3, r0
 804309a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 804309e:	bfac      	ite	ge
 80430a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80430a2:	81a3      	strhlt	r3, [r4, #12]
 80430a4:	bd10      	pop	{r4, pc}

080430a6 <__swrite>:
 80430a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80430aa:	461f      	mov	r7, r3
 80430ac:	898b      	ldrh	r3, [r1, #12]
 80430ae:	05db      	lsls	r3, r3, #23
 80430b0:	4605      	mov	r5, r0
 80430b2:	460c      	mov	r4, r1
 80430b4:	4616      	mov	r6, r2
 80430b6:	d505      	bpl.n	80430c4 <__swrite+0x1e>
 80430b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80430bc:	2302      	movs	r3, #2
 80430be:	2200      	movs	r2, #0
 80430c0:	f000 f83c 	bl	804313c <_lseek_r>
 80430c4:	89a3      	ldrh	r3, [r4, #12]
 80430c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80430ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80430ce:	81a3      	strh	r3, [r4, #12]
 80430d0:	4632      	mov	r2, r6
 80430d2:	463b      	mov	r3, r7
 80430d4:	4628      	mov	r0, r5
 80430d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80430da:	f000 b853 	b.w	8043184 <_write_r>

080430de <__sseek>:
 80430de:	b510      	push	{r4, lr}
 80430e0:	460c      	mov	r4, r1
 80430e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80430e6:	f000 f829 	bl	804313c <_lseek_r>
 80430ea:	1c43      	adds	r3, r0, #1
 80430ec:	89a3      	ldrh	r3, [r4, #12]
 80430ee:	bf15      	itete	ne
 80430f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80430f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80430f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80430fa:	81a3      	strheq	r3, [r4, #12]
 80430fc:	bf18      	it	ne
 80430fe:	81a3      	strhne	r3, [r4, #12]
 8043100:	bd10      	pop	{r4, pc}

08043102 <__sclose>:
 8043102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8043106:	f000 b809 	b.w	804311c <_close_r>

0804310a <memset>:
 804310a:	4402      	add	r2, r0
 804310c:	4603      	mov	r3, r0
 804310e:	4293      	cmp	r3, r2
 8043110:	d100      	bne.n	8043114 <memset+0xa>
 8043112:	4770      	bx	lr
 8043114:	f803 1b01 	strb.w	r1, [r3], #1
 8043118:	e7f9      	b.n	804310e <memset+0x4>
	...

0804311c <_close_r>:
 804311c:	b538      	push	{r3, r4, r5, lr}
 804311e:	4d06      	ldr	r5, [pc, #24]	@ (8043138 <_close_r+0x1c>)
 8043120:	2300      	movs	r3, #0
 8043122:	4604      	mov	r4, r0
 8043124:	4608      	mov	r0, r1
 8043126:	602b      	str	r3, [r5, #0]
 8043128:	f7fd fc76 	bl	8040a18 <_close>
 804312c:	1c43      	adds	r3, r0, #1
 804312e:	d102      	bne.n	8043136 <_close_r+0x1a>
 8043130:	682b      	ldr	r3, [r5, #0]
 8043132:	b103      	cbz	r3, 8043136 <_close_r+0x1a>
 8043134:	6023      	str	r3, [r4, #0]
 8043136:	bd38      	pop	{r3, r4, r5, pc}
 8043138:	20000250 	.word	0x20000250

0804313c <_lseek_r>:
 804313c:	b538      	push	{r3, r4, r5, lr}
 804313e:	4d07      	ldr	r5, [pc, #28]	@ (804315c <_lseek_r+0x20>)
 8043140:	4604      	mov	r4, r0
 8043142:	4608      	mov	r0, r1
 8043144:	4611      	mov	r1, r2
 8043146:	2200      	movs	r2, #0
 8043148:	602a      	str	r2, [r5, #0]
 804314a:	461a      	mov	r2, r3
 804314c:	f7fd fc8b 	bl	8040a66 <_lseek>
 8043150:	1c43      	adds	r3, r0, #1
 8043152:	d102      	bne.n	804315a <_lseek_r+0x1e>
 8043154:	682b      	ldr	r3, [r5, #0]
 8043156:	b103      	cbz	r3, 804315a <_lseek_r+0x1e>
 8043158:	6023      	str	r3, [r4, #0]
 804315a:	bd38      	pop	{r3, r4, r5, pc}
 804315c:	20000250 	.word	0x20000250

08043160 <_read_r>:
 8043160:	b538      	push	{r3, r4, r5, lr}
 8043162:	4d07      	ldr	r5, [pc, #28]	@ (8043180 <_read_r+0x20>)
 8043164:	4604      	mov	r4, r0
 8043166:	4608      	mov	r0, r1
 8043168:	4611      	mov	r1, r2
 804316a:	2200      	movs	r2, #0
 804316c:	602a      	str	r2, [r5, #0]
 804316e:	461a      	mov	r2, r3
 8043170:	f7fd fc19 	bl	80409a6 <_read>
 8043174:	1c43      	adds	r3, r0, #1
 8043176:	d102      	bne.n	804317e <_read_r+0x1e>
 8043178:	682b      	ldr	r3, [r5, #0]
 804317a:	b103      	cbz	r3, 804317e <_read_r+0x1e>
 804317c:	6023      	str	r3, [r4, #0]
 804317e:	bd38      	pop	{r3, r4, r5, pc}
 8043180:	20000250 	.word	0x20000250

08043184 <_write_r>:
 8043184:	b538      	push	{r3, r4, r5, lr}
 8043186:	4d07      	ldr	r5, [pc, #28]	@ (80431a4 <_write_r+0x20>)
 8043188:	4604      	mov	r4, r0
 804318a:	4608      	mov	r0, r1
 804318c:	4611      	mov	r1, r2
 804318e:	2200      	movs	r2, #0
 8043190:	602a      	str	r2, [r5, #0]
 8043192:	461a      	mov	r2, r3
 8043194:	f7fd fc24 	bl	80409e0 <_write>
 8043198:	1c43      	adds	r3, r0, #1
 804319a:	d102      	bne.n	80431a2 <_write_r+0x1e>
 804319c:	682b      	ldr	r3, [r5, #0]
 804319e:	b103      	cbz	r3, 80431a2 <_write_r+0x1e>
 80431a0:	6023      	str	r3, [r4, #0]
 80431a2:	bd38      	pop	{r3, r4, r5, pc}
 80431a4:	20000250 	.word	0x20000250

080431a8 <__errno>:
 80431a8:	4b01      	ldr	r3, [pc, #4]	@ (80431b0 <__errno+0x8>)
 80431aa:	6818      	ldr	r0, [r3, #0]
 80431ac:	4770      	bx	lr
 80431ae:	bf00      	nop
 80431b0:	20000018 	.word	0x20000018

080431b4 <__libc_init_array>:
 80431b4:	b570      	push	{r4, r5, r6, lr}
 80431b6:	4d0d      	ldr	r5, [pc, #52]	@ (80431ec <__libc_init_array+0x38>)
 80431b8:	4c0d      	ldr	r4, [pc, #52]	@ (80431f0 <__libc_init_array+0x3c>)
 80431ba:	1b64      	subs	r4, r4, r5
 80431bc:	10a4      	asrs	r4, r4, #2
 80431be:	2600      	movs	r6, #0
 80431c0:	42a6      	cmp	r6, r4
 80431c2:	d109      	bne.n	80431d8 <__libc_init_array+0x24>
 80431c4:	4d0b      	ldr	r5, [pc, #44]	@ (80431f4 <__libc_init_array+0x40>)
 80431c6:	4c0c      	ldr	r4, [pc, #48]	@ (80431f8 <__libc_init_array+0x44>)
 80431c8:	f000 fdb8 	bl	8043d3c <_init>
 80431cc:	1b64      	subs	r4, r4, r5
 80431ce:	10a4      	asrs	r4, r4, #2
 80431d0:	2600      	movs	r6, #0
 80431d2:	42a6      	cmp	r6, r4
 80431d4:	d105      	bne.n	80431e2 <__libc_init_array+0x2e>
 80431d6:	bd70      	pop	{r4, r5, r6, pc}
 80431d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80431dc:	4798      	blx	r3
 80431de:	3601      	adds	r6, #1
 80431e0:	e7ee      	b.n	80431c0 <__libc_init_array+0xc>
 80431e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80431e6:	4798      	blx	r3
 80431e8:	3601      	adds	r6, #1
 80431ea:	e7f2      	b.n	80431d2 <__libc_init_array+0x1e>
 80431ec:	08043dc4 	.word	0x08043dc4
 80431f0:	08043dc4 	.word	0x08043dc4
 80431f4:	08043dc4 	.word	0x08043dc4
 80431f8:	08043dc8 	.word	0x08043dc8

080431fc <__retarget_lock_init_recursive>:
 80431fc:	4770      	bx	lr

080431fe <__retarget_lock_acquire_recursive>:
 80431fe:	4770      	bx	lr

08043200 <__retarget_lock_release_recursive>:
 8043200:	4770      	bx	lr
	...

08043204 <_free_r>:
 8043204:	b538      	push	{r3, r4, r5, lr}
 8043206:	4605      	mov	r5, r0
 8043208:	2900      	cmp	r1, #0
 804320a:	d041      	beq.n	8043290 <_free_r+0x8c>
 804320c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8043210:	1f0c      	subs	r4, r1, #4
 8043212:	2b00      	cmp	r3, #0
 8043214:	bfb8      	it	lt
 8043216:	18e4      	addlt	r4, r4, r3
 8043218:	f000 f8e0 	bl	80433dc <__malloc_lock>
 804321c:	4a1d      	ldr	r2, [pc, #116]	@ (8043294 <_free_r+0x90>)
 804321e:	6813      	ldr	r3, [r2, #0]
 8043220:	b933      	cbnz	r3, 8043230 <_free_r+0x2c>
 8043222:	6063      	str	r3, [r4, #4]
 8043224:	6014      	str	r4, [r2, #0]
 8043226:	4628      	mov	r0, r5
 8043228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804322c:	f000 b8dc 	b.w	80433e8 <__malloc_unlock>
 8043230:	42a3      	cmp	r3, r4
 8043232:	d908      	bls.n	8043246 <_free_r+0x42>
 8043234:	6820      	ldr	r0, [r4, #0]
 8043236:	1821      	adds	r1, r4, r0
 8043238:	428b      	cmp	r3, r1
 804323a:	bf01      	itttt	eq
 804323c:	6819      	ldreq	r1, [r3, #0]
 804323e:	685b      	ldreq	r3, [r3, #4]
 8043240:	1809      	addeq	r1, r1, r0
 8043242:	6021      	streq	r1, [r4, #0]
 8043244:	e7ed      	b.n	8043222 <_free_r+0x1e>
 8043246:	461a      	mov	r2, r3
 8043248:	685b      	ldr	r3, [r3, #4]
 804324a:	b10b      	cbz	r3, 8043250 <_free_r+0x4c>
 804324c:	42a3      	cmp	r3, r4
 804324e:	d9fa      	bls.n	8043246 <_free_r+0x42>
 8043250:	6811      	ldr	r1, [r2, #0]
 8043252:	1850      	adds	r0, r2, r1
 8043254:	42a0      	cmp	r0, r4
 8043256:	d10b      	bne.n	8043270 <_free_r+0x6c>
 8043258:	6820      	ldr	r0, [r4, #0]
 804325a:	4401      	add	r1, r0
 804325c:	1850      	adds	r0, r2, r1
 804325e:	4283      	cmp	r3, r0
 8043260:	6011      	str	r1, [r2, #0]
 8043262:	d1e0      	bne.n	8043226 <_free_r+0x22>
 8043264:	6818      	ldr	r0, [r3, #0]
 8043266:	685b      	ldr	r3, [r3, #4]
 8043268:	6053      	str	r3, [r2, #4]
 804326a:	4408      	add	r0, r1
 804326c:	6010      	str	r0, [r2, #0]
 804326e:	e7da      	b.n	8043226 <_free_r+0x22>
 8043270:	d902      	bls.n	8043278 <_free_r+0x74>
 8043272:	230c      	movs	r3, #12
 8043274:	602b      	str	r3, [r5, #0]
 8043276:	e7d6      	b.n	8043226 <_free_r+0x22>
 8043278:	6820      	ldr	r0, [r4, #0]
 804327a:	1821      	adds	r1, r4, r0
 804327c:	428b      	cmp	r3, r1
 804327e:	bf04      	itt	eq
 8043280:	6819      	ldreq	r1, [r3, #0]
 8043282:	685b      	ldreq	r3, [r3, #4]
 8043284:	6063      	str	r3, [r4, #4]
 8043286:	bf04      	itt	eq
 8043288:	1809      	addeq	r1, r1, r0
 804328a:	6021      	streq	r1, [r4, #0]
 804328c:	6054      	str	r4, [r2, #4]
 804328e:	e7ca      	b.n	8043226 <_free_r+0x22>
 8043290:	bd38      	pop	{r3, r4, r5, pc}
 8043292:	bf00      	nop
 8043294:	2000025c 	.word	0x2000025c

08043298 <sbrk_aligned>:
 8043298:	b570      	push	{r4, r5, r6, lr}
 804329a:	4e0f      	ldr	r6, [pc, #60]	@ (80432d8 <sbrk_aligned+0x40>)
 804329c:	460c      	mov	r4, r1
 804329e:	6831      	ldr	r1, [r6, #0]
 80432a0:	4605      	mov	r5, r0
 80432a2:	b911      	cbnz	r1, 80432aa <sbrk_aligned+0x12>
 80432a4:	f000 fcb6 	bl	8043c14 <_sbrk_r>
 80432a8:	6030      	str	r0, [r6, #0]
 80432aa:	4621      	mov	r1, r4
 80432ac:	4628      	mov	r0, r5
 80432ae:	f000 fcb1 	bl	8043c14 <_sbrk_r>
 80432b2:	1c43      	adds	r3, r0, #1
 80432b4:	d103      	bne.n	80432be <sbrk_aligned+0x26>
 80432b6:	f04f 34ff 	mov.w	r4, #4294967295
 80432ba:	4620      	mov	r0, r4
 80432bc:	bd70      	pop	{r4, r5, r6, pc}
 80432be:	1cc4      	adds	r4, r0, #3
 80432c0:	f024 0403 	bic.w	r4, r4, #3
 80432c4:	42a0      	cmp	r0, r4
 80432c6:	d0f8      	beq.n	80432ba <sbrk_aligned+0x22>
 80432c8:	1a21      	subs	r1, r4, r0
 80432ca:	4628      	mov	r0, r5
 80432cc:	f000 fca2 	bl	8043c14 <_sbrk_r>
 80432d0:	3001      	adds	r0, #1
 80432d2:	d1f2      	bne.n	80432ba <sbrk_aligned+0x22>
 80432d4:	e7ef      	b.n	80432b6 <sbrk_aligned+0x1e>
 80432d6:	bf00      	nop
 80432d8:	20000258 	.word	0x20000258

080432dc <_malloc_r>:
 80432dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80432e0:	1ccd      	adds	r5, r1, #3
 80432e2:	f025 0503 	bic.w	r5, r5, #3
 80432e6:	3508      	adds	r5, #8
 80432e8:	2d0c      	cmp	r5, #12
 80432ea:	bf38      	it	cc
 80432ec:	250c      	movcc	r5, #12
 80432ee:	2d00      	cmp	r5, #0
 80432f0:	4606      	mov	r6, r0
 80432f2:	db01      	blt.n	80432f8 <_malloc_r+0x1c>
 80432f4:	42a9      	cmp	r1, r5
 80432f6:	d904      	bls.n	8043302 <_malloc_r+0x26>
 80432f8:	230c      	movs	r3, #12
 80432fa:	6033      	str	r3, [r6, #0]
 80432fc:	2000      	movs	r0, #0
 80432fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8043302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80433d8 <_malloc_r+0xfc>
 8043306:	f000 f869 	bl	80433dc <__malloc_lock>
 804330a:	f8d8 3000 	ldr.w	r3, [r8]
 804330e:	461c      	mov	r4, r3
 8043310:	bb44      	cbnz	r4, 8043364 <_malloc_r+0x88>
 8043312:	4629      	mov	r1, r5
 8043314:	4630      	mov	r0, r6
 8043316:	f7ff ffbf 	bl	8043298 <sbrk_aligned>
 804331a:	1c43      	adds	r3, r0, #1
 804331c:	4604      	mov	r4, r0
 804331e:	d158      	bne.n	80433d2 <_malloc_r+0xf6>
 8043320:	f8d8 4000 	ldr.w	r4, [r8]
 8043324:	4627      	mov	r7, r4
 8043326:	2f00      	cmp	r7, #0
 8043328:	d143      	bne.n	80433b2 <_malloc_r+0xd6>
 804332a:	2c00      	cmp	r4, #0
 804332c:	d04b      	beq.n	80433c6 <_malloc_r+0xea>
 804332e:	6823      	ldr	r3, [r4, #0]
 8043330:	4639      	mov	r1, r7
 8043332:	4630      	mov	r0, r6
 8043334:	eb04 0903 	add.w	r9, r4, r3
 8043338:	f000 fc6c 	bl	8043c14 <_sbrk_r>
 804333c:	4581      	cmp	r9, r0
 804333e:	d142      	bne.n	80433c6 <_malloc_r+0xea>
 8043340:	6821      	ldr	r1, [r4, #0]
 8043342:	1a6d      	subs	r5, r5, r1
 8043344:	4629      	mov	r1, r5
 8043346:	4630      	mov	r0, r6
 8043348:	f7ff ffa6 	bl	8043298 <sbrk_aligned>
 804334c:	3001      	adds	r0, #1
 804334e:	d03a      	beq.n	80433c6 <_malloc_r+0xea>
 8043350:	6823      	ldr	r3, [r4, #0]
 8043352:	442b      	add	r3, r5
 8043354:	6023      	str	r3, [r4, #0]
 8043356:	f8d8 3000 	ldr.w	r3, [r8]
 804335a:	685a      	ldr	r2, [r3, #4]
 804335c:	bb62      	cbnz	r2, 80433b8 <_malloc_r+0xdc>
 804335e:	f8c8 7000 	str.w	r7, [r8]
 8043362:	e00f      	b.n	8043384 <_malloc_r+0xa8>
 8043364:	6822      	ldr	r2, [r4, #0]
 8043366:	1b52      	subs	r2, r2, r5
 8043368:	d420      	bmi.n	80433ac <_malloc_r+0xd0>
 804336a:	2a0b      	cmp	r2, #11
 804336c:	d917      	bls.n	804339e <_malloc_r+0xc2>
 804336e:	1961      	adds	r1, r4, r5
 8043370:	42a3      	cmp	r3, r4
 8043372:	6025      	str	r5, [r4, #0]
 8043374:	bf18      	it	ne
 8043376:	6059      	strne	r1, [r3, #4]
 8043378:	6863      	ldr	r3, [r4, #4]
 804337a:	bf08      	it	eq
 804337c:	f8c8 1000 	streq.w	r1, [r8]
 8043380:	5162      	str	r2, [r4, r5]
 8043382:	604b      	str	r3, [r1, #4]
 8043384:	4630      	mov	r0, r6
 8043386:	f000 f82f 	bl	80433e8 <__malloc_unlock>
 804338a:	f104 000b 	add.w	r0, r4, #11
 804338e:	1d23      	adds	r3, r4, #4
 8043390:	f020 0007 	bic.w	r0, r0, #7
 8043394:	1ac2      	subs	r2, r0, r3
 8043396:	bf1c      	itt	ne
 8043398:	1a1b      	subne	r3, r3, r0
 804339a:	50a3      	strne	r3, [r4, r2]
 804339c:	e7af      	b.n	80432fe <_malloc_r+0x22>
 804339e:	6862      	ldr	r2, [r4, #4]
 80433a0:	42a3      	cmp	r3, r4
 80433a2:	bf0c      	ite	eq
 80433a4:	f8c8 2000 	streq.w	r2, [r8]
 80433a8:	605a      	strne	r2, [r3, #4]
 80433aa:	e7eb      	b.n	8043384 <_malloc_r+0xa8>
 80433ac:	4623      	mov	r3, r4
 80433ae:	6864      	ldr	r4, [r4, #4]
 80433b0:	e7ae      	b.n	8043310 <_malloc_r+0x34>
 80433b2:	463c      	mov	r4, r7
 80433b4:	687f      	ldr	r7, [r7, #4]
 80433b6:	e7b6      	b.n	8043326 <_malloc_r+0x4a>
 80433b8:	461a      	mov	r2, r3
 80433ba:	685b      	ldr	r3, [r3, #4]
 80433bc:	42a3      	cmp	r3, r4
 80433be:	d1fb      	bne.n	80433b8 <_malloc_r+0xdc>
 80433c0:	2300      	movs	r3, #0
 80433c2:	6053      	str	r3, [r2, #4]
 80433c4:	e7de      	b.n	8043384 <_malloc_r+0xa8>
 80433c6:	230c      	movs	r3, #12
 80433c8:	6033      	str	r3, [r6, #0]
 80433ca:	4630      	mov	r0, r6
 80433cc:	f000 f80c 	bl	80433e8 <__malloc_unlock>
 80433d0:	e794      	b.n	80432fc <_malloc_r+0x20>
 80433d2:	6005      	str	r5, [r0, #0]
 80433d4:	e7d6      	b.n	8043384 <_malloc_r+0xa8>
 80433d6:	bf00      	nop
 80433d8:	2000025c 	.word	0x2000025c

080433dc <__malloc_lock>:
 80433dc:	4801      	ldr	r0, [pc, #4]	@ (80433e4 <__malloc_lock+0x8>)
 80433de:	f7ff bf0e 	b.w	80431fe <__retarget_lock_acquire_recursive>
 80433e2:	bf00      	nop
 80433e4:	20000254 	.word	0x20000254

080433e8 <__malloc_unlock>:
 80433e8:	4801      	ldr	r0, [pc, #4]	@ (80433f0 <__malloc_unlock+0x8>)
 80433ea:	f7ff bf09 	b.w	8043200 <__retarget_lock_release_recursive>
 80433ee:	bf00      	nop
 80433f0:	20000254 	.word	0x20000254

080433f4 <__sfputc_r>:
 80433f4:	6893      	ldr	r3, [r2, #8]
 80433f6:	3b01      	subs	r3, #1
 80433f8:	2b00      	cmp	r3, #0
 80433fa:	b410      	push	{r4}
 80433fc:	6093      	str	r3, [r2, #8]
 80433fe:	da08      	bge.n	8043412 <__sfputc_r+0x1e>
 8043400:	6994      	ldr	r4, [r2, #24]
 8043402:	42a3      	cmp	r3, r4
 8043404:	db01      	blt.n	804340a <__sfputc_r+0x16>
 8043406:	290a      	cmp	r1, #10
 8043408:	d103      	bne.n	8043412 <__sfputc_r+0x1e>
 804340a:	f85d 4b04 	ldr.w	r4, [sp], #4
 804340e:	f000 bb6d 	b.w	8043aec <__swbuf_r>
 8043412:	6813      	ldr	r3, [r2, #0]
 8043414:	1c58      	adds	r0, r3, #1
 8043416:	6010      	str	r0, [r2, #0]
 8043418:	7019      	strb	r1, [r3, #0]
 804341a:	4608      	mov	r0, r1
 804341c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8043420:	4770      	bx	lr

08043422 <__sfputs_r>:
 8043422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043424:	4606      	mov	r6, r0
 8043426:	460f      	mov	r7, r1
 8043428:	4614      	mov	r4, r2
 804342a:	18d5      	adds	r5, r2, r3
 804342c:	42ac      	cmp	r4, r5
 804342e:	d101      	bne.n	8043434 <__sfputs_r+0x12>
 8043430:	2000      	movs	r0, #0
 8043432:	e007      	b.n	8043444 <__sfputs_r+0x22>
 8043434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8043438:	463a      	mov	r2, r7
 804343a:	4630      	mov	r0, r6
 804343c:	f7ff ffda 	bl	80433f4 <__sfputc_r>
 8043440:	1c43      	adds	r3, r0, #1
 8043442:	d1f3      	bne.n	804342c <__sfputs_r+0xa>
 8043444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08043448 <_vfiprintf_r>:
 8043448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804344c:	460d      	mov	r5, r1
 804344e:	b09d      	sub	sp, #116	@ 0x74
 8043450:	4614      	mov	r4, r2
 8043452:	4698      	mov	r8, r3
 8043454:	4606      	mov	r6, r0
 8043456:	b118      	cbz	r0, 8043460 <_vfiprintf_r+0x18>
 8043458:	6a03      	ldr	r3, [r0, #32]
 804345a:	b90b      	cbnz	r3, 8043460 <_vfiprintf_r+0x18>
 804345c:	f7ff fdca 	bl	8042ff4 <__sinit>
 8043460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8043462:	07d9      	lsls	r1, r3, #31
 8043464:	d405      	bmi.n	8043472 <_vfiprintf_r+0x2a>
 8043466:	89ab      	ldrh	r3, [r5, #12]
 8043468:	059a      	lsls	r2, r3, #22
 804346a:	d402      	bmi.n	8043472 <_vfiprintf_r+0x2a>
 804346c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804346e:	f7ff fec6 	bl	80431fe <__retarget_lock_acquire_recursive>
 8043472:	89ab      	ldrh	r3, [r5, #12]
 8043474:	071b      	lsls	r3, r3, #28
 8043476:	d501      	bpl.n	804347c <_vfiprintf_r+0x34>
 8043478:	692b      	ldr	r3, [r5, #16]
 804347a:	b99b      	cbnz	r3, 80434a4 <_vfiprintf_r+0x5c>
 804347c:	4629      	mov	r1, r5
 804347e:	4630      	mov	r0, r6
 8043480:	f000 fb72 	bl	8043b68 <__swsetup_r>
 8043484:	b170      	cbz	r0, 80434a4 <_vfiprintf_r+0x5c>
 8043486:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8043488:	07dc      	lsls	r4, r3, #31
 804348a:	d504      	bpl.n	8043496 <_vfiprintf_r+0x4e>
 804348c:	f04f 30ff 	mov.w	r0, #4294967295
 8043490:	b01d      	add	sp, #116	@ 0x74
 8043492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8043496:	89ab      	ldrh	r3, [r5, #12]
 8043498:	0598      	lsls	r0, r3, #22
 804349a:	d4f7      	bmi.n	804348c <_vfiprintf_r+0x44>
 804349c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804349e:	f7ff feaf 	bl	8043200 <__retarget_lock_release_recursive>
 80434a2:	e7f3      	b.n	804348c <_vfiprintf_r+0x44>
 80434a4:	2300      	movs	r3, #0
 80434a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80434a8:	2320      	movs	r3, #32
 80434aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80434ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80434b2:	2330      	movs	r3, #48	@ 0x30
 80434b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8043664 <_vfiprintf_r+0x21c>
 80434b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80434bc:	f04f 0901 	mov.w	r9, #1
 80434c0:	4623      	mov	r3, r4
 80434c2:	469a      	mov	sl, r3
 80434c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80434c8:	b10a      	cbz	r2, 80434ce <_vfiprintf_r+0x86>
 80434ca:	2a25      	cmp	r2, #37	@ 0x25
 80434cc:	d1f9      	bne.n	80434c2 <_vfiprintf_r+0x7a>
 80434ce:	ebba 0b04 	subs.w	fp, sl, r4
 80434d2:	d00b      	beq.n	80434ec <_vfiprintf_r+0xa4>
 80434d4:	465b      	mov	r3, fp
 80434d6:	4622      	mov	r2, r4
 80434d8:	4629      	mov	r1, r5
 80434da:	4630      	mov	r0, r6
 80434dc:	f7ff ffa1 	bl	8043422 <__sfputs_r>
 80434e0:	3001      	adds	r0, #1
 80434e2:	f000 80a7 	beq.w	8043634 <_vfiprintf_r+0x1ec>
 80434e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80434e8:	445a      	add	r2, fp
 80434ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80434ec:	f89a 3000 	ldrb.w	r3, [sl]
 80434f0:	2b00      	cmp	r3, #0
 80434f2:	f000 809f 	beq.w	8043634 <_vfiprintf_r+0x1ec>
 80434f6:	2300      	movs	r3, #0
 80434f8:	f04f 32ff 	mov.w	r2, #4294967295
 80434fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8043500:	f10a 0a01 	add.w	sl, sl, #1
 8043504:	9304      	str	r3, [sp, #16]
 8043506:	9307      	str	r3, [sp, #28]
 8043508:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 804350c:	931a      	str	r3, [sp, #104]	@ 0x68
 804350e:	4654      	mov	r4, sl
 8043510:	2205      	movs	r2, #5
 8043512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8043516:	4853      	ldr	r0, [pc, #332]	@ (8043664 <_vfiprintf_r+0x21c>)
 8043518:	f7fc fe92 	bl	8040240 <memchr>
 804351c:	9a04      	ldr	r2, [sp, #16]
 804351e:	b9d8      	cbnz	r0, 8043558 <_vfiprintf_r+0x110>
 8043520:	06d1      	lsls	r1, r2, #27
 8043522:	bf44      	itt	mi
 8043524:	2320      	movmi	r3, #32
 8043526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804352a:	0713      	lsls	r3, r2, #28
 804352c:	bf44      	itt	mi
 804352e:	232b      	movmi	r3, #43	@ 0x2b
 8043530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8043534:	f89a 3000 	ldrb.w	r3, [sl]
 8043538:	2b2a      	cmp	r3, #42	@ 0x2a
 804353a:	d015      	beq.n	8043568 <_vfiprintf_r+0x120>
 804353c:	9a07      	ldr	r2, [sp, #28]
 804353e:	4654      	mov	r4, sl
 8043540:	2000      	movs	r0, #0
 8043542:	f04f 0c0a 	mov.w	ip, #10
 8043546:	4621      	mov	r1, r4
 8043548:	f811 3b01 	ldrb.w	r3, [r1], #1
 804354c:	3b30      	subs	r3, #48	@ 0x30
 804354e:	2b09      	cmp	r3, #9
 8043550:	d94b      	bls.n	80435ea <_vfiprintf_r+0x1a2>
 8043552:	b1b0      	cbz	r0, 8043582 <_vfiprintf_r+0x13a>
 8043554:	9207      	str	r2, [sp, #28]
 8043556:	e014      	b.n	8043582 <_vfiprintf_r+0x13a>
 8043558:	eba0 0308 	sub.w	r3, r0, r8
 804355c:	fa09 f303 	lsl.w	r3, r9, r3
 8043560:	4313      	orrs	r3, r2
 8043562:	9304      	str	r3, [sp, #16]
 8043564:	46a2      	mov	sl, r4
 8043566:	e7d2      	b.n	804350e <_vfiprintf_r+0xc6>
 8043568:	9b03      	ldr	r3, [sp, #12]
 804356a:	1d19      	adds	r1, r3, #4
 804356c:	681b      	ldr	r3, [r3, #0]
 804356e:	9103      	str	r1, [sp, #12]
 8043570:	2b00      	cmp	r3, #0
 8043572:	bfbb      	ittet	lt
 8043574:	425b      	neglt	r3, r3
 8043576:	f042 0202 	orrlt.w	r2, r2, #2
 804357a:	9307      	strge	r3, [sp, #28]
 804357c:	9307      	strlt	r3, [sp, #28]
 804357e:	bfb8      	it	lt
 8043580:	9204      	strlt	r2, [sp, #16]
 8043582:	7823      	ldrb	r3, [r4, #0]
 8043584:	2b2e      	cmp	r3, #46	@ 0x2e
 8043586:	d10a      	bne.n	804359e <_vfiprintf_r+0x156>
 8043588:	7863      	ldrb	r3, [r4, #1]
 804358a:	2b2a      	cmp	r3, #42	@ 0x2a
 804358c:	d132      	bne.n	80435f4 <_vfiprintf_r+0x1ac>
 804358e:	9b03      	ldr	r3, [sp, #12]
 8043590:	1d1a      	adds	r2, r3, #4
 8043592:	681b      	ldr	r3, [r3, #0]
 8043594:	9203      	str	r2, [sp, #12]
 8043596:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 804359a:	3402      	adds	r4, #2
 804359c:	9305      	str	r3, [sp, #20]
 804359e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8043674 <_vfiprintf_r+0x22c>
 80435a2:	7821      	ldrb	r1, [r4, #0]
 80435a4:	2203      	movs	r2, #3
 80435a6:	4650      	mov	r0, sl
 80435a8:	f7fc fe4a 	bl	8040240 <memchr>
 80435ac:	b138      	cbz	r0, 80435be <_vfiprintf_r+0x176>
 80435ae:	9b04      	ldr	r3, [sp, #16]
 80435b0:	eba0 000a 	sub.w	r0, r0, sl
 80435b4:	2240      	movs	r2, #64	@ 0x40
 80435b6:	4082      	lsls	r2, r0
 80435b8:	4313      	orrs	r3, r2
 80435ba:	3401      	adds	r4, #1
 80435bc:	9304      	str	r3, [sp, #16]
 80435be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80435c2:	4829      	ldr	r0, [pc, #164]	@ (8043668 <_vfiprintf_r+0x220>)
 80435c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80435c8:	2206      	movs	r2, #6
 80435ca:	f7fc fe39 	bl	8040240 <memchr>
 80435ce:	2800      	cmp	r0, #0
 80435d0:	d03f      	beq.n	8043652 <_vfiprintf_r+0x20a>
 80435d2:	4b26      	ldr	r3, [pc, #152]	@ (804366c <_vfiprintf_r+0x224>)
 80435d4:	bb1b      	cbnz	r3, 804361e <_vfiprintf_r+0x1d6>
 80435d6:	9b03      	ldr	r3, [sp, #12]
 80435d8:	3307      	adds	r3, #7
 80435da:	f023 0307 	bic.w	r3, r3, #7
 80435de:	3308      	adds	r3, #8
 80435e0:	9303      	str	r3, [sp, #12]
 80435e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80435e4:	443b      	add	r3, r7
 80435e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80435e8:	e76a      	b.n	80434c0 <_vfiprintf_r+0x78>
 80435ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80435ee:	460c      	mov	r4, r1
 80435f0:	2001      	movs	r0, #1
 80435f2:	e7a8      	b.n	8043546 <_vfiprintf_r+0xfe>
 80435f4:	2300      	movs	r3, #0
 80435f6:	3401      	adds	r4, #1
 80435f8:	9305      	str	r3, [sp, #20]
 80435fa:	4619      	mov	r1, r3
 80435fc:	f04f 0c0a 	mov.w	ip, #10
 8043600:	4620      	mov	r0, r4
 8043602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8043606:	3a30      	subs	r2, #48	@ 0x30
 8043608:	2a09      	cmp	r2, #9
 804360a:	d903      	bls.n	8043614 <_vfiprintf_r+0x1cc>
 804360c:	2b00      	cmp	r3, #0
 804360e:	d0c6      	beq.n	804359e <_vfiprintf_r+0x156>
 8043610:	9105      	str	r1, [sp, #20]
 8043612:	e7c4      	b.n	804359e <_vfiprintf_r+0x156>
 8043614:	fb0c 2101 	mla	r1, ip, r1, r2
 8043618:	4604      	mov	r4, r0
 804361a:	2301      	movs	r3, #1
 804361c:	e7f0      	b.n	8043600 <_vfiprintf_r+0x1b8>
 804361e:	ab03      	add	r3, sp, #12
 8043620:	9300      	str	r3, [sp, #0]
 8043622:	462a      	mov	r2, r5
 8043624:	4b12      	ldr	r3, [pc, #72]	@ (8043670 <_vfiprintf_r+0x228>)
 8043626:	a904      	add	r1, sp, #16
 8043628:	4630      	mov	r0, r6
 804362a:	f3af 8000 	nop.w
 804362e:	4607      	mov	r7, r0
 8043630:	1c78      	adds	r0, r7, #1
 8043632:	d1d6      	bne.n	80435e2 <_vfiprintf_r+0x19a>
 8043634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8043636:	07d9      	lsls	r1, r3, #31
 8043638:	d405      	bmi.n	8043646 <_vfiprintf_r+0x1fe>
 804363a:	89ab      	ldrh	r3, [r5, #12]
 804363c:	059a      	lsls	r2, r3, #22
 804363e:	d402      	bmi.n	8043646 <_vfiprintf_r+0x1fe>
 8043640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8043642:	f7ff fddd 	bl	8043200 <__retarget_lock_release_recursive>
 8043646:	89ab      	ldrh	r3, [r5, #12]
 8043648:	065b      	lsls	r3, r3, #25
 804364a:	f53f af1f 	bmi.w	804348c <_vfiprintf_r+0x44>
 804364e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8043650:	e71e      	b.n	8043490 <_vfiprintf_r+0x48>
 8043652:	ab03      	add	r3, sp, #12
 8043654:	9300      	str	r3, [sp, #0]
 8043656:	462a      	mov	r2, r5
 8043658:	4b05      	ldr	r3, [pc, #20]	@ (8043670 <_vfiprintf_r+0x228>)
 804365a:	a904      	add	r1, sp, #16
 804365c:	4630      	mov	r0, r6
 804365e:	f000 f879 	bl	8043754 <_printf_i>
 8043662:	e7e4      	b.n	804362e <_vfiprintf_r+0x1e6>
 8043664:	08043d88 	.word	0x08043d88
 8043668:	08043d92 	.word	0x08043d92
 804366c:	00000000 	.word	0x00000000
 8043670:	08043423 	.word	0x08043423
 8043674:	08043d8e 	.word	0x08043d8e

08043678 <_printf_common>:
 8043678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804367c:	4616      	mov	r6, r2
 804367e:	4698      	mov	r8, r3
 8043680:	688a      	ldr	r2, [r1, #8]
 8043682:	690b      	ldr	r3, [r1, #16]
 8043684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8043688:	4293      	cmp	r3, r2
 804368a:	bfb8      	it	lt
 804368c:	4613      	movlt	r3, r2
 804368e:	6033      	str	r3, [r6, #0]
 8043690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8043694:	4607      	mov	r7, r0
 8043696:	460c      	mov	r4, r1
 8043698:	b10a      	cbz	r2, 804369e <_printf_common+0x26>
 804369a:	3301      	adds	r3, #1
 804369c:	6033      	str	r3, [r6, #0]
 804369e:	6823      	ldr	r3, [r4, #0]
 80436a0:	0699      	lsls	r1, r3, #26
 80436a2:	bf42      	ittt	mi
 80436a4:	6833      	ldrmi	r3, [r6, #0]
 80436a6:	3302      	addmi	r3, #2
 80436a8:	6033      	strmi	r3, [r6, #0]
 80436aa:	6825      	ldr	r5, [r4, #0]
 80436ac:	f015 0506 	ands.w	r5, r5, #6
 80436b0:	d106      	bne.n	80436c0 <_printf_common+0x48>
 80436b2:	f104 0a19 	add.w	sl, r4, #25
 80436b6:	68e3      	ldr	r3, [r4, #12]
 80436b8:	6832      	ldr	r2, [r6, #0]
 80436ba:	1a9b      	subs	r3, r3, r2
 80436bc:	42ab      	cmp	r3, r5
 80436be:	dc26      	bgt.n	804370e <_printf_common+0x96>
 80436c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80436c4:	6822      	ldr	r2, [r4, #0]
 80436c6:	3b00      	subs	r3, #0
 80436c8:	bf18      	it	ne
 80436ca:	2301      	movne	r3, #1
 80436cc:	0692      	lsls	r2, r2, #26
 80436ce:	d42b      	bmi.n	8043728 <_printf_common+0xb0>
 80436d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80436d4:	4641      	mov	r1, r8
 80436d6:	4638      	mov	r0, r7
 80436d8:	47c8      	blx	r9
 80436da:	3001      	adds	r0, #1
 80436dc:	d01e      	beq.n	804371c <_printf_common+0xa4>
 80436de:	6823      	ldr	r3, [r4, #0]
 80436e0:	6922      	ldr	r2, [r4, #16]
 80436e2:	f003 0306 	and.w	r3, r3, #6
 80436e6:	2b04      	cmp	r3, #4
 80436e8:	bf02      	ittt	eq
 80436ea:	68e5      	ldreq	r5, [r4, #12]
 80436ec:	6833      	ldreq	r3, [r6, #0]
 80436ee:	1aed      	subeq	r5, r5, r3
 80436f0:	68a3      	ldr	r3, [r4, #8]
 80436f2:	bf0c      	ite	eq
 80436f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80436f8:	2500      	movne	r5, #0
 80436fa:	4293      	cmp	r3, r2
 80436fc:	bfc4      	itt	gt
 80436fe:	1a9b      	subgt	r3, r3, r2
 8043700:	18ed      	addgt	r5, r5, r3
 8043702:	2600      	movs	r6, #0
 8043704:	341a      	adds	r4, #26
 8043706:	42b5      	cmp	r5, r6
 8043708:	d11a      	bne.n	8043740 <_printf_common+0xc8>
 804370a:	2000      	movs	r0, #0
 804370c:	e008      	b.n	8043720 <_printf_common+0xa8>
 804370e:	2301      	movs	r3, #1
 8043710:	4652      	mov	r2, sl
 8043712:	4641      	mov	r1, r8
 8043714:	4638      	mov	r0, r7
 8043716:	47c8      	blx	r9
 8043718:	3001      	adds	r0, #1
 804371a:	d103      	bne.n	8043724 <_printf_common+0xac>
 804371c:	f04f 30ff 	mov.w	r0, #4294967295
 8043720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8043724:	3501      	adds	r5, #1
 8043726:	e7c6      	b.n	80436b6 <_printf_common+0x3e>
 8043728:	18e1      	adds	r1, r4, r3
 804372a:	1c5a      	adds	r2, r3, #1
 804372c:	2030      	movs	r0, #48	@ 0x30
 804372e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8043732:	4422      	add	r2, r4
 8043734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8043738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 804373c:	3302      	adds	r3, #2
 804373e:	e7c7      	b.n	80436d0 <_printf_common+0x58>
 8043740:	2301      	movs	r3, #1
 8043742:	4622      	mov	r2, r4
 8043744:	4641      	mov	r1, r8
 8043746:	4638      	mov	r0, r7
 8043748:	47c8      	blx	r9
 804374a:	3001      	adds	r0, #1
 804374c:	d0e6      	beq.n	804371c <_printf_common+0xa4>
 804374e:	3601      	adds	r6, #1
 8043750:	e7d9      	b.n	8043706 <_printf_common+0x8e>
	...

08043754 <_printf_i>:
 8043754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8043758:	7e0f      	ldrb	r7, [r1, #24]
 804375a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 804375c:	2f78      	cmp	r7, #120	@ 0x78
 804375e:	4691      	mov	r9, r2
 8043760:	4680      	mov	r8, r0
 8043762:	460c      	mov	r4, r1
 8043764:	469a      	mov	sl, r3
 8043766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 804376a:	d807      	bhi.n	804377c <_printf_i+0x28>
 804376c:	2f62      	cmp	r7, #98	@ 0x62
 804376e:	d80a      	bhi.n	8043786 <_printf_i+0x32>
 8043770:	2f00      	cmp	r7, #0
 8043772:	f000 80d2 	beq.w	804391a <_printf_i+0x1c6>
 8043776:	2f58      	cmp	r7, #88	@ 0x58
 8043778:	f000 80b9 	beq.w	80438ee <_printf_i+0x19a>
 804377c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8043780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8043784:	e03a      	b.n	80437fc <_printf_i+0xa8>
 8043786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 804378a:	2b15      	cmp	r3, #21
 804378c:	d8f6      	bhi.n	804377c <_printf_i+0x28>
 804378e:	a101      	add	r1, pc, #4	@ (adr r1, 8043794 <_printf_i+0x40>)
 8043790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8043794:	080437ed 	.word	0x080437ed
 8043798:	08043801 	.word	0x08043801
 804379c:	0804377d 	.word	0x0804377d
 80437a0:	0804377d 	.word	0x0804377d
 80437a4:	0804377d 	.word	0x0804377d
 80437a8:	0804377d 	.word	0x0804377d
 80437ac:	08043801 	.word	0x08043801
 80437b0:	0804377d 	.word	0x0804377d
 80437b4:	0804377d 	.word	0x0804377d
 80437b8:	0804377d 	.word	0x0804377d
 80437bc:	0804377d 	.word	0x0804377d
 80437c0:	08043901 	.word	0x08043901
 80437c4:	0804382b 	.word	0x0804382b
 80437c8:	080438bb 	.word	0x080438bb
 80437cc:	0804377d 	.word	0x0804377d
 80437d0:	0804377d 	.word	0x0804377d
 80437d4:	08043923 	.word	0x08043923
 80437d8:	0804377d 	.word	0x0804377d
 80437dc:	0804382b 	.word	0x0804382b
 80437e0:	0804377d 	.word	0x0804377d
 80437e4:	0804377d 	.word	0x0804377d
 80437e8:	080438c3 	.word	0x080438c3
 80437ec:	6833      	ldr	r3, [r6, #0]
 80437ee:	1d1a      	adds	r2, r3, #4
 80437f0:	681b      	ldr	r3, [r3, #0]
 80437f2:	6032      	str	r2, [r6, #0]
 80437f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80437f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80437fc:	2301      	movs	r3, #1
 80437fe:	e09d      	b.n	804393c <_printf_i+0x1e8>
 8043800:	6833      	ldr	r3, [r6, #0]
 8043802:	6820      	ldr	r0, [r4, #0]
 8043804:	1d19      	adds	r1, r3, #4
 8043806:	6031      	str	r1, [r6, #0]
 8043808:	0606      	lsls	r6, r0, #24
 804380a:	d501      	bpl.n	8043810 <_printf_i+0xbc>
 804380c:	681d      	ldr	r5, [r3, #0]
 804380e:	e003      	b.n	8043818 <_printf_i+0xc4>
 8043810:	0645      	lsls	r5, r0, #25
 8043812:	d5fb      	bpl.n	804380c <_printf_i+0xb8>
 8043814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8043818:	2d00      	cmp	r5, #0
 804381a:	da03      	bge.n	8043824 <_printf_i+0xd0>
 804381c:	232d      	movs	r3, #45	@ 0x2d
 804381e:	426d      	negs	r5, r5
 8043820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8043824:	4859      	ldr	r0, [pc, #356]	@ (804398c <_printf_i+0x238>)
 8043826:	230a      	movs	r3, #10
 8043828:	e011      	b.n	804384e <_printf_i+0xfa>
 804382a:	6821      	ldr	r1, [r4, #0]
 804382c:	6833      	ldr	r3, [r6, #0]
 804382e:	0608      	lsls	r0, r1, #24
 8043830:	f853 5b04 	ldr.w	r5, [r3], #4
 8043834:	d402      	bmi.n	804383c <_printf_i+0xe8>
 8043836:	0649      	lsls	r1, r1, #25
 8043838:	bf48      	it	mi
 804383a:	b2ad      	uxthmi	r5, r5
 804383c:	2f6f      	cmp	r7, #111	@ 0x6f
 804383e:	4853      	ldr	r0, [pc, #332]	@ (804398c <_printf_i+0x238>)
 8043840:	6033      	str	r3, [r6, #0]
 8043842:	bf14      	ite	ne
 8043844:	230a      	movne	r3, #10
 8043846:	2308      	moveq	r3, #8
 8043848:	2100      	movs	r1, #0
 804384a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 804384e:	6866      	ldr	r6, [r4, #4]
 8043850:	60a6      	str	r6, [r4, #8]
 8043852:	2e00      	cmp	r6, #0
 8043854:	bfa2      	ittt	ge
 8043856:	6821      	ldrge	r1, [r4, #0]
 8043858:	f021 0104 	bicge.w	r1, r1, #4
 804385c:	6021      	strge	r1, [r4, #0]
 804385e:	b90d      	cbnz	r5, 8043864 <_printf_i+0x110>
 8043860:	2e00      	cmp	r6, #0
 8043862:	d04b      	beq.n	80438fc <_printf_i+0x1a8>
 8043864:	4616      	mov	r6, r2
 8043866:	fbb5 f1f3 	udiv	r1, r5, r3
 804386a:	fb03 5711 	mls	r7, r3, r1, r5
 804386e:	5dc7      	ldrb	r7, [r0, r7]
 8043870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8043874:	462f      	mov	r7, r5
 8043876:	42bb      	cmp	r3, r7
 8043878:	460d      	mov	r5, r1
 804387a:	d9f4      	bls.n	8043866 <_printf_i+0x112>
 804387c:	2b08      	cmp	r3, #8
 804387e:	d10b      	bne.n	8043898 <_printf_i+0x144>
 8043880:	6823      	ldr	r3, [r4, #0]
 8043882:	07df      	lsls	r7, r3, #31
 8043884:	d508      	bpl.n	8043898 <_printf_i+0x144>
 8043886:	6923      	ldr	r3, [r4, #16]
 8043888:	6861      	ldr	r1, [r4, #4]
 804388a:	4299      	cmp	r1, r3
 804388c:	bfde      	ittt	le
 804388e:	2330      	movle	r3, #48	@ 0x30
 8043890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8043894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8043898:	1b92      	subs	r2, r2, r6
 804389a:	6122      	str	r2, [r4, #16]
 804389c:	f8cd a000 	str.w	sl, [sp]
 80438a0:	464b      	mov	r3, r9
 80438a2:	aa03      	add	r2, sp, #12
 80438a4:	4621      	mov	r1, r4
 80438a6:	4640      	mov	r0, r8
 80438a8:	f7ff fee6 	bl	8043678 <_printf_common>
 80438ac:	3001      	adds	r0, #1
 80438ae:	d14a      	bne.n	8043946 <_printf_i+0x1f2>
 80438b0:	f04f 30ff 	mov.w	r0, #4294967295
 80438b4:	b004      	add	sp, #16
 80438b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80438ba:	6823      	ldr	r3, [r4, #0]
 80438bc:	f043 0320 	orr.w	r3, r3, #32
 80438c0:	6023      	str	r3, [r4, #0]
 80438c2:	4833      	ldr	r0, [pc, #204]	@ (8043990 <_printf_i+0x23c>)
 80438c4:	2778      	movs	r7, #120	@ 0x78
 80438c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80438ca:	6823      	ldr	r3, [r4, #0]
 80438cc:	6831      	ldr	r1, [r6, #0]
 80438ce:	061f      	lsls	r7, r3, #24
 80438d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80438d4:	d402      	bmi.n	80438dc <_printf_i+0x188>
 80438d6:	065f      	lsls	r7, r3, #25
 80438d8:	bf48      	it	mi
 80438da:	b2ad      	uxthmi	r5, r5
 80438dc:	6031      	str	r1, [r6, #0]
 80438de:	07d9      	lsls	r1, r3, #31
 80438e0:	bf44      	itt	mi
 80438e2:	f043 0320 	orrmi.w	r3, r3, #32
 80438e6:	6023      	strmi	r3, [r4, #0]
 80438e8:	b11d      	cbz	r5, 80438f2 <_printf_i+0x19e>
 80438ea:	2310      	movs	r3, #16
 80438ec:	e7ac      	b.n	8043848 <_printf_i+0xf4>
 80438ee:	4827      	ldr	r0, [pc, #156]	@ (804398c <_printf_i+0x238>)
 80438f0:	e7e9      	b.n	80438c6 <_printf_i+0x172>
 80438f2:	6823      	ldr	r3, [r4, #0]
 80438f4:	f023 0320 	bic.w	r3, r3, #32
 80438f8:	6023      	str	r3, [r4, #0]
 80438fa:	e7f6      	b.n	80438ea <_printf_i+0x196>
 80438fc:	4616      	mov	r6, r2
 80438fe:	e7bd      	b.n	804387c <_printf_i+0x128>
 8043900:	6833      	ldr	r3, [r6, #0]
 8043902:	6825      	ldr	r5, [r4, #0]
 8043904:	6961      	ldr	r1, [r4, #20]
 8043906:	1d18      	adds	r0, r3, #4
 8043908:	6030      	str	r0, [r6, #0]
 804390a:	062e      	lsls	r6, r5, #24
 804390c:	681b      	ldr	r3, [r3, #0]
 804390e:	d501      	bpl.n	8043914 <_printf_i+0x1c0>
 8043910:	6019      	str	r1, [r3, #0]
 8043912:	e002      	b.n	804391a <_printf_i+0x1c6>
 8043914:	0668      	lsls	r0, r5, #25
 8043916:	d5fb      	bpl.n	8043910 <_printf_i+0x1bc>
 8043918:	8019      	strh	r1, [r3, #0]
 804391a:	2300      	movs	r3, #0
 804391c:	6123      	str	r3, [r4, #16]
 804391e:	4616      	mov	r6, r2
 8043920:	e7bc      	b.n	804389c <_printf_i+0x148>
 8043922:	6833      	ldr	r3, [r6, #0]
 8043924:	1d1a      	adds	r2, r3, #4
 8043926:	6032      	str	r2, [r6, #0]
 8043928:	681e      	ldr	r6, [r3, #0]
 804392a:	6862      	ldr	r2, [r4, #4]
 804392c:	2100      	movs	r1, #0
 804392e:	4630      	mov	r0, r6
 8043930:	f7fc fc86 	bl	8040240 <memchr>
 8043934:	b108      	cbz	r0, 804393a <_printf_i+0x1e6>
 8043936:	1b80      	subs	r0, r0, r6
 8043938:	6060      	str	r0, [r4, #4]
 804393a:	6863      	ldr	r3, [r4, #4]
 804393c:	6123      	str	r3, [r4, #16]
 804393e:	2300      	movs	r3, #0
 8043940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8043944:	e7aa      	b.n	804389c <_printf_i+0x148>
 8043946:	6923      	ldr	r3, [r4, #16]
 8043948:	4632      	mov	r2, r6
 804394a:	4649      	mov	r1, r9
 804394c:	4640      	mov	r0, r8
 804394e:	47d0      	blx	sl
 8043950:	3001      	adds	r0, #1
 8043952:	d0ad      	beq.n	80438b0 <_printf_i+0x15c>
 8043954:	6823      	ldr	r3, [r4, #0]
 8043956:	079b      	lsls	r3, r3, #30
 8043958:	d413      	bmi.n	8043982 <_printf_i+0x22e>
 804395a:	68e0      	ldr	r0, [r4, #12]
 804395c:	9b03      	ldr	r3, [sp, #12]
 804395e:	4298      	cmp	r0, r3
 8043960:	bfb8      	it	lt
 8043962:	4618      	movlt	r0, r3
 8043964:	e7a6      	b.n	80438b4 <_printf_i+0x160>
 8043966:	2301      	movs	r3, #1
 8043968:	4632      	mov	r2, r6
 804396a:	4649      	mov	r1, r9
 804396c:	4640      	mov	r0, r8
 804396e:	47d0      	blx	sl
 8043970:	3001      	adds	r0, #1
 8043972:	d09d      	beq.n	80438b0 <_printf_i+0x15c>
 8043974:	3501      	adds	r5, #1
 8043976:	68e3      	ldr	r3, [r4, #12]
 8043978:	9903      	ldr	r1, [sp, #12]
 804397a:	1a5b      	subs	r3, r3, r1
 804397c:	42ab      	cmp	r3, r5
 804397e:	dcf2      	bgt.n	8043966 <_printf_i+0x212>
 8043980:	e7eb      	b.n	804395a <_printf_i+0x206>
 8043982:	2500      	movs	r5, #0
 8043984:	f104 0619 	add.w	r6, r4, #25
 8043988:	e7f5      	b.n	8043976 <_printf_i+0x222>
 804398a:	bf00      	nop
 804398c:	08043d99 	.word	0x08043d99
 8043990:	08043daa 	.word	0x08043daa

08043994 <__sflush_r>:
 8043994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8043998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804399c:	0716      	lsls	r6, r2, #28
 804399e:	4605      	mov	r5, r0
 80439a0:	460c      	mov	r4, r1
 80439a2:	d454      	bmi.n	8043a4e <__sflush_r+0xba>
 80439a4:	684b      	ldr	r3, [r1, #4]
 80439a6:	2b00      	cmp	r3, #0
 80439a8:	dc02      	bgt.n	80439b0 <__sflush_r+0x1c>
 80439aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80439ac:	2b00      	cmp	r3, #0
 80439ae:	dd48      	ble.n	8043a42 <__sflush_r+0xae>
 80439b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80439b2:	2e00      	cmp	r6, #0
 80439b4:	d045      	beq.n	8043a42 <__sflush_r+0xae>
 80439b6:	2300      	movs	r3, #0
 80439b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80439bc:	682f      	ldr	r7, [r5, #0]
 80439be:	6a21      	ldr	r1, [r4, #32]
 80439c0:	602b      	str	r3, [r5, #0]
 80439c2:	d030      	beq.n	8043a26 <__sflush_r+0x92>
 80439c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80439c6:	89a3      	ldrh	r3, [r4, #12]
 80439c8:	0759      	lsls	r1, r3, #29
 80439ca:	d505      	bpl.n	80439d8 <__sflush_r+0x44>
 80439cc:	6863      	ldr	r3, [r4, #4]
 80439ce:	1ad2      	subs	r2, r2, r3
 80439d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80439d2:	b10b      	cbz	r3, 80439d8 <__sflush_r+0x44>
 80439d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80439d6:	1ad2      	subs	r2, r2, r3
 80439d8:	2300      	movs	r3, #0
 80439da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80439dc:	6a21      	ldr	r1, [r4, #32]
 80439de:	4628      	mov	r0, r5
 80439e0:	47b0      	blx	r6
 80439e2:	1c43      	adds	r3, r0, #1
 80439e4:	89a3      	ldrh	r3, [r4, #12]
 80439e6:	d106      	bne.n	80439f6 <__sflush_r+0x62>
 80439e8:	6829      	ldr	r1, [r5, #0]
 80439ea:	291d      	cmp	r1, #29
 80439ec:	d82b      	bhi.n	8043a46 <__sflush_r+0xb2>
 80439ee:	4a2a      	ldr	r2, [pc, #168]	@ (8043a98 <__sflush_r+0x104>)
 80439f0:	410a      	asrs	r2, r1
 80439f2:	07d6      	lsls	r6, r2, #31
 80439f4:	d427      	bmi.n	8043a46 <__sflush_r+0xb2>
 80439f6:	2200      	movs	r2, #0
 80439f8:	6062      	str	r2, [r4, #4]
 80439fa:	04d9      	lsls	r1, r3, #19
 80439fc:	6922      	ldr	r2, [r4, #16]
 80439fe:	6022      	str	r2, [r4, #0]
 8043a00:	d504      	bpl.n	8043a0c <__sflush_r+0x78>
 8043a02:	1c42      	adds	r2, r0, #1
 8043a04:	d101      	bne.n	8043a0a <__sflush_r+0x76>
 8043a06:	682b      	ldr	r3, [r5, #0]
 8043a08:	b903      	cbnz	r3, 8043a0c <__sflush_r+0x78>
 8043a0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8043a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8043a0e:	602f      	str	r7, [r5, #0]
 8043a10:	b1b9      	cbz	r1, 8043a42 <__sflush_r+0xae>
 8043a12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8043a16:	4299      	cmp	r1, r3
 8043a18:	d002      	beq.n	8043a20 <__sflush_r+0x8c>
 8043a1a:	4628      	mov	r0, r5
 8043a1c:	f7ff fbf2 	bl	8043204 <_free_r>
 8043a20:	2300      	movs	r3, #0
 8043a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8043a24:	e00d      	b.n	8043a42 <__sflush_r+0xae>
 8043a26:	2301      	movs	r3, #1
 8043a28:	4628      	mov	r0, r5
 8043a2a:	47b0      	blx	r6
 8043a2c:	4602      	mov	r2, r0
 8043a2e:	1c50      	adds	r0, r2, #1
 8043a30:	d1c9      	bne.n	80439c6 <__sflush_r+0x32>
 8043a32:	682b      	ldr	r3, [r5, #0]
 8043a34:	2b00      	cmp	r3, #0
 8043a36:	d0c6      	beq.n	80439c6 <__sflush_r+0x32>
 8043a38:	2b1d      	cmp	r3, #29
 8043a3a:	d001      	beq.n	8043a40 <__sflush_r+0xac>
 8043a3c:	2b16      	cmp	r3, #22
 8043a3e:	d11e      	bne.n	8043a7e <__sflush_r+0xea>
 8043a40:	602f      	str	r7, [r5, #0]
 8043a42:	2000      	movs	r0, #0
 8043a44:	e022      	b.n	8043a8c <__sflush_r+0xf8>
 8043a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8043a4a:	b21b      	sxth	r3, r3
 8043a4c:	e01b      	b.n	8043a86 <__sflush_r+0xf2>
 8043a4e:	690f      	ldr	r7, [r1, #16]
 8043a50:	2f00      	cmp	r7, #0
 8043a52:	d0f6      	beq.n	8043a42 <__sflush_r+0xae>
 8043a54:	0793      	lsls	r3, r2, #30
 8043a56:	680e      	ldr	r6, [r1, #0]
 8043a58:	bf08      	it	eq
 8043a5a:	694b      	ldreq	r3, [r1, #20]
 8043a5c:	600f      	str	r7, [r1, #0]
 8043a5e:	bf18      	it	ne
 8043a60:	2300      	movne	r3, #0
 8043a62:	eba6 0807 	sub.w	r8, r6, r7
 8043a66:	608b      	str	r3, [r1, #8]
 8043a68:	f1b8 0f00 	cmp.w	r8, #0
 8043a6c:	dde9      	ble.n	8043a42 <__sflush_r+0xae>
 8043a6e:	6a21      	ldr	r1, [r4, #32]
 8043a70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8043a72:	4643      	mov	r3, r8
 8043a74:	463a      	mov	r2, r7
 8043a76:	4628      	mov	r0, r5
 8043a78:	47b0      	blx	r6
 8043a7a:	2800      	cmp	r0, #0
 8043a7c:	dc08      	bgt.n	8043a90 <__sflush_r+0xfc>
 8043a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8043a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8043a86:	81a3      	strh	r3, [r4, #12]
 8043a88:	f04f 30ff 	mov.w	r0, #4294967295
 8043a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8043a90:	4407      	add	r7, r0
 8043a92:	eba8 0800 	sub.w	r8, r8, r0
 8043a96:	e7e7      	b.n	8043a68 <__sflush_r+0xd4>
 8043a98:	dfbffffe 	.word	0xdfbffffe

08043a9c <_fflush_r>:
 8043a9c:	b538      	push	{r3, r4, r5, lr}
 8043a9e:	690b      	ldr	r3, [r1, #16]
 8043aa0:	4605      	mov	r5, r0
 8043aa2:	460c      	mov	r4, r1
 8043aa4:	b913      	cbnz	r3, 8043aac <_fflush_r+0x10>
 8043aa6:	2500      	movs	r5, #0
 8043aa8:	4628      	mov	r0, r5
 8043aaa:	bd38      	pop	{r3, r4, r5, pc}
 8043aac:	b118      	cbz	r0, 8043ab6 <_fflush_r+0x1a>
 8043aae:	6a03      	ldr	r3, [r0, #32]
 8043ab0:	b90b      	cbnz	r3, 8043ab6 <_fflush_r+0x1a>
 8043ab2:	f7ff fa9f 	bl	8042ff4 <__sinit>
 8043ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8043aba:	2b00      	cmp	r3, #0
 8043abc:	d0f3      	beq.n	8043aa6 <_fflush_r+0xa>
 8043abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8043ac0:	07d0      	lsls	r0, r2, #31
 8043ac2:	d404      	bmi.n	8043ace <_fflush_r+0x32>
 8043ac4:	0599      	lsls	r1, r3, #22
 8043ac6:	d402      	bmi.n	8043ace <_fflush_r+0x32>
 8043ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8043aca:	f7ff fb98 	bl	80431fe <__retarget_lock_acquire_recursive>
 8043ace:	4628      	mov	r0, r5
 8043ad0:	4621      	mov	r1, r4
 8043ad2:	f7ff ff5f 	bl	8043994 <__sflush_r>
 8043ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8043ad8:	07da      	lsls	r2, r3, #31
 8043ada:	4605      	mov	r5, r0
 8043adc:	d4e4      	bmi.n	8043aa8 <_fflush_r+0xc>
 8043ade:	89a3      	ldrh	r3, [r4, #12]
 8043ae0:	059b      	lsls	r3, r3, #22
 8043ae2:	d4e1      	bmi.n	8043aa8 <_fflush_r+0xc>
 8043ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8043ae6:	f7ff fb8b 	bl	8043200 <__retarget_lock_release_recursive>
 8043aea:	e7dd      	b.n	8043aa8 <_fflush_r+0xc>

08043aec <__swbuf_r>:
 8043aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043aee:	460e      	mov	r6, r1
 8043af0:	4614      	mov	r4, r2
 8043af2:	4605      	mov	r5, r0
 8043af4:	b118      	cbz	r0, 8043afe <__swbuf_r+0x12>
 8043af6:	6a03      	ldr	r3, [r0, #32]
 8043af8:	b90b      	cbnz	r3, 8043afe <__swbuf_r+0x12>
 8043afa:	f7ff fa7b 	bl	8042ff4 <__sinit>
 8043afe:	69a3      	ldr	r3, [r4, #24]
 8043b00:	60a3      	str	r3, [r4, #8]
 8043b02:	89a3      	ldrh	r3, [r4, #12]
 8043b04:	071a      	lsls	r2, r3, #28
 8043b06:	d501      	bpl.n	8043b0c <__swbuf_r+0x20>
 8043b08:	6923      	ldr	r3, [r4, #16]
 8043b0a:	b943      	cbnz	r3, 8043b1e <__swbuf_r+0x32>
 8043b0c:	4621      	mov	r1, r4
 8043b0e:	4628      	mov	r0, r5
 8043b10:	f000 f82a 	bl	8043b68 <__swsetup_r>
 8043b14:	b118      	cbz	r0, 8043b1e <__swbuf_r+0x32>
 8043b16:	f04f 37ff 	mov.w	r7, #4294967295
 8043b1a:	4638      	mov	r0, r7
 8043b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8043b1e:	6823      	ldr	r3, [r4, #0]
 8043b20:	6922      	ldr	r2, [r4, #16]
 8043b22:	1a98      	subs	r0, r3, r2
 8043b24:	6963      	ldr	r3, [r4, #20]
 8043b26:	b2f6      	uxtb	r6, r6
 8043b28:	4283      	cmp	r3, r0
 8043b2a:	4637      	mov	r7, r6
 8043b2c:	dc05      	bgt.n	8043b3a <__swbuf_r+0x4e>
 8043b2e:	4621      	mov	r1, r4
 8043b30:	4628      	mov	r0, r5
 8043b32:	f7ff ffb3 	bl	8043a9c <_fflush_r>
 8043b36:	2800      	cmp	r0, #0
 8043b38:	d1ed      	bne.n	8043b16 <__swbuf_r+0x2a>
 8043b3a:	68a3      	ldr	r3, [r4, #8]
 8043b3c:	3b01      	subs	r3, #1
 8043b3e:	60a3      	str	r3, [r4, #8]
 8043b40:	6823      	ldr	r3, [r4, #0]
 8043b42:	1c5a      	adds	r2, r3, #1
 8043b44:	6022      	str	r2, [r4, #0]
 8043b46:	701e      	strb	r6, [r3, #0]
 8043b48:	6962      	ldr	r2, [r4, #20]
 8043b4a:	1c43      	adds	r3, r0, #1
 8043b4c:	429a      	cmp	r2, r3
 8043b4e:	d004      	beq.n	8043b5a <__swbuf_r+0x6e>
 8043b50:	89a3      	ldrh	r3, [r4, #12]
 8043b52:	07db      	lsls	r3, r3, #31
 8043b54:	d5e1      	bpl.n	8043b1a <__swbuf_r+0x2e>
 8043b56:	2e0a      	cmp	r6, #10
 8043b58:	d1df      	bne.n	8043b1a <__swbuf_r+0x2e>
 8043b5a:	4621      	mov	r1, r4
 8043b5c:	4628      	mov	r0, r5
 8043b5e:	f7ff ff9d 	bl	8043a9c <_fflush_r>
 8043b62:	2800      	cmp	r0, #0
 8043b64:	d0d9      	beq.n	8043b1a <__swbuf_r+0x2e>
 8043b66:	e7d6      	b.n	8043b16 <__swbuf_r+0x2a>

08043b68 <__swsetup_r>:
 8043b68:	b538      	push	{r3, r4, r5, lr}
 8043b6a:	4b29      	ldr	r3, [pc, #164]	@ (8043c10 <__swsetup_r+0xa8>)
 8043b6c:	4605      	mov	r5, r0
 8043b6e:	6818      	ldr	r0, [r3, #0]
 8043b70:	460c      	mov	r4, r1
 8043b72:	b118      	cbz	r0, 8043b7c <__swsetup_r+0x14>
 8043b74:	6a03      	ldr	r3, [r0, #32]
 8043b76:	b90b      	cbnz	r3, 8043b7c <__swsetup_r+0x14>
 8043b78:	f7ff fa3c 	bl	8042ff4 <__sinit>
 8043b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8043b80:	0719      	lsls	r1, r3, #28
 8043b82:	d422      	bmi.n	8043bca <__swsetup_r+0x62>
 8043b84:	06da      	lsls	r2, r3, #27
 8043b86:	d407      	bmi.n	8043b98 <__swsetup_r+0x30>
 8043b88:	2209      	movs	r2, #9
 8043b8a:	602a      	str	r2, [r5, #0]
 8043b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8043b90:	81a3      	strh	r3, [r4, #12]
 8043b92:	f04f 30ff 	mov.w	r0, #4294967295
 8043b96:	e033      	b.n	8043c00 <__swsetup_r+0x98>
 8043b98:	0758      	lsls	r0, r3, #29
 8043b9a:	d512      	bpl.n	8043bc2 <__swsetup_r+0x5a>
 8043b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8043b9e:	b141      	cbz	r1, 8043bb2 <__swsetup_r+0x4a>
 8043ba0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8043ba4:	4299      	cmp	r1, r3
 8043ba6:	d002      	beq.n	8043bae <__swsetup_r+0x46>
 8043ba8:	4628      	mov	r0, r5
 8043baa:	f7ff fb2b 	bl	8043204 <_free_r>
 8043bae:	2300      	movs	r3, #0
 8043bb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8043bb2:	89a3      	ldrh	r3, [r4, #12]
 8043bb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8043bb8:	81a3      	strh	r3, [r4, #12]
 8043bba:	2300      	movs	r3, #0
 8043bbc:	6063      	str	r3, [r4, #4]
 8043bbe:	6923      	ldr	r3, [r4, #16]
 8043bc0:	6023      	str	r3, [r4, #0]
 8043bc2:	89a3      	ldrh	r3, [r4, #12]
 8043bc4:	f043 0308 	orr.w	r3, r3, #8
 8043bc8:	81a3      	strh	r3, [r4, #12]
 8043bca:	6923      	ldr	r3, [r4, #16]
 8043bcc:	b94b      	cbnz	r3, 8043be2 <__swsetup_r+0x7a>
 8043bce:	89a3      	ldrh	r3, [r4, #12]
 8043bd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8043bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8043bd8:	d003      	beq.n	8043be2 <__swsetup_r+0x7a>
 8043bda:	4621      	mov	r1, r4
 8043bdc:	4628      	mov	r0, r5
 8043bde:	f000 f84f 	bl	8043c80 <__smakebuf_r>
 8043be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8043be6:	f013 0201 	ands.w	r2, r3, #1
 8043bea:	d00a      	beq.n	8043c02 <__swsetup_r+0x9a>
 8043bec:	2200      	movs	r2, #0
 8043bee:	60a2      	str	r2, [r4, #8]
 8043bf0:	6962      	ldr	r2, [r4, #20]
 8043bf2:	4252      	negs	r2, r2
 8043bf4:	61a2      	str	r2, [r4, #24]
 8043bf6:	6922      	ldr	r2, [r4, #16]
 8043bf8:	b942      	cbnz	r2, 8043c0c <__swsetup_r+0xa4>
 8043bfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8043bfe:	d1c5      	bne.n	8043b8c <__swsetup_r+0x24>
 8043c00:	bd38      	pop	{r3, r4, r5, pc}
 8043c02:	0799      	lsls	r1, r3, #30
 8043c04:	bf58      	it	pl
 8043c06:	6962      	ldrpl	r2, [r4, #20]
 8043c08:	60a2      	str	r2, [r4, #8]
 8043c0a:	e7f4      	b.n	8043bf6 <__swsetup_r+0x8e>
 8043c0c:	2000      	movs	r0, #0
 8043c0e:	e7f7      	b.n	8043c00 <__swsetup_r+0x98>
 8043c10:	20000018 	.word	0x20000018

08043c14 <_sbrk_r>:
 8043c14:	b538      	push	{r3, r4, r5, lr}
 8043c16:	4d06      	ldr	r5, [pc, #24]	@ (8043c30 <_sbrk_r+0x1c>)
 8043c18:	2300      	movs	r3, #0
 8043c1a:	4604      	mov	r4, r0
 8043c1c:	4608      	mov	r0, r1
 8043c1e:	602b      	str	r3, [r5, #0]
 8043c20:	f7fc ff2e 	bl	8040a80 <_sbrk>
 8043c24:	1c43      	adds	r3, r0, #1
 8043c26:	d102      	bne.n	8043c2e <_sbrk_r+0x1a>
 8043c28:	682b      	ldr	r3, [r5, #0]
 8043c2a:	b103      	cbz	r3, 8043c2e <_sbrk_r+0x1a>
 8043c2c:	6023      	str	r3, [r4, #0]
 8043c2e:	bd38      	pop	{r3, r4, r5, pc}
 8043c30:	20000250 	.word	0x20000250

08043c34 <__swhatbuf_r>:
 8043c34:	b570      	push	{r4, r5, r6, lr}
 8043c36:	460c      	mov	r4, r1
 8043c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8043c3c:	2900      	cmp	r1, #0
 8043c3e:	b096      	sub	sp, #88	@ 0x58
 8043c40:	4615      	mov	r5, r2
 8043c42:	461e      	mov	r6, r3
 8043c44:	da0d      	bge.n	8043c62 <__swhatbuf_r+0x2e>
 8043c46:	89a3      	ldrh	r3, [r4, #12]
 8043c48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8043c4c:	f04f 0100 	mov.w	r1, #0
 8043c50:	bf14      	ite	ne
 8043c52:	2340      	movne	r3, #64	@ 0x40
 8043c54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8043c58:	2000      	movs	r0, #0
 8043c5a:	6031      	str	r1, [r6, #0]
 8043c5c:	602b      	str	r3, [r5, #0]
 8043c5e:	b016      	add	sp, #88	@ 0x58
 8043c60:	bd70      	pop	{r4, r5, r6, pc}
 8043c62:	466a      	mov	r2, sp
 8043c64:	f000 f848 	bl	8043cf8 <_fstat_r>
 8043c68:	2800      	cmp	r0, #0
 8043c6a:	dbec      	blt.n	8043c46 <__swhatbuf_r+0x12>
 8043c6c:	9901      	ldr	r1, [sp, #4]
 8043c6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8043c72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8043c76:	4259      	negs	r1, r3
 8043c78:	4159      	adcs	r1, r3
 8043c7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8043c7e:	e7eb      	b.n	8043c58 <__swhatbuf_r+0x24>

08043c80 <__smakebuf_r>:
 8043c80:	898b      	ldrh	r3, [r1, #12]
 8043c82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8043c84:	079d      	lsls	r5, r3, #30
 8043c86:	4606      	mov	r6, r0
 8043c88:	460c      	mov	r4, r1
 8043c8a:	d507      	bpl.n	8043c9c <__smakebuf_r+0x1c>
 8043c8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8043c90:	6023      	str	r3, [r4, #0]
 8043c92:	6123      	str	r3, [r4, #16]
 8043c94:	2301      	movs	r3, #1
 8043c96:	6163      	str	r3, [r4, #20]
 8043c98:	b003      	add	sp, #12
 8043c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8043c9c:	ab01      	add	r3, sp, #4
 8043c9e:	466a      	mov	r2, sp
 8043ca0:	f7ff ffc8 	bl	8043c34 <__swhatbuf_r>
 8043ca4:	9f00      	ldr	r7, [sp, #0]
 8043ca6:	4605      	mov	r5, r0
 8043ca8:	4639      	mov	r1, r7
 8043caa:	4630      	mov	r0, r6
 8043cac:	f7ff fb16 	bl	80432dc <_malloc_r>
 8043cb0:	b948      	cbnz	r0, 8043cc6 <__smakebuf_r+0x46>
 8043cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8043cb6:	059a      	lsls	r2, r3, #22
 8043cb8:	d4ee      	bmi.n	8043c98 <__smakebuf_r+0x18>
 8043cba:	f023 0303 	bic.w	r3, r3, #3
 8043cbe:	f043 0302 	orr.w	r3, r3, #2
 8043cc2:	81a3      	strh	r3, [r4, #12]
 8043cc4:	e7e2      	b.n	8043c8c <__smakebuf_r+0xc>
 8043cc6:	89a3      	ldrh	r3, [r4, #12]
 8043cc8:	6020      	str	r0, [r4, #0]
 8043cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8043cce:	81a3      	strh	r3, [r4, #12]
 8043cd0:	9b01      	ldr	r3, [sp, #4]
 8043cd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8043cd6:	b15b      	cbz	r3, 8043cf0 <__smakebuf_r+0x70>
 8043cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8043cdc:	4630      	mov	r0, r6
 8043cde:	f000 f81d 	bl	8043d1c <_isatty_r>
 8043ce2:	b128      	cbz	r0, 8043cf0 <__smakebuf_r+0x70>
 8043ce4:	89a3      	ldrh	r3, [r4, #12]
 8043ce6:	f023 0303 	bic.w	r3, r3, #3
 8043cea:	f043 0301 	orr.w	r3, r3, #1
 8043cee:	81a3      	strh	r3, [r4, #12]
 8043cf0:	89a3      	ldrh	r3, [r4, #12]
 8043cf2:	431d      	orrs	r5, r3
 8043cf4:	81a5      	strh	r5, [r4, #12]
 8043cf6:	e7cf      	b.n	8043c98 <__smakebuf_r+0x18>

08043cf8 <_fstat_r>:
 8043cf8:	b538      	push	{r3, r4, r5, lr}
 8043cfa:	4d07      	ldr	r5, [pc, #28]	@ (8043d18 <_fstat_r+0x20>)
 8043cfc:	2300      	movs	r3, #0
 8043cfe:	4604      	mov	r4, r0
 8043d00:	4608      	mov	r0, r1
 8043d02:	4611      	mov	r1, r2
 8043d04:	602b      	str	r3, [r5, #0]
 8043d06:	f7fc fe93 	bl	8040a30 <_fstat>
 8043d0a:	1c43      	adds	r3, r0, #1
 8043d0c:	d102      	bne.n	8043d14 <_fstat_r+0x1c>
 8043d0e:	682b      	ldr	r3, [r5, #0]
 8043d10:	b103      	cbz	r3, 8043d14 <_fstat_r+0x1c>
 8043d12:	6023      	str	r3, [r4, #0]
 8043d14:	bd38      	pop	{r3, r4, r5, pc}
 8043d16:	bf00      	nop
 8043d18:	20000250 	.word	0x20000250

08043d1c <_isatty_r>:
 8043d1c:	b538      	push	{r3, r4, r5, lr}
 8043d1e:	4d06      	ldr	r5, [pc, #24]	@ (8043d38 <_isatty_r+0x1c>)
 8043d20:	2300      	movs	r3, #0
 8043d22:	4604      	mov	r4, r0
 8043d24:	4608      	mov	r0, r1
 8043d26:	602b      	str	r3, [r5, #0]
 8043d28:	f7fc fe92 	bl	8040a50 <_isatty>
 8043d2c:	1c43      	adds	r3, r0, #1
 8043d2e:	d102      	bne.n	8043d36 <_isatty_r+0x1a>
 8043d30:	682b      	ldr	r3, [r5, #0]
 8043d32:	b103      	cbz	r3, 8043d36 <_isatty_r+0x1a>
 8043d34:	6023      	str	r3, [r4, #0]
 8043d36:	bd38      	pop	{r3, r4, r5, pc}
 8043d38:	20000250 	.word	0x20000250

08043d3c <_init>:
 8043d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043d3e:	bf00      	nop
 8043d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043d42:	bc08      	pop	{r3}
 8043d44:	469e      	mov	lr, r3
 8043d46:	4770      	bx	lr

08043d48 <_fini>:
 8043d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043d4a:	bf00      	nop
 8043d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043d4e:	bc08      	pop	{r3}
 8043d50:	469e      	mov	lr, r3
 8043d52:	4770      	bx	lr
