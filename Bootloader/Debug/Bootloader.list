
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004894  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08004a94  08004a94  00005a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce0  08004ce0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004ce0  08004ce0  00005ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce8  08004ce8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce8  08004ce8  00005ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cec  08004cec  00005cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004cf0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000068  08004d58  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  08004d58  0000671c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b116  00000000  00000000  00006096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee8  00000000  00000000  000111ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00013098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f1  00000000  00000000  000139b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fee  00000000  00000000  000140a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5bf  00000000  00000000  0003c08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3483  00000000  00000000  0004864e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bad1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b48  00000000  00000000  0013bb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0013e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08004a7c 	.word	0x08004a7c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08004a7c 	.word	0x08004a7c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 80005da:	481f      	ldr	r0, [pc, #124]	@ (8000658 <etx_ota_download_and_flash+0x88>)
 80005dc:	f003 fbea 	bl	8003db4 <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <etx_ota_download_and_flash+0x8c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 80005e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <etx_ota_download_and_flash+0x90>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <etx_ota_download_and_flash+0x94>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <etx_ota_download_and_flash+0x98>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 80005f8:	f240 4209 	movw	r2, #1033	@ 0x409
 80005fc:	2100      	movs	r1, #0
 80005fe:	481b      	ldr	r0, [pc, #108]	@ (800066c <etx_ota_download_and_flash+0x9c>)
 8000600:	f003 fcb8 	bl	8003f74 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 8000604:	f240 4109 	movw	r1, #1033	@ 0x409
 8000608:	4818      	ldr	r0, [pc, #96]	@ (800066c <etx_ota_download_and_flash+0x9c>)
 800060a:	f000 f905 	bl	8000818 <etx_receive_chunk>
 800060e:	4603      	mov	r3, r0
 8000610:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 8000612:	88bb      	ldrh	r3, [r7, #4]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d007      	beq.n	8000628 <etx_ota_download_and_flash+0x58>
    {
      ret = etx_process_data( Rx_Buffer, len );
 8000618:	88bb      	ldrh	r3, [r7, #4]
 800061a:	4619      	mov	r1, r3
 800061c:	4813      	ldr	r0, [pc, #76]	@ (800066c <etx_ota_download_and_flash+0x9c>)
 800061e:	f000 f829 	bl	8000674 <etx_process_data>
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	e001      	b.n	800062c <etx_ota_download_and_flash+0x5c>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 8000628:	2301      	movs	r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d006      	beq.n	8000640 <etx_ota_download_and_flash+0x70>
    {
      printf("Sending NACK\r\n");
 8000632:	480f      	ldr	r0, [pc, #60]	@ (8000670 <etx_ota_download_and_flash+0xa0>)
 8000634:	f003 fbbe 	bl	8003db4 <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 8000638:	2001      	movs	r0, #1
 800063a:	f000 f9a9 	bl	8000990 <etx_ota_send_resp>
      break;
 800063e:	e006      	b.n	800064e <etx_ota_download_and_flash+0x7e>
    }
    else
    {
      //printf("Sending ACK\r\n");
      etx_ota_send_resp( ETX_OTA_ACK );
 8000640:	2000      	movs	r0, #0
 8000642:	f000 f9a5 	bl	8000990 <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <etx_ota_download_and_flash+0x98>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1d4      	bne.n	80005f8 <etx_ota_download_and_flash+0x28>

  return ret;
 800064e:	79fb      	ldrb	r3, [r7, #7]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	08004a94 	.word	0x08004a94
 800065c:	20000490 	.word	0x20000490
 8000660:	20000498 	.word	0x20000498
 8000664:	20000494 	.word	0x20000494
 8000668:	2000048d 	.word	0x2000048d
 800066c:	20000084 	.word	0x20000084
 8000670:	08004ab4 	.word	0x08004ab4

08000674 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000680:	2301      	movs	r3, #1
 8000682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	f000 80ad 	beq.w	80007e8 <etx_process_data+0x174>
 800068e:	887b      	ldrh	r3, [r7, #2]
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 80a9 	beq.w	80007e8 <etx_process_data+0x174>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	623b      	str	r3, [r7, #32]
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	785b      	ldrb	r3, [r3, #1]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d104      	bne.n	80006ac <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 80006a2:	6a3b      	ldr	r3, [r7, #32]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	f000 8095 	beq.w	80007d6 <etx_process_data+0x162>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 80006ac:	4b51      	ldr	r3, [pc, #324]	@ (80007f4 <etx_process_data+0x180>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b04      	cmp	r3, #4
 80006b2:	f200 808c 	bhi.w	80007ce <etx_process_data+0x15a>
 80006b6:	a201      	add	r2, pc, #4	@ (adr r2, 80006bc <etx_process_data+0x48>)
 80006b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006bc:	080006d1 	.word	0x080006d1
 80006c0:	080006df 	.word	0x080006df
 80006c4:	08000707 	.word	0x08000707
 80006c8:	0800073d 	.word	0x0800073d
 80006cc:	080007a7 	.word	0x080007a7
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 80006d0:	4849      	ldr	r0, [pc, #292]	@ (80007f8 <etx_process_data+0x184>)
 80006d2:	f003 fb6f 	bl	8003db4 <puts>
        ret = ETX_OTA_EX_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80006dc:	e084      	b.n	80007e8 <etx_process_data+0x174>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	60fb      	str	r3, [r7, #12]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d177      	bne.n	80007da <etx_process_data+0x166>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d173      	bne.n	80007da <etx_process_data+0x166>
          {
            printf("Received OTA START Command\r\n");
 80006f2:	4842      	ldr	r0, [pc, #264]	@ (80007fc <etx_process_data+0x188>)
 80006f4:	f003 fb5e 	bl	8003db4 <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 80006f8:	4b3e      	ldr	r3, [pc, #248]	@ (80007f4 <etx_process_data+0x180>)
 80006fa:	2202      	movs	r2, #2
 80006fc:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 80006fe:	2300      	movs	r3, #0
 8000700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 8000704:	e069      	b.n	80007da <etx_process_data+0x166>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	613b      	str	r3, [r7, #16]
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d165      	bne.n	80007de <etx_process_data+0x16a>
        {
          ota_fw_total_size = header->meta_data.package_size;
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	4a3a      	ldr	r2, [pc, #232]	@ (8000800 <etx_process_data+0x18c>)
 8000718:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	4a39      	ldr	r2, [pc, #228]	@ (8000804 <etx_process_data+0x190>)
 8000720:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 8000722:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <etx_process_data+0x18c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4619      	mov	r1, r3
 8000728:	4837      	ldr	r0, [pc, #220]	@ (8000808 <etx_process_data+0x194>)
 800072a:	f003 fadb 	bl	8003ce4 <iprintf>
          ota_state = ETX_OTA_STATE_DATA;
 800072e:	4b31      	ldr	r3, [pc, #196]	@ (80007f4 <etx_process_data+0x180>)
 8000730:	2203      	movs	r2, #3
 8000732:	701a      	strb	r2, [r3, #0]
          ret = ETX_OTA_EX_OK;
 8000734:	2300      	movs	r3, #0
 8000736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
      }
      break;
 800073a:	e050      	b.n	80007de <etx_process_data+0x16a>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	61bb      	str	r3, [r7, #24]
        uint16_t          data_len = data->data_len;
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	789a      	ldrb	r2, [r3, #2]
 8000744:	78db      	ldrb	r3, [r3, #3]
 8000746:	021b      	lsls	r3, r3, #8
 8000748:	4313      	orrs	r3, r2
 800074a:	82fb      	strh	r3, [r7, #22]
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d146      	bne.n	80007e2 <etx_process_data+0x16e>
        {
          /* write the chunk to the Flash (App location) */
          ex = write_data_to_flash_app( buf+4, data_len, ( ota_fw_received_size == 0) );
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	1d18      	adds	r0, r3, #4
 8000758:	4b2c      	ldr	r3, [pc, #176]	@ (800080c <etx_process_data+0x198>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf0c      	ite	eq
 8000760:	2301      	moveq	r3, #1
 8000762:	2300      	movne	r3, #0
 8000764:	b2da      	uxtb	r2, r3
 8000766:	8afb      	ldrh	r3, [r7, #22]
 8000768:	4619      	mov	r1, r3
 800076a:	f000 f937 	bl	80009dc <write_data_to_flash_app>
 800076e:	4603      	mov	r3, r0
 8000770:	757b      	strb	r3, [r7, #21]

          if( ex == HAL_OK )
 8000772:	7d7b      	ldrb	r3, [r7, #21]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d134      	bne.n	80007e2 <etx_process_data+0x16e>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 8000778:	4b24      	ldr	r3, [pc, #144]	@ (800080c <etx_process_data+0x198>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	0a99      	lsrs	r1, r3, #10
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <etx_process_data+0x18c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	0a9b      	lsrs	r3, r3, #10
 8000784:	461a      	mov	r2, r3
 8000786:	4822      	ldr	r0, [pc, #136]	@ (8000810 <etx_process_data+0x19c>)
 8000788:	f003 faac 	bl	8003ce4 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <etx_process_data+0x198>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <etx_process_data+0x18c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	429a      	cmp	r2, r3
 8000796:	d302      	bcc.n	800079e <etx_process_data+0x12a>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 8000798:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <etx_process_data+0x180>)
 800079a:	2204      	movs	r2, #4
 800079c:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 800079e:	2300      	movs	r3, #0
 80007a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 80007a4:	e01d      	b.n	80007e2 <etx_process_data+0x16e>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	61fb      	str	r3, [r7, #28]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	785b      	ldrb	r3, [r3, #1]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d119      	bne.n	80007e6 <etx_process_data+0x172>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d115      	bne.n	80007e6 <etx_process_data+0x172>
          {
            printf("Received OTA END Command\r\n");
 80007ba:	4816      	ldr	r0, [pc, #88]	@ (8000814 <etx_process_data+0x1a0>)
 80007bc:	f003 fafa 	bl	8003db4 <puts>

            //TODO: Very full package CRC

            ota_state = ETX_OTA_STATE_IDLE;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <etx_process_data+0x180>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 80007cc:	e00b      	b.n	80007e6 <etx_process_data+0x172>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80007d4:	e008      	b.n	80007e8 <etx_process_data+0x174>
        break;
 80007d6:	bf00      	nop
 80007d8:	e006      	b.n	80007e8 <etx_process_data+0x174>
      break;
 80007da:	bf00      	nop
 80007dc:	e004      	b.n	80007e8 <etx_process_data+0x174>
      break;
 80007de:	bf00      	nop
 80007e0:	e002      	b.n	80007e8 <etx_process_data+0x174>
      break;
 80007e2:	bf00      	nop
 80007e4:	e000      	b.n	80007e8 <etx_process_data+0x174>
      break;
 80007e6:	bf00      	nop
    };
  }while( false );

  return ret;
 80007e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3728      	adds	r7, #40	@ 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000048d 	.word	0x2000048d
 80007f8:	08004ac4 	.word	0x08004ac4
 80007fc:	08004adc 	.word	0x08004adc
 8000800:	20000490 	.word	0x20000490
 8000804:	20000494 	.word	0x20000494
 8000808:	08004af8 	.word	0x08004af8
 800080c:	20000498 	.word	0x20000498
 8000810:	08004b20 	.word	0x08004b20
 8000814:	08004b2c 	.word	0x08004b2c

08000818 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index     = 0u;
 8000824:	2300      	movs	r3, #0
 8000826:	81bb      	strh	r3, [r7, #12]
  uint16_t data_len;

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 8000828:	89bb      	ldrh	r3, [r7, #12]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	18d1      	adds	r1, r2, r3
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	2201      	movs	r2, #1
 8000834:	4854      	ldr	r0, [pc, #336]	@ (8000988 <etx_receive_chunk+0x170>)
 8000836:	f002 fc4a 	bl	80030ce <HAL_UART_Receive>
 800083a:	4603      	mov	r3, r0
 800083c:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 800083e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d17f      	bne.n	8000946 <etx_receive_chunk+0x12e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 8000846:	89bb      	ldrh	r3, [r7, #12]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	81ba      	strh	r2, [r7, #12]
 800084c:	461a      	mov	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2baa      	cmp	r3, #170	@ 0xaa
 8000856:	d002      	beq.n	800085e <etx_receive_chunk+0x46>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 8000858:	2301      	movs	r3, #1
 800085a:	81fb      	strh	r3, [r7, #14]
      break;
 800085c:	e07c      	b.n	8000958 <etx_receive_chunk+0x140>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 800085e:	89bb      	ldrh	r3, [r7, #12]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	81ba      	strh	r2, [r7, #12]
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	1899      	adds	r1, r3, r2
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	2201      	movs	r2, #1
 8000870:	4845      	ldr	r0, [pc, #276]	@ (8000988 <etx_receive_chunk+0x170>)
 8000872:	f002 fc2c 	bl	80030ce <HAL_UART_Receive>
 8000876:	4603      	mov	r3, r0
 8000878:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 800087a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d163      	bne.n	800094a <etx_receive_chunk+0x132>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart2, &buf[index], 2, HAL_MAX_DELAY );
 8000882:	89bb      	ldrh	r3, [r7, #12]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	18d1      	adds	r1, r2, r3
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	2202      	movs	r2, #2
 800088e:	483e      	ldr	r0, [pc, #248]	@ (8000988 <etx_receive_chunk+0x170>)
 8000890:	f002 fc1d 	bl	80030ce <HAL_UART_Receive>
 8000894:	4603      	mov	r3, r0
 8000896:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000898:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d156      	bne.n	800094e <etx_receive_chunk+0x136>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 80008a0:	89bb      	ldrh	r3, [r7, #12]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	813b      	strh	r3, [r7, #8]
    index += 2u;
 80008aa:	89bb      	ldrh	r3, [r7, #12]
 80008ac:	3302      	adds	r3, #2
 80008ae:	81bb      	strh	r3, [r7, #12]

    for( uint16_t i = 0u; i < data_len; i++ )
 80008b0:	2300      	movs	r3, #0
 80008b2:	817b      	strh	r3, [r7, #10]
 80008b4:	e014      	b.n	80008e0 <etx_receive_chunk+0xc8>
    {
      ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 80008b6:	89bb      	ldrh	r3, [r7, #12]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	81ba      	strh	r2, [r7, #12]
 80008bc:	461a      	mov	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	1899      	adds	r1, r3, r2
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	2201      	movs	r2, #1
 80008c8:	482f      	ldr	r0, [pc, #188]	@ (8000988 <etx_receive_chunk+0x170>)
 80008ca:	f002 fc00 	bl	80030ce <HAL_UART_Receive>
 80008ce:	4603      	mov	r3, r0
 80008d0:	81fb      	strh	r3, [r7, #14]
      if( ret != HAL_OK )
 80008d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d107      	bne.n	80008ea <etx_receive_chunk+0xd2>
    for( uint16_t i = 0u; i < data_len; i++ )
 80008da:	897b      	ldrh	r3, [r7, #10]
 80008dc:	3301      	adds	r3, #1
 80008de:	817b      	strh	r3, [r7, #10]
 80008e0:	897a      	ldrh	r2, [r7, #10]
 80008e2:	893b      	ldrh	r3, [r7, #8]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d3e6      	bcc.n	80008b6 <etx_receive_chunk+0x9e>
 80008e8:	e000      	b.n	80008ec <etx_receive_chunk+0xd4>
      {
        break;
 80008ea:	bf00      	nop
      }
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart2, &buf[index], 4, HAL_MAX_DELAY );
 80008ec:	89bb      	ldrh	r3, [r7, #12]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	18d1      	adds	r1, r2, r3
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	2204      	movs	r2, #4
 80008f8:	4823      	ldr	r0, [pc, #140]	@ (8000988 <etx_receive_chunk+0x170>)
 80008fa:	f002 fbe8 	bl	80030ce <HAL_UART_Receive>
 80008fe:	4603      	mov	r3, r0
 8000900:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d123      	bne.n	8000952 <etx_receive_chunk+0x13a>
    {
      break;
    }
    index += 4u;
 800090a:	89bb      	ldrh	r3, [r7, #12]
 800090c:	3304      	adds	r3, #4
 800090e:	81bb      	strh	r3, [r7, #12]

    //TODO: Add CRC verification

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 8000910:	89bb      	ldrh	r3, [r7, #12]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	18d1      	adds	r1, r2, r3
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	2201      	movs	r2, #1
 800091c:	481a      	ldr	r0, [pc, #104]	@ (8000988 <etx_receive_chunk+0x170>)
 800091e:	f002 fbd6 	bl	80030ce <HAL_UART_Receive>
 8000922:	4603      	mov	r3, r0
 8000924:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d113      	bne.n	8000956 <etx_receive_chunk+0x13e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 800092e:	89bb      	ldrh	r3, [r7, #12]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	81ba      	strh	r2, [r7, #12]
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2bbb      	cmp	r3, #187	@ 0xbb
 800093e:	d00b      	beq.n	8000958 <etx_receive_chunk+0x140>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 8000940:	2301      	movs	r3, #1
 8000942:	81fb      	strh	r3, [r7, #14]
      break;
 8000944:	e008      	b.n	8000958 <etx_receive_chunk+0x140>
      break;
 8000946:	bf00      	nop
 8000948:	e006      	b.n	8000958 <etx_receive_chunk+0x140>
      break;
 800094a:	bf00      	nop
 800094c:	e004      	b.n	8000958 <etx_receive_chunk+0x140>
      break;
 800094e:	bf00      	nop
 8000950:	e002      	b.n	8000958 <etx_receive_chunk+0x140>
      break;
 8000952:	bf00      	nop
 8000954:	e000      	b.n	8000958 <etx_receive_chunk+0x140>
      break;
 8000956:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 8000958:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <etx_receive_chunk+0x14c>
  {
    //clear the index if error
    index = 0u;
 8000960:	2300      	movs	r3, #0
 8000962:	81bb      	strh	r3, [r7, #12]
  }

  if( max_len < index )
 8000964:	887a      	ldrh	r2, [r7, #2]
 8000966:	89bb      	ldrh	r3, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d207      	bcs.n	800097c <etx_receive_chunk+0x164>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	89ba      	ldrh	r2, [r7, #12]
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	@ (800098c <etx_receive_chunk+0x174>)
 8000974:	f003 f9b6 	bl	8003ce4 <iprintf>
                                                              max_len, index );
    index = 0u;
 8000978:	2300      	movs	r3, #0
 800097a:	81bb      	strh	r3, [r7, #12]
  }

  return index;
 800097c:	89bb      	ldrh	r3, [r7, #12]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000049c 	.word	0x2000049c
 800098c:	08004b48 	.word	0x08004b48

08000990 <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 800099a:	23aa      	movs	r3, #170	@ 0xaa
 800099c:	733b      	strb	r3, [r7, #12]
 800099e:	2303      	movs	r3, #3
 80009a0:	737b      	strb	r3, [r7, #13]
 80009a2:	2301      	movs	r3, #1
 80009a4:	81fb      	strh	r3, [r7, #14]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	743b      	strb	r3, [r7, #16]
 80009aa:	2300      	movs	r3, #0
 80009ac:	747b      	strb	r3, [r7, #17]
 80009ae:	2300      	movs	r3, #0
 80009b0:	74bb      	strb	r3, [r7, #18]
 80009b2:	2300      	movs	r3, #0
 80009b4:	74fb      	strb	r3, [r7, #19]
 80009b6:	2300      	movs	r3, #0
 80009b8:	753b      	strb	r3, [r7, #20]
 80009ba:	23bb      	movs	r3, #187	@ 0xbb
 80009bc:	757b      	strb	r3, [r7, #21]
    .crc         = 0u,                //TODO: Add CRC
    .eof         = ETX_OTA_EOF
  };

  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 80009be:	f107 010c 	add.w	r1, r7, #12
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	220a      	movs	r2, #10
 80009c8:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <etx_ota_send_resp+0x48>)
 80009ca:	f002 faf7 	bl	8002fbc <HAL_UART_Transmit>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000049c 	.word	0x2000049c

080009dc <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
 80009e8:	4613      	mov	r3, r2
 80009ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 80009ec:	f000 fd9e 	bl	800152c <HAL_FLASH_Unlock>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 80009f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d155      	bne.n	8000aaa <write_data_to_flash_app+0xce>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 80009fe:	787b      	ldrb	r3, [r7, #1]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d019      	beq.n	8000a38 <write_data_to_flash_app+0x5c>
    {

      printf("Erasing the Flash memory...\r\n");
 8000a04:	482e      	ldr	r0, [pc, #184]	@ (8000ac0 <write_data_to_flash_app+0xe4>)
 8000a06:	f003 f9d5 	bl	8003db4 <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.Sector        = FLASH_SECTOR_5;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 8000a12:	2302      	movs	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61fb      	str	r3, [r7, #28]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000a1a:	f107 0208 	add.w	r2, r7, #8
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fee3 	bl	80017f0 <HAL_FLASHEx_Erase>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 8000a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d13a      	bne.n	8000aae <write_data_to_flash_app+0xd2>
      {
        break;
      }
    }

    for(int i = 0; i < data_len; i++ )
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
 8000a3c:	e024      	b.n	8000a88 <write_data_to_flash_app+0xac>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <write_data_to_flash_app+0xe8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4921      	ldr	r1, [pc, #132]	@ (8000ac8 <write_data_to_flash_app+0xec>)
 8000a44:	4419      	add	r1, r3
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
                               data[i]
 8000a46:	6a3b      	ldr	r3, [r7, #32]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2200      	movs	r2, #0
 8000a52:	461c      	mov	r4, r3
 8000a54:	4615      	mov	r5, r2
 8000a56:	4622      	mov	r2, r4
 8000a58:	462b      	mov	r3, r5
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 fd0a 	bl	8001474 <HAL_FLASH_Program>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                             );
      if( ret == HAL_OK )
 8000a66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d105      	bne.n	8000a7a <write_data_to_flash_app+0x9e>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <write_data_to_flash_app+0xe8>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	4a13      	ldr	r2, [pc, #76]	@ (8000ac4 <write_data_to_flash_app+0xe8>)
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	e003      	b.n	8000a82 <write_data_to_flash_app+0xa6>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000a7a:	4814      	ldr	r0, [pc, #80]	@ (8000acc <write_data_to_flash_app+0xf0>)
 8000a7c:	f003 f99a 	bl	8003db4 <puts>
        break;
 8000a80:	e006      	b.n	8000a90 <write_data_to_flash_app+0xb4>
    for(int i = 0; i < data_len; i++ )
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	3301      	adds	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	6a3a      	ldr	r2, [r7, #32]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbd6      	blt.n	8000a3e <write_data_to_flash_app+0x62>
      }
    }

    if( ret != HAL_OK )
 8000a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d10c      	bne.n	8000ab2 <write_data_to_flash_app+0xd6>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000a98:	f000 fd6a 	bl	8001570 <HAL_FLASH_Lock>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 8000aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	e004      	b.n	8000ab4 <write_data_to_flash_app+0xd8>
      break;
 8000aaa:	bf00      	nop
 8000aac:	e002      	b.n	8000ab4 <write_data_to_flash_app+0xd8>
        break;
 8000aae:	bf00      	nop
 8000ab0:	e000      	b.n	8000ab4 <write_data_to_flash_app+0xd8>
      break;
 8000ab2:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3728      	adds	r7, #40	@ 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac0:	08004b8c 	.word	0x08004b8c
 8000ac4:	20000498 	.word	0x20000498
 8000ac8:	08040000 	.word	0x08040000
 8000acc:	08004bac 	.word	0x08004bac

08000ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad6:	f000 fb70 	bl	80011ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f000 f853 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ade:	f000 f90d 	bl	8000cfc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ae2:	f000 f8db 	bl	8000c9c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000ae6:	f000 f8a9 	bl	8000c3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
printf("Starting Bootloader %d.%d\n", FBL_Version[0],FBL_Version[1]);
 8000aea:	2300      	movs	r3, #0
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	481d      	ldr	r0, [pc, #116]	@ (8000b68 <main+0x98>)
 8000af2:	f003 f8f7 	bl	8003ce4 <iprintf>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2101      	movs	r1, #1
 8000afa:	481c      	ldr	r0, [pc, #112]	@ (8000b6c <main+0x9c>)
 8000afc:	f001 f93a 	bl	8001d74 <HAL_GPIO_WritePin>
//HAL_Delay(2000);
GPIO_PinState OTA_Pin_state;
uint32_t end_tick=HAL_GetTick()+3000;
 8000b00:	f000 fbac 	bl	800125c <HAL_GetTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8000b0a:	60fb      	str	r3, [r7, #12]

printf("Press the User Button PC13 to trigger OTA update...\r\n");
 8000b0c:	4818      	ldr	r0, [pc, #96]	@ (8000b70 <main+0xa0>)
 8000b0e:	f003 f951 	bl	8003db4 <puts>
do
{
  OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8000b12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b16:	4817      	ldr	r0, [pc, #92]	@ (8000b74 <main+0xa4>)
 8000b18:	f001 f914 	bl	8001d44 <HAL_GPIO_ReadPin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	72fb      	strb	r3, [r7, #11]
  uint32_t current_tick = HAL_GetTick();
 8000b20:	f000 fb9c 	bl	800125c <HAL_GetTick>
 8000b24:	6078      	str	r0, [r7, #4]

  /* Check the button is pressed or not for 3seconds */
  if( ( OTA_Pin_state != GPIO_PIN_RESET ) || ( current_tick > end_tick ) )
 8000b26:	7afb      	ldrb	r3, [r7, #11]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <main+0x66>
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d800      	bhi.n	8000b36 <main+0x66>
{
 8000b34:	e7ed      	b.n	8000b12 <main+0x42>
    break;
  }
}while( 1 );

/*Start the Firmware or Application update */
if( OTA_Pin_state == GPIO_PIN_SET )
 8000b36:	7afb      	ldrb	r3, [r7, #11]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d111      	bne.n	8000b60 <main+0x90>
{
  printf("Starting Firmware Download!!!\r\n");
 8000b3c:	480e      	ldr	r0, [pc, #56]	@ (8000b78 <main+0xa8>)
 8000b3e:	f003 f939 	bl	8003db4 <puts>
  /* OTA Request. Receive the data from the UART4 and flash */
  if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8000b42:	f7ff fd45 	bl	80005d0 <etx_ota_download_and_flash>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <main+0x86>
  {
    /* Error. Don't process. */
    printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000b4c:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <main+0xac>)
 8000b4e:	f003 f931 	bl	8003db4 <puts>
    while( 1 );
 8000b52:	bf00      	nop
 8000b54:	e7fd      	b.n	8000b52 <main+0x82>
  }
  else
  {
    /* Reset to load the new application */
    printf("Firmware update is done!!! Rebooting...\r\n");
 8000b56:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <main+0xb0>)
 8000b58:	f003 f92c 	bl	8003db4 <puts>
    HAL_NVIC_SystemReset();
 8000b5c:	f000 fc79 	bl	8001452 <HAL_NVIC_SystemReset>
  }
}

// Jump to application
goto_application();
 8000b60:	f000 f938 	bl	8000dd4 <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <main+0x94>
 8000b68:	08004bc0 	.word	0x08004bc0
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	08004bdc 	.word	0x08004bdc
 8000b74:	40020800 	.word	0x40020800
 8000b78:	08004c14 	.word	0x08004c14
 8000b7c:	08004c34 	.word	0x08004c34
 8000b80:	08004c54 	.word	0x08004c54

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	@ 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	2234      	movs	r2, #52	@ 0x34
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 f9ee 	bl	8003f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba8:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <SystemClock_Config+0xb0>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <SystemClock_Config+0xb0>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <SystemClock_Config+0xb0>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <SystemClock_Config+0xb4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c38 <SystemClock_Config+0xb4>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <SystemClock_Config+0xb4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be4:	2310      	movs	r3, #16
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 f8d9 	bl	8001da8 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000bfc:	f000 f904 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fb72 	bl	8002304 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c26:	f000 f8ef 	bl	8000e08 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3750      	adds	r7, #80	@ 0x50
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000

08000c3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c42:	4a15      	ldr	r2, [pc, #84]	@ (8000c98 <MX_USART2_UART_Init+0x5c>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c80:	f002 f94e 	bl	8002f20 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c8a:	f000 f8bd 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000049c 	.word	0x2000049c
 8000c98:	40004400 	.word	0x40004400

08000c9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	@ (8000cf8 <MX_USART3_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ce0:	f002 f91e 	bl	8002f20 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cea:	f000 f88d 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000524 	.word	0x20000524
 8000cf8:	40004800 	.word	0x40004800

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <MX_GPIO_Init+0xa8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a23      	ldr	r2, [pc, #140]	@ (8000da4 <MX_GPIO_Init+0xa8>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <MX_GPIO_Init+0xa8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <MX_GPIO_Init+0xa8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000da4 <MX_GPIO_Init+0xa8>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <MX_GPIO_Init+0xa8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <MX_GPIO_Init+0xa8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a17      	ldr	r2, [pc, #92]	@ (8000da4 <MX_GPIO_Init+0xa8>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <MX_GPIO_Init+0xa8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4812      	ldr	r0, [pc, #72]	@ (8000da8 <MX_GPIO_Init+0xac>)
 8000d60:	f001 f808 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4619      	mov	r1, r3
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_GPIO_Init+0xb0>)
 8000d7a:	f000 fe37 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4619      	mov	r1, r3
 8000d94:	4804      	ldr	r0, [pc, #16]	@ (8000da8 <MX_GPIO_Init+0xac>)
 8000d96:	f000 fe29 	bl	80019ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020800 	.word	0x40020800

08000db0 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1,HAL_MAX_DELAY);
 8000db8:	1d39      	adds	r1, r7, #4
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4803      	ldr	r0, [pc, #12]	@ (8000dd0 <__io_putchar+0x20>)
 8000dc2:	f002 f8fb 	bl	8002fbc <HAL_UART_Transmit>
	return ch;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000524 	.word	0x20000524

08000dd4 <goto_application>:

static void goto_application(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
	printf("Jump to application\n");
 8000dda:	4808      	ldr	r0, [pc, #32]	@ (8000dfc <goto_application+0x28>)
 8000ddc:	f002 ffea 	bl	8003db4 <puts>
	void(*app_reset_handler)(void)= (void*) (*(volatile uint32_t *)(0x08040000+4));
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <goto_application+0x2c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2101      	movs	r1, #1
 8000dea:	4806      	ldr	r0, [pc, #24]	@ (8000e04 <goto_application+0x30>)
 8000dec:	f000 ffc2 	bl	8001d74 <HAL_GPIO_WritePin>
	app_reset_handler();
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4798      	blx	r3
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	08004c80 	.word	0x08004c80
 8000e00:	08040004 	.word	0x08040004
 8000e04:	40020400 	.word	0x40020400

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <Error_Handler+0x8>

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0b0      	sub	sp, #192	@ 0xc0
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	2290      	movs	r2, #144	@ 0x90
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 f879 	bl	8003f74 <memset>
  if(huart->Instance==USART2)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a42      	ldr	r2, [pc, #264]	@ (8000f90 <HAL_UART_MspInit+0x134>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d13b      	bne.n	8000f04 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 fc19 	bl	80026d0 <HAL_RCCEx_PeriphCLKConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea4:	f7ff ffb0 	bl	8000e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	4a39      	ldr	r2, [pc, #228]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb4:	4b37      	ldr	r3, [pc, #220]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec0:	4b34      	ldr	r3, [pc, #208]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec4:	4a33      	ldr	r2, [pc, #204]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ecc:	4b31      	ldr	r3, [pc, #196]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ed8:	2360      	movs	r3, #96	@ 0x60
 8000eda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000efa:	4619      	mov	r1, r3
 8000efc:	4826      	ldr	r0, [pc, #152]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000efe:	f000 fd75 	bl	80019ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f02:	e041      	b.n	8000f88 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a24      	ldr	r2, [pc, #144]	@ (8000f9c <HAL_UART_MspInit+0x140>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d13c      	bne.n	8000f88 <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f12:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fbd7 	bl	80026d0 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000f28:	f7ff ff6e 	bl	8000e08 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f44:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f50:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f76:	2307      	movs	r3, #7
 8000f78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f80:	4619      	mov	r1, r3
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000f84:	f000 fd32 	bl	80019ec <HAL_GPIO_Init>
}
 8000f88:	bf00      	nop
 8000f8a:	37c0      	adds	r7, #192	@ 0xc0
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40004400 	.word	0x40004400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40004800 	.word	0x40004800

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff6:	f000 f91d 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e00a      	b.n	8001026 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001010:	f3af 8000 	nop.w
 8001014:	4601      	mov	r1, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	60ba      	str	r2, [r7, #8]
 800101c:	b2ca      	uxtb	r2, r1
 800101e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	dbf0      	blt.n	8001010 <_read+0x12>
  }

  return len;
 800102e:	687b      	ldr	r3, [r7, #4]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e009      	b.n	800105e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	60ba      	str	r2, [r7, #8]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff feac 	bl	8000db0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	dbf1      	blt.n	800104a <_write+0x12>
  }
  return len;
 8001066:	687b      	ldr	r3, [r7, #4]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_close>:

int _close(int file)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001098:	605a      	str	r2, [r3, #4]
  return 0;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_isatty>:

int _isatty(int file)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	@ (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f002 ff82 	bl	8004010 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20080000 	.word	0x20080000
 8001138:	00000400 	.word	0x00000400
 800113c:	200005ac 	.word	0x200005ac
 8001140:	20000720 	.word	0x20000720

08001144 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <SystemInit+0x20>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <SystemInit+0x20>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800116c:	f7ff ffea 	bl	8001144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001172:	490d      	ldr	r1, [pc, #52]	@ (80011a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001188:	4c0a      	ldr	r4, [pc, #40]	@ (80011b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001196:	f002 ff41 	bl	800401c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f7ff fc99 	bl	8000ad0 <main>
  bx  lr    
 800119e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011ac:	08004cf0 	.word	0x08004cf0
  ldr r2, =_sbss
 80011b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011b4:	2000071c 	.word	0x2000071c

080011b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>

080011ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011be:	2003      	movs	r0, #3
 80011c0:	f000 f920 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c4:	200f      	movs	r0, #15
 80011c6:	f000 f805 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ca:	f7ff fe23 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f931 	bl	800145a <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f903 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	@ (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000000 	.word	0x20000000
 800122c:	20000008 	.word	0x20000008
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008
 8001258:	200005b0 	.word	0x200005b0

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	200005b0 	.word	0x200005b0

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x40>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00
 80012b8:	05fa0000 	.word	0x05fa0000

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	@ (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	@ (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	@ 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001398:	f3bf 8f4f 	dsb	sy
}
 800139c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <__NVIC_SystemReset+0x24>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013a6:	4904      	ldr	r1, [pc, #16]	@ (80013b8 <__NVIC_SystemReset+0x24>)
 80013a8:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <__NVIC_SystemReset+0x28>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013ae:	f3bf 8f4f 	dsb	sy
}
 80013b2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <__NVIC_SystemReset+0x20>
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	05fa0004 	.word	0x05fa0004

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff78 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff31 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff46 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff78 	bl	800132c <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff47 	bl	80012d8 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001456:	f7ff ff9d 	bl	8001394 <__NVIC_SystemReset>

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffac 	bl	80013c0 <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001486:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <HAL_FLASH_Program+0xb0>)
 8001488:	7d1b      	ldrb	r3, [r3, #20]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_FLASH_Program+0x1e>
 800148e:	2302      	movs	r3, #2
 8001490:	e043      	b.n	800151a <HAL_FLASH_Program+0xa6>
 8001492:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <HAL_FLASH_Program+0xb0>)
 8001494:	2201      	movs	r2, #1
 8001496:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001498:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800149c:	f000 f878 	bl	8001590 <FLASH_WaitForLastOperation>
 80014a0:	4603      	mov	r3, r0
 80014a2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d133      	bne.n	8001512 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d823      	bhi.n	80014f8 <HAL_FLASH_Program+0x84>
 80014b0:	a201      	add	r2, pc, #4	@ (adr r2, 80014b8 <HAL_FLASH_Program+0x44>)
 80014b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b6:	bf00      	nop
 80014b8:	080014c9 	.word	0x080014c9
 80014bc:	080014d5 	.word	0x080014d5
 80014c0:	080014e1 	.word	0x080014e1
 80014c4:	080014ed 	.word	0x080014ed
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80014c8:	783b      	ldrb	r3, [r7, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	68b8      	ldr	r0, [r7, #8]
 80014ce:	f000 f921 	bl	8001714 <FLASH_Program_Byte>
        break;
 80014d2:	e012      	b.n	80014fa <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80014d4:	883b      	ldrh	r3, [r7, #0]
 80014d6:	4619      	mov	r1, r3
 80014d8:	68b8      	ldr	r0, [r7, #8]
 80014da:	f000 f8f5 	bl	80016c8 <FLASH_Program_HalfWord>
        break;
 80014de:	e00c      	b.n	80014fa <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	f000 f8c9 	bl	800167c <FLASH_Program_Word>
        break;
 80014ea:	e006      	b.n	80014fa <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80014ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014f0:	68b8      	ldr	r0, [r7, #8]
 80014f2:	f000 f88d 	bl	8001610 <FLASH_Program_DoubleWord>
        break;
 80014f6:	e000      	b.n	80014fa <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80014f8:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014fa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014fe:	f000 f847 	bl	8001590 <FLASH_WaitForLastOperation>
 8001502:	4603      	mov	r3, r0
 8001504:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_FLASH_Program+0xb4>)
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <HAL_FLASH_Program+0xb4>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001512:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <HAL_FLASH_Program+0xb0>)
 8001514:	2200      	movs	r2, #0
 8001516:	751a      	strb	r2, [r3, #20]

  return status;
 8001518:	7dfb      	ldrb	r3, [r7, #23]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200005b4 	.word	0x200005b4
 8001528:	40023c00 	.word	0x40023c00

0800152c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HAL_FLASH_Unlock+0x38>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	da0b      	bge.n	8001556 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <HAL_FLASH_Unlock+0x38>)
 8001540:	4a09      	ldr	r2, [pc, #36]	@ (8001568 <HAL_FLASH_Unlock+0x3c>)
 8001542:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001544:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <HAL_FLASH_Unlock+0x38>)
 8001546:	4a09      	ldr	r2, [pc, #36]	@ (800156c <HAL_FLASH_Unlock+0x40>)
 8001548:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_FLASH_Unlock+0x38>)
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b00      	cmp	r3, #0
 8001550:	da01      	bge.n	8001556 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001556:	79fb      	ldrb	r3, [r7, #7]
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40023c00 	.word	0x40023c00
 8001568:	45670123 	.word	0x45670123
 800156c:	cdef89ab 	.word	0xcdef89ab

08001570 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_FLASH_Lock+0x1c>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	4a04      	ldr	r2, [pc, #16]	@ (800158c <HAL_FLASH_Lock+0x1c>)
 800157a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800157e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40023c00 	.word	0x40023c00

08001590 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <FLASH_WaitForLastOperation+0x78>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80015a2:	f7ff fe5b 	bl	800125c <HAL_GetTick>
 80015a6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80015a8:	e010      	b.n	80015cc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d00c      	beq.n	80015cc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d007      	beq.n	80015c8 <FLASH_WaitForLastOperation+0x38>
 80015b8:	f7ff fe50 	bl	800125c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d201      	bcs.n	80015cc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e019      	b.n	8001600 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <FLASH_WaitForLastOperation+0x7c>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1e8      	bne.n	80015aa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <FLASH_WaitForLastOperation+0x7c>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80015e4:	f000 f8ba 	bl	800175c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e009      	b.n	8001600 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <FLASH_WaitForLastOperation+0x7c>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015f8:	4b04      	ldr	r3, [pc, #16]	@ (800160c <FLASH_WaitForLastOperation+0x7c>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
  
}  
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200005b4 	.word	0x200005b4
 800160c:	40023c00 	.word	0x40023c00

08001610 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <FLASH_Program_DoubleWord+0x68>)
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4a15      	ldr	r2, [pc, #84]	@ (8001678 <FLASH_Program_DoubleWord+0x68>)
 8001622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001626:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <FLASH_Program_DoubleWord+0x68>)
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <FLASH_Program_DoubleWord+0x68>)
 800162e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001632:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001634:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <FLASH_Program_DoubleWord+0x68>)
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	4a0f      	ldr	r2, [pc, #60]	@ (8001678 <FLASH_Program_DoubleWord+0x68>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001646:	f3bf 8f6f 	isb	sy
}
 800164a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800164c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	000a      	movs	r2, r1
 800165a:	2300      	movs	r3, #0
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	3104      	adds	r1, #4
 8001660:	4613      	mov	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001664:	f3bf 8f4f 	dsb	sy
}
 8001668:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <FLASH_Program_Word+0x48>)
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	4a0e      	ldr	r2, [pc, #56]	@ (80016c4 <FLASH_Program_Word+0x48>)
 800168c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001690:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <FLASH_Program_Word+0x48>)
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	4a0b      	ldr	r2, [pc, #44]	@ (80016c4 <FLASH_Program_Word+0x48>)
 8001698:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800169c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <FLASH_Program_Word+0x48>)
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <FLASH_Program_Word+0x48>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016b0:	f3bf 8f4f 	dsb	sy
}
 80016b4:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023c00 	.word	0x40023c00

080016c8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80016d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <FLASH_Program_HalfWord+0x48>)
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <FLASH_Program_HalfWord+0x48>)
 80016da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <FLASH_Program_HalfWord+0x48>)
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <FLASH_Program_HalfWord+0x48>)
 80016e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <FLASH_Program_HalfWord+0x48>)
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <FLASH_Program_HalfWord+0x48>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016fe:	f3bf 8f4f 	dsb	sy
}
 8001702:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40023c00 	.word	0x40023c00

08001714 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <FLASH_Program_Byte+0x44>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a0c      	ldr	r2, [pc, #48]	@ (8001758 <FLASH_Program_Byte+0x44>)
 8001726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800172a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <FLASH_Program_Byte+0x44>)
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <FLASH_Program_Byte+0x44>)
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <FLASH_Program_Byte+0x44>)
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <FLASH_Program_Byte+0x44>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001746:	f3bf 8f4f 	dsb	sy
}
 800174a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	40023c00 	.word	0x40023c00

0800175c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001760:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <FLASH_SetErrorCode+0x8c>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800176c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <FLASH_SetErrorCode+0x90>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f043 0320 	orr.w	r3, r3, #32
 8001774:	4a1d      	ldr	r2, [pc, #116]	@ (80017ec <FLASH_SetErrorCode+0x90>)
 8001776:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001778:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <FLASH_SetErrorCode+0x8c>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <FLASH_SetErrorCode+0x90>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f043 0310 	orr.w	r3, r3, #16
 800178c:	4a17      	ldr	r2, [pc, #92]	@ (80017ec <FLASH_SetErrorCode+0x90>)
 800178e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001790:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <FLASH_SetErrorCode+0x8c>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <FLASH_SetErrorCode+0x90>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	4a11      	ldr	r2, [pc, #68]	@ (80017ec <FLASH_SetErrorCode+0x90>)
 80017a6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80017a8:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <FLASH_SetErrorCode+0x8c>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <FLASH_SetErrorCode+0x90>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	4a0b      	ldr	r2, [pc, #44]	@ (80017ec <FLASH_SetErrorCode+0x90>)
 80017be:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <FLASH_SetErrorCode+0x8c>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <FLASH_SetErrorCode+0x90>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <FLASH_SetErrorCode+0x90>)
 80017d6:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80017d8:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <FLASH_SetErrorCode+0x8c>)
 80017da:	22f2      	movs	r2, #242	@ 0xf2
 80017dc:	60da      	str	r2, [r3, #12]
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40023c00 	.word	0x40023c00
 80017ec:	200005b4 	.word	0x200005b4

080017f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001802:	4b30      	ldr	r3, [pc, #192]	@ (80018c4 <HAL_FLASHEx_Erase+0xd4>)
 8001804:	7d1b      	ldrb	r3, [r3, #20]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_FLASHEx_Erase+0x1e>
 800180a:	2302      	movs	r3, #2
 800180c:	e056      	b.n	80018bc <HAL_FLASHEx_Erase+0xcc>
 800180e:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <HAL_FLASHEx_Erase+0xd4>)
 8001810:	2201      	movs	r2, #1
 8001812:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001814:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001818:	f7ff feba 	bl	8001590 <FLASH_WaitForLastOperation>
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d146      	bne.n	80018b4 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d115      	bne.n	8001862 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f000 f844 	bl	80018d0 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001848:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800184c:	f7ff fea0 	bl	8001590 <FLASH_WaitForLastOperation>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001854:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <HAL_FLASHEx_Erase+0xd8>)
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	491b      	ldr	r1, [pc, #108]	@ (80018c8 <HAL_FLASHEx_Erase+0xd8>)
 800185a:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <HAL_FLASHEx_Erase+0xdc>)
 800185c:	4013      	ands	r3, r2
 800185e:	610b      	str	r3, [r1, #16]
 8001860:	e028      	b.n	80018b4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	e01c      	b.n	80018a4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4619      	mov	r1, r3
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f000 f868 	bl	8001948 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001878:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800187c:	f7ff fe88 	bl	8001590 <FLASH_WaitForLastOperation>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8001884:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <HAL_FLASHEx_Erase+0xd8>)
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	4a0f      	ldr	r2, [pc, #60]	@ (80018c8 <HAL_FLASHEx_Erase+0xd8>)
 800188a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800188e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	601a      	str	r2, [r3, #0]
          break;
 800189c:	e00a      	b.n	80018b4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4413      	add	r3, r2
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3da      	bcc.n	800186a <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_FLASHEx_Erase+0xd4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	751a      	strb	r2, [r3, #20]

  return status;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200005b4 	.word	0x200005b4
 80018c8:	40023c00 	.word	0x40023c00
 80018cc:	ffff7ffb 	.word	0xffff7ffb

080018d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <FLASH_MassErase+0x74>)
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	4a18      	ldr	r2, [pc, #96]	@ (8001944 <FLASH_MassErase+0x74>)
 80018e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018e6:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d107      	bne.n	80018fe <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <FLASH_MassErase+0x74>)
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	4914      	ldr	r1, [pc, #80]	@ (8001944 <FLASH_MassErase+0x74>)
 80018f4:	f248 0304 	movw	r3, #32772	@ 0x8004
 80018f8:	4313      	orrs	r3, r2
 80018fa:	610b      	str	r3, [r1, #16]
 80018fc:	e00f      	b.n	800191e <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d106      	bne.n	8001912 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <FLASH_MassErase+0x74>)
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	4a0e      	ldr	r2, [pc, #56]	@ (8001944 <FLASH_MassErase+0x74>)
 800190a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800190e:	6113      	str	r3, [r2, #16]
 8001910:	e005      	b.n	800191e <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8001912:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <FLASH_MassErase+0x74>)
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	4a0b      	ldr	r2, [pc, #44]	@ (8001944 <FLASH_MassErase+0x74>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <FLASH_MassErase+0x74>)
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	4313      	orrs	r3, r2
 8001928:	4a06      	ldr	r2, [pc, #24]	@ (8001944 <FLASH_MassErase+0x74>)
 800192a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8001930:	f3bf 8f4f 	dsb	sy
}
 8001934:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00

08001948 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	e010      	b.n	8001986 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d103      	bne.n	8001972 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800196a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e009      	b.n	8001986 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d103      	bne.n	8001980 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001978:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e002      	b.n	8001986 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001980:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001984:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0b      	cmp	r3, #11
 800198a:	d902      	bls.n	8001992 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3304      	adds	r3, #4
 8001990:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <FLASH_Erase_Sector+0xa0>)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <FLASH_Erase_Sector+0xa0>)
 8001998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800199c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800199e:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <FLASH_Erase_Sector+0xa0>)
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	4911      	ldr	r1, [pc, #68]	@ (80019e8 <FLASH_Erase_Sector+0xa0>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <FLASH_Erase_Sector+0xa0>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	4a0e      	ldr	r2, [pc, #56]	@ (80019e8 <FLASH_Erase_Sector+0xa0>)
 80019b0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80019b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <FLASH_Erase_Sector+0xa0>)
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4313      	orrs	r3, r2
 80019c0:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <FLASH_Erase_Sector+0xa0>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80019c8:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <FLASH_Erase_Sector+0xa0>)
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	4a06      	ldr	r2, [pc, #24]	@ (80019e8 <FLASH_Erase_Sector+0xa0>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d4:	f3bf 8f4f 	dsb	sy
}
 80019d8:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023c00 	.word	0x40023c00

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	@ 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	e175      	b.n	8001cf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f040 8164 	bne.w	8001cf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d005      	beq.n	8001a42 <HAL_GPIO_Init+0x56>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d130      	bne.n	8001aa4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 0201 	and.w	r2, r3, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d017      	beq.n	8001ae0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d123      	bne.n	8001b34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	08da      	lsrs	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3208      	adds	r2, #8
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	08da      	lsrs	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3208      	adds	r2, #8
 8001b2e:	69b9      	ldr	r1, [r7, #24]
 8001b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0203 	and.w	r2, r3, #3
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80be 	beq.w	8001cf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <HAL_GPIO_Init+0x324>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	4a65      	ldr	r2, [pc, #404]	@ (8001d10 <HAL_GPIO_Init+0x324>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b82:	4b63      	ldr	r3, [pc, #396]	@ (8001d10 <HAL_GPIO_Init+0x324>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b8e:	4a61      	ldr	r2, [pc, #388]	@ (8001d14 <HAL_GPIO_Init+0x328>)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a58      	ldr	r2, [pc, #352]	@ (8001d18 <HAL_GPIO_Init+0x32c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d037      	beq.n	8001c2a <HAL_GPIO_Init+0x23e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a57      	ldr	r2, [pc, #348]	@ (8001d1c <HAL_GPIO_Init+0x330>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d031      	beq.n	8001c26 <HAL_GPIO_Init+0x23a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a56      	ldr	r2, [pc, #344]	@ (8001d20 <HAL_GPIO_Init+0x334>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d02b      	beq.n	8001c22 <HAL_GPIO_Init+0x236>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a55      	ldr	r2, [pc, #340]	@ (8001d24 <HAL_GPIO_Init+0x338>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d025      	beq.n	8001c1e <HAL_GPIO_Init+0x232>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a54      	ldr	r2, [pc, #336]	@ (8001d28 <HAL_GPIO_Init+0x33c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01f      	beq.n	8001c1a <HAL_GPIO_Init+0x22e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a53      	ldr	r2, [pc, #332]	@ (8001d2c <HAL_GPIO_Init+0x340>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d019      	beq.n	8001c16 <HAL_GPIO_Init+0x22a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a52      	ldr	r2, [pc, #328]	@ (8001d30 <HAL_GPIO_Init+0x344>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0x226>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a51      	ldr	r2, [pc, #324]	@ (8001d34 <HAL_GPIO_Init+0x348>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00d      	beq.n	8001c0e <HAL_GPIO_Init+0x222>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a50      	ldr	r2, [pc, #320]	@ (8001d38 <HAL_GPIO_Init+0x34c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x21e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4f      	ldr	r2, [pc, #316]	@ (8001d3c <HAL_GPIO_Init+0x350>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_GPIO_Init+0x21a>
 8001c02:	2309      	movs	r3, #9
 8001c04:	e012      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c06:	230a      	movs	r3, #10
 8001c08:	e010      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	e00e      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c0e:	2307      	movs	r3, #7
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c12:	2306      	movs	r3, #6
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	@ (8001d14 <HAL_GPIO_Init+0x328>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d40 <HAL_GPIO_Init+0x354>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a34      	ldr	r2, [pc, #208]	@ (8001d40 <HAL_GPIO_Init+0x354>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b32      	ldr	r3, [pc, #200]	@ (8001d40 <HAL_GPIO_Init+0x354>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a29      	ldr	r2, [pc, #164]	@ (8001d40 <HAL_GPIO_Init+0x354>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9e:	4b28      	ldr	r3, [pc, #160]	@ (8001d40 <HAL_GPIO_Init+0x354>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d40 <HAL_GPIO_Init+0x354>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d40 <HAL_GPIO_Init+0x354>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cec:	4a14      	ldr	r2, [pc, #80]	@ (8001d40 <HAL_GPIO_Init+0x354>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f ae86 	bls.w	8001a0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40021c00 	.word	0x40021c00
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40022400 	.word	0x40022400
 8001d40:	40013c00 	.word	0x40013c00

08001d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e001      	b.n	8001d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d90:	e003      	b.n	8001d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e29b      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8087 	beq.w	8001eda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dcc:	4b96      	ldr	r3, [pc, #600]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d00c      	beq.n	8001df2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd8:	4b93      	ldr	r3, [pc, #588]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d112      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62>
 8001de4:	4b90      	ldr	r3, [pc, #576]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001df0:	d10b      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df2:	4b8d      	ldr	r3, [pc, #564]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d06c      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x130>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d168      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e275      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x7a>
 8001e14:	4b84      	ldr	r3, [pc, #528]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a83      	ldr	r2, [pc, #524]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e02e      	b.n	8001e80 <HAL_RCC_OscConfig+0xd8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x9c>
 8001e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b7c      	ldr	r3, [pc, #496]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7b      	ldr	r2, [pc, #492]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e01d      	b.n	8001e80 <HAL_RCC_OscConfig+0xd8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0xc0>
 8001e4e:	4b76      	ldr	r3, [pc, #472]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a75      	ldr	r2, [pc, #468]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b73      	ldr	r3, [pc, #460]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a72      	ldr	r2, [pc, #456]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0xd8>
 8001e68:	4b6f      	ldr	r3, [pc, #444]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b6c      	ldr	r3, [pc, #432]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a6b      	ldr	r2, [pc, #428]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d013      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff f9e8 	bl	800125c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff f9e4 	bl	800125c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	@ 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e229      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b61      	ldr	r3, [pc, #388]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0xe8>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f9d4 	bl	800125c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f9d0 	bl	800125c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	@ 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e215      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	4b57      	ldr	r3, [pc, #348]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x110>
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d069      	beq.n	8001fba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee6:	4b50      	ldr	r3, [pc, #320]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d11c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x190>
 8001efe:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d116      	bne.n	8001f38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_RCC_OscConfig+0x17a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1e9      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f22:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	493d      	ldr	r1, [pc, #244]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	e040      	b.n	8001fba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d023      	beq.n	8001f88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f40:	4b39      	ldr	r3, [pc, #228]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a38      	ldr	r2, [pc, #224]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f986 	bl	800125c <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f54:	f7ff f982 	bl	800125c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e1c7      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	4b30      	ldr	r3, [pc, #192]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4929      	ldr	r1, [pc, #164]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
 8001f86:	e018      	b.n	8001fba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f88:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a26      	ldr	r2, [pc, #152]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff f962 	bl	800125c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7ff f95e 	bl	800125c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e1a3      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d038      	beq.n	8002038 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d019      	beq.n	8002002 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fce:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fd2:	4a15      	ldr	r2, [pc, #84]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7ff f93f 	bl	800125c <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe2:	f7ff f93b 	bl	800125c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e180      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x23a>
 8002000:	e01a      	b.n	8002038 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8002004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002006:	4a08      	ldr	r2, [pc, #32]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200e:	f7ff f925 	bl	800125c <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002016:	f7ff f921 	bl	800125c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d903      	bls.n	800202c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e166      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
 8002028:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202c:	4b92      	ldr	r3, [pc, #584]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 800202e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ee      	bne.n	8002016 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80a4 	beq.w	800218e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002046:	4b8c      	ldr	r3, [pc, #560]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10d      	bne.n	800206e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b89      	ldr	r3, [pc, #548]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	4a88      	ldr	r2, [pc, #544]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	@ 0x40
 800205e:	4b86      	ldr	r3, [pc, #536]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206a:	2301      	movs	r3, #1
 800206c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206e:	4b83      	ldr	r3, [pc, #524]	@ (800227c <HAL_RCC_OscConfig+0x4d4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800207a:	4b80      	ldr	r3, [pc, #512]	@ (800227c <HAL_RCC_OscConfig+0x4d4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a7f      	ldr	r2, [pc, #508]	@ (800227c <HAL_RCC_OscConfig+0x4d4>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7ff f8e9 	bl	800125c <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7ff f8e5 	bl	800125c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	@ 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e12a      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a0:	4b76      	ldr	r3, [pc, #472]	@ (800227c <HAL_RCC_OscConfig+0x4d4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x31a>
 80020b4:	4b70      	ldr	r3, [pc, #448]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b8:	4a6f      	ldr	r2, [pc, #444]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c0:	e02d      	b.n	800211e <HAL_RCC_OscConfig+0x376>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x33c>
 80020ca:	4b6b      	ldr	r3, [pc, #428]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ce:	4a6a      	ldr	r2, [pc, #424]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d6:	4b68      	ldr	r3, [pc, #416]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020da:	4a67      	ldr	r2, [pc, #412]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80020dc:	f023 0304 	bic.w	r3, r3, #4
 80020e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e2:	e01c      	b.n	800211e <HAL_RCC_OscConfig+0x376>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_OscConfig+0x35e>
 80020ec:	4b62      	ldr	r3, [pc, #392]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f0:	4a61      	ldr	r2, [pc, #388]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fc:	4a5e      	ldr	r2, [pc, #376]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	@ 0x70
 8002104:	e00b      	b.n	800211e <HAL_RCC_OscConfig+0x376>
 8002106:	4b5c      	ldr	r3, [pc, #368]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210a:	4a5b      	ldr	r2, [pc, #364]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	6713      	str	r3, [r2, #112]	@ 0x70
 8002112:	4b59      	ldr	r3, [pc, #356]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002116:	4a58      	ldr	r2, [pc, #352]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d015      	beq.n	8002152 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7ff f899 	bl	800125c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7ff f895 	bl	800125c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0d8      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	4b4c      	ldr	r3, [pc, #304]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ee      	beq.n	800212e <HAL_RCC_OscConfig+0x386>
 8002150:	e014      	b.n	800217c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7ff f883 	bl	800125c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7ff f87f 	bl	800125c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0c2      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	4b41      	ldr	r3, [pc, #260]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800217c:	7dfb      	ldrb	r3, [r7, #23]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002182:	4b3d      	ldr	r3, [pc, #244]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	4a3c      	ldr	r2, [pc, #240]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80ae 	beq.w	80022f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002198:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d06d      	beq.n	8002280 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d14b      	bne.n	8002244 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b32      	ldr	r3, [pc, #200]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a31      	ldr	r2, [pc, #196]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80021b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff f850 	bl	800125c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c0:	f7ff f84c 	bl	800125c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e091      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	019b      	lsls	r3, r3, #6
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	3b01      	subs	r3, #1
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002200:	061b      	lsls	r3, r3, #24
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002208:	071b      	lsls	r3, r3, #28
 800220a:	491b      	ldr	r1, [pc, #108]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002210:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a18      	ldr	r2, [pc, #96]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800221a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7ff f81e 	bl	800125c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7ff f81a 	bl	800125c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e05f      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x47c>
 8002242:	e057      	b.n	80022f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002244:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0b      	ldr	r2, [pc, #44]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 800224a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800224e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7ff f804 	bl	800125c <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7ff f800 	bl	800125c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e045      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <HAL_RCC_OscConfig+0x4d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x4b0>
 8002276:	e03d      	b.n	80022f4 <HAL_RCC_OscConfig+0x54c>
 8002278:	40023800 	.word	0x40023800
 800227c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002280:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <HAL_RCC_OscConfig+0x558>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d030      	beq.n	80022f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d129      	bne.n	80022f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d122      	bne.n	80022f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022b0:	4013      	ands	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d119      	bne.n	80022f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c6:	085b      	lsrs	r3, r3, #1
 80022c8:	3b01      	subs	r3, #1
 80022ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d10f      	bne.n	80022f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800

08002304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0d0      	b.n	80024be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800231c:	4b6a      	ldr	r3, [pc, #424]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d910      	bls.n	800234c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232a:	4b67      	ldr	r3, [pc, #412]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 020f 	bic.w	r2, r3, #15
 8002332:	4965      	ldr	r1, [pc, #404]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b63      	ldr	r3, [pc, #396]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0b8      	b.n	80024be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002364:	4b59      	ldr	r3, [pc, #356]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a58      	ldr	r2, [pc, #352]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 800236a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800236e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800237c:	4b53      	ldr	r3, [pc, #332]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a52      	ldr	r2, [pc, #328]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 8002382:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002386:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002388:	4b50      	ldr	r3, [pc, #320]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	494d      	ldr	r1, [pc, #308]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d040      	beq.n	8002428 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	4b47      	ldr	r3, [pc, #284]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d115      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e07f      	b.n	80024be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c6:	4b41      	ldr	r3, [pc, #260]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e073      	b.n	80024be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d6:	4b3d      	ldr	r3, [pc, #244]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e06b      	b.n	80024be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e6:	4b39      	ldr	r3, [pc, #228]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f023 0203 	bic.w	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4936      	ldr	r1, [pc, #216]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f8:	f7fe ff30 	bl	800125c <HAL_GetTick>
 80023fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	e00a      	b.n	8002416 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002400:	f7fe ff2c 	bl	800125c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e053      	b.n	80024be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	4b2d      	ldr	r3, [pc, #180]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 020c 	and.w	r2, r3, #12
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	429a      	cmp	r2, r3
 8002426:	d1eb      	bne.n	8002400 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002428:	4b27      	ldr	r3, [pc, #156]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d210      	bcs.n	8002458 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b24      	ldr	r3, [pc, #144]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 020f 	bic.w	r2, r3, #15
 800243e:	4922      	ldr	r1, [pc, #136]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e032      	b.n	80024be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002464:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4916      	ldr	r1, [pc, #88]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002482:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	490e      	ldr	r1, [pc, #56]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002496:	f000 f821 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 800249a:	4602      	mov	r2, r0
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	490a      	ldr	r1, [pc, #40]	@ (80024d0 <HAL_RCC_ClockConfig+0x1cc>)
 80024a8:	5ccb      	ldrb	r3, [r1, r3]
 80024aa:	fa22 f303 	lsr.w	r3, r2, r3
 80024ae:	4a09      	ldr	r2, [pc, #36]	@ (80024d4 <HAL_RCC_ClockConfig+0x1d0>)
 80024b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024b2:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <HAL_RCC_ClockConfig+0x1d4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe fe8c 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00
 80024cc:	40023800 	.word	0x40023800
 80024d0:	08004c94 	.word	0x08004c94
 80024d4:	20000000 	.word	0x20000000
 80024d8:	20000004 	.word	0x20000004

080024dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e0:	b090      	sub	sp, #64	@ 0x40
 80024e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80024e8:	2300      	movs	r3, #0
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024ec:	2300      	movs	r3, #0
 80024ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f4:	4b59      	ldr	r3, [pc, #356]	@ (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d00d      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x40>
 8002500:	2b08      	cmp	r3, #8
 8002502:	f200 80a1 	bhi.w	8002648 <HAL_RCC_GetSysClockFreq+0x16c>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x34>
 800250a:	2b04      	cmp	r3, #4
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x3a>
 800250e:	e09b      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4b53      	ldr	r3, [pc, #332]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x184>)
 8002512:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002514:	e09b      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002516:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x188>)
 8002518:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800251a:	e098      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800251c:	4b4f      	ldr	r3, [pc, #316]	@ (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002524:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002526:	4b4d      	ldr	r3, [pc, #308]	@ (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d028      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002532:	4b4a      	ldr	r3, [pc, #296]	@ (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	099b      	lsrs	r3, r3, #6
 8002538:	2200      	movs	r2, #0
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	627a      	str	r2, [r7, #36]	@ 0x24
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002544:	2100      	movs	r1, #0
 8002546:	4b47      	ldr	r3, [pc, #284]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x188>)
 8002548:	fb03 f201 	mul.w	r2, r3, r1
 800254c:	2300      	movs	r3, #0
 800254e:	fb00 f303 	mul.w	r3, r0, r3
 8002552:	4413      	add	r3, r2
 8002554:	4a43      	ldr	r2, [pc, #268]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x188>)
 8002556:	fba0 1202 	umull	r1, r2, r0, r2
 800255a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800255c:	460a      	mov	r2, r1
 800255e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002562:	4413      	add	r3, r2
 8002564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002568:	2200      	movs	r2, #0
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	61fa      	str	r2, [r7, #28]
 800256e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002572:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002576:	f7fd feb3 	bl	80002e0 <__aeabi_uldivmod>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4613      	mov	r3, r2
 8002580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002582:	e053      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002584:	4b35      	ldr	r3, [pc, #212]	@ (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	2200      	movs	r2, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	617a      	str	r2, [r7, #20]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002596:	f04f 0b00 	mov.w	fp, #0
 800259a:	4652      	mov	r2, sl
 800259c:	465b      	mov	r3, fp
 800259e:	f04f 0000 	mov.w	r0, #0
 80025a2:	f04f 0100 	mov.w	r1, #0
 80025a6:	0159      	lsls	r1, r3, #5
 80025a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ac:	0150      	lsls	r0, r2, #5
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	ebb2 080a 	subs.w	r8, r2, sl
 80025b6:	eb63 090b 	sbc.w	r9, r3, fp
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025ce:	ebb2 0408 	subs.w	r4, r2, r8
 80025d2:	eb63 0509 	sbc.w	r5, r3, r9
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	00eb      	lsls	r3, r5, #3
 80025e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025e4:	00e2      	lsls	r2, r4, #3
 80025e6:	4614      	mov	r4, r2
 80025e8:	461d      	mov	r5, r3
 80025ea:	eb14 030a 	adds.w	r3, r4, sl
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	eb45 030b 	adc.w	r3, r5, fp
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002602:	4629      	mov	r1, r5
 8002604:	028b      	lsls	r3, r1, #10
 8002606:	4621      	mov	r1, r4
 8002608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800260c:	4621      	mov	r1, r4
 800260e:	028a      	lsls	r2, r1, #10
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002616:	2200      	movs	r2, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	60fa      	str	r2, [r7, #12]
 800261c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002620:	f7fd fe5e 	bl	80002e0 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4613      	mov	r3, r2
 800262a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800262c:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	3301      	adds	r3, #1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800263c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002646:	e002      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x184>)
 800264a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800264c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002650:	4618      	mov	r0, r3
 8002652:	3740      	adds	r7, #64	@ 0x40
 8002654:	46bd      	mov	sp, r7
 8002656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	00f42400 	.word	0x00f42400
 8002664:	017d7840 	.word	0x017d7840

08002668 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b03      	ldr	r3, [pc, #12]	@ (800267c <HAL_RCC_GetHCLKFreq+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000000 	.word	0x20000000

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002684:	f7ff fff0 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b05      	ldr	r3, [pc, #20]	@ (80026a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	0a9b      	lsrs	r3, r3, #10
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4903      	ldr	r1, [pc, #12]	@ (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	08004ca4 	.word	0x08004ca4

080026a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026ac:	f7ff ffdc 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0b5b      	lsrs	r3, r3, #13
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	@ (80026cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08004ca4 	.word	0x08004ca4

080026d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d012      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026f8:	4b69      	ldr	r3, [pc, #420]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	4a68      	ldr	r2, [pc, #416]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002702:	6093      	str	r3, [r2, #8]
 8002704:	4b66      	ldr	r3, [pc, #408]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270c:	4964      	ldr	r1, [pc, #400]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d017      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800272a:	4b5d      	ldr	r3, [pc, #372]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002730:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002738:	4959      	ldr	r1, [pc, #356]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002744:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002748:	d101      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002756:	2301      	movs	r3, #1
 8002758:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d017      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002766:	4b4e      	ldr	r3, [pc, #312]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800276c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	494a      	ldr	r1, [pc, #296]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002784:	d101      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002786:	2301      	movs	r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002792:	2301      	movs	r3, #1
 8002794:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 808b 	beq.w	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	4b3a      	ldr	r3, [pc, #232]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	4a39      	ldr	r2, [pc, #228]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027be:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c0:	4b37      	ldr	r3, [pc, #220]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027cc:	4b35      	ldr	r3, [pc, #212]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a34      	ldr	r2, [pc, #208]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d8:	f7fe fd40 	bl	800125c <HAL_GetTick>
 80027dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e0:	f7fe fd3c 	bl	800125c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	@ 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e38f      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027f2:	4b2c      	ldr	r3, [pc, #176]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027fe:	4b28      	ldr	r3, [pc, #160]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002806:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d035      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	429a      	cmp	r2, r3
 800281a:	d02e      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800281c:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002824:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002826:	4b1e      	ldr	r3, [pc, #120]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002830:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002832:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002836:	4a1a      	ldr	r2, [pc, #104]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800283c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800283e:	4a18      	ldr	r2, [pc, #96]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002844:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d114      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fd04 	bl	800125c <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002856:	e00a      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe fd00 	bl	800125c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e351      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286e:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ee      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002886:	d111      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002894:	4b04      	ldr	r3, [pc, #16]	@ (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002896:	400b      	ands	r3, r1
 8002898:	4901      	ldr	r1, [pc, #4]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
 800289e:	e00b      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40007000 	.word	0x40007000
 80028a8:	0ffffcff 	.word	0x0ffffcff
 80028ac:	4bac      	ldr	r3, [pc, #688]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4aab      	ldr	r2, [pc, #684]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80028b6:	6093      	str	r3, [r2, #8]
 80028b8:	4ba9      	ldr	r3, [pc, #676]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	49a6      	ldr	r1, [pc, #664]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d010      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028d6:	4ba2      	ldr	r3, [pc, #648]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028dc:	4aa0      	ldr	r2, [pc, #640]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028e6:	4b9e      	ldr	r3, [pc, #632]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	499b      	ldr	r1, [pc, #620]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002904:	4b96      	ldr	r3, [pc, #600]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002912:	4993      	ldr	r1, [pc, #588]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002926:	4b8e      	ldr	r3, [pc, #568]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002934:	498a      	ldr	r1, [pc, #552]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002948:	4b85      	ldr	r3, [pc, #532]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002956:	4982      	ldr	r1, [pc, #520]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800296a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002970:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002978:	4979      	ldr	r1, [pc, #484]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800298c:	4b74      	ldr	r3, [pc, #464]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002992:	f023 0203 	bic.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	4971      	ldr	r1, [pc, #452]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b4:	f023 020c 	bic.w	r2, r3, #12
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029bc:	4968      	ldr	r1, [pc, #416]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029d0:	4b63      	ldr	r3, [pc, #396]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029de:	4960      	ldr	r1, [pc, #384]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a00:	4957      	ldr	r1, [pc, #348]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a14:	4b52      	ldr	r3, [pc, #328]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a22:	494f      	ldr	r1, [pc, #316]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a36:	4b4a      	ldr	r3, [pc, #296]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a44:	4946      	ldr	r1, [pc, #280]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a58:	4b41      	ldr	r3, [pc, #260]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a66:	493e      	ldr	r1, [pc, #248]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a7a:	4b39      	ldr	r3, [pc, #228]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a88:	4935      	ldr	r1, [pc, #212]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a9c:	4b30      	ldr	r3, [pc, #192]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aaa:	492d      	ldr	r1, [pc, #180]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d011      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002abe:	4b28      	ldr	r3, [pc, #160]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002acc:	4924      	ldr	r1, [pc, #144]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ad8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002afe:	4b18      	ldr	r3, [pc, #96]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b04:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b0c:	4914      	ldr	r1, [pc, #80]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b20:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b26:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b30:	490b      	ldr	r1, [pc, #44]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00f      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b44:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b54:	4902      	ldr	r1, [pc, #8]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b5c:	e002      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b70:	4b8a      	ldr	r3, [pc, #552]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b80:	4986      	ldr	r1, [pc, #536]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b94:	4b81      	ldr	r3, [pc, #516]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b9a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ba4:	497d      	ldr	r1, [pc, #500]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d006      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80d6 	beq.w	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bc0:	4b76      	ldr	r3, [pc, #472]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a75      	ldr	r2, [pc, #468]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bcc:	f7fe fb46 	bl	800125c <HAL_GetTick>
 8002bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bd4:	f7fe fb42 	bl	800125c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	@ 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e195      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002be6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d021      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11d      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c06:	4b65      	ldr	r3, [pc, #404]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c14:	4b61      	ldr	r3, [pc, #388]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c1a:	0e1b      	lsrs	r3, r3, #24
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	019a      	lsls	r2, r3, #6
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	4958      	ldr	r1, [pc, #352]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02e      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c6c:	d129      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c7c:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c82:	0f1b      	lsrs	r3, r3, #28
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	019a      	lsls	r2, r3, #6
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	071b      	lsls	r3, r3, #28
 8002ca2:	493e      	ldr	r1, [pc, #248]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002caa:	4b3c      	ldr	r3, [pc, #240]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cb0:	f023 021f 	bic.w	r2, r3, #31
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	4938      	ldr	r1, [pc, #224]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01d      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cce:	4b33      	ldr	r3, [pc, #204]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cd4:	0e1b      	lsrs	r3, r3, #24
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cdc:	4b2f      	ldr	r3, [pc, #188]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ce2:	0f1b      	lsrs	r3, r3, #28
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	019a      	lsls	r2, r3, #6
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	041b      	lsls	r3, r3, #16
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	061b      	lsls	r3, r3, #24
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	071b      	lsls	r3, r3, #28
 8002d02:	4926      	ldr	r1, [pc, #152]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d011      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	019a      	lsls	r2, r3, #6
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	071b      	lsls	r3, r3, #28
 8002d32:	491a      	ldr	r1, [pc, #104]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d3a:	4b18      	ldr	r3, [pc, #96]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a17      	ldr	r2, [pc, #92]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d46:	f7fe fa89 	bl	800125c <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d4e:	f7fe fa85 	bl	800125c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b64      	cmp	r3, #100	@ 0x64
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0d8      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d60:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	f040 80ce 	bne.w	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d74:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a08      	ldr	r2, [pc, #32]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d80:	f7fe fa6c 	bl	800125c <HAL_GetTick>
 8002d84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d86:	e00b      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d88:	f7fe fa68 	bl	800125c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	@ 0x64
 8002d94:	d904      	bls.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0bb      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002da0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dac:	d0ec      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d02e      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d12a      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dd6:	4b51      	ldr	r3, [pc, #324]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002de4:	4b4d      	ldr	r3, [pc, #308]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dea:	0f1b      	lsrs	r3, r3, #28
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	019a      	lsls	r2, r3, #6
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	431a      	orrs	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	071b      	lsls	r3, r3, #28
 8002e0a:	4944      	ldr	r1, [pc, #272]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e12:	4b42      	ldr	r3, [pc, #264]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e18:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e20:	3b01      	subs	r3, #1
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	493d      	ldr	r1, [pc, #244]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d022      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e40:	d11d      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e42:	4b36      	ldr	r3, [pc, #216]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e48:	0e1b      	lsrs	r3, r3, #24
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e50:	4b32      	ldr	r3, [pc, #200]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	0f1b      	lsrs	r3, r3, #28
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	019a      	lsls	r2, r3, #6
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	041b      	lsls	r3, r3, #16
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	061b      	lsls	r3, r3, #24
 8002e70:	431a      	orrs	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	071b      	lsls	r3, r3, #28
 8002e76:	4929      	ldr	r1, [pc, #164]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d028      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e8a:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e90:	0e1b      	lsrs	r3, r3, #24
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e98:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9e:	0c1b      	lsrs	r3, r3, #16
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	019a      	lsls	r2, r3, #6
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	071b      	lsls	r3, r3, #28
 8002ebe:	4917      	ldr	r1, [pc, #92]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ec6:	4b15      	ldr	r3, [pc, #84]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ecc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	4911      	ldr	r1, [pc, #68]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002edc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee8:	f7fe f9b8 	bl	800125c <HAL_GetTick>
 8002eec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ef0:	f7fe f9b4 	bl	800125c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	@ 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e007      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f0e:	d1ef      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3720      	adds	r7, #32
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800

08002f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e040      	b.n	8002fb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fd ff8a 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2224      	movs	r2, #36	@ 0x24
 8002f4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fbde 	bl	8003728 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f977 	bl	8003260 <UART_SetConfig>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e01b      	b.n	8002fb4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fc5d 	bl	800386c <UART_CheckIdleState>
 8002fb2:	4603      	mov	r3, r0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	@ 0x28
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d177      	bne.n	80030c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_UART_Transmit+0x24>
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e070      	b.n	80030c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2221      	movs	r2, #33	@ 0x21
 8002ff0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ff2:	f7fe f933 	bl	800125c <HAL_GetTick>
 8002ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	88fa      	ldrh	r2, [r7, #6]
 8003004:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003010:	d108      	bne.n	8003024 <HAL_UART_Transmit+0x68>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d104      	bne.n	8003024 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	e003      	b.n	800302c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800302c:	e02f      	b.n	800308e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	2180      	movs	r1, #128	@ 0x80
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fcbf 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e03b      	b.n	80030c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003062:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	3302      	adds	r3, #2
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e007      	b.n	800307c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1c9      	bne.n	800302e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2140      	movs	r1, #64	@ 0x40
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fc89 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e005      	b.n	80030c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b08a      	sub	sp, #40	@ 0x28
 80030d2:	af02      	add	r7, sp, #8
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	4613      	mov	r3, r2
 80030dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	f040 80b5 	bne.w	8003254 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_UART_Receive+0x28>
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0ad      	b.n	8003256 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2222      	movs	r2, #34	@ 0x22
 8003106:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003110:	f7fe f8a4 	bl	800125c <HAL_GetTick>
 8003114:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	88fa      	ldrh	r2, [r7, #6]
 800311a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	88fa      	ldrh	r2, [r7, #6]
 8003122:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800312e:	d10e      	bne.n	800314e <HAL_UART_Receive+0x80>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d105      	bne.n	8003144 <HAL_UART_Receive+0x76>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800313e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003142:	e02d      	b.n	80031a0 <HAL_UART_Receive+0xd2>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	22ff      	movs	r2, #255	@ 0xff
 8003148:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800314c:	e028      	b.n	80031a0 <HAL_UART_Receive+0xd2>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10d      	bne.n	8003172 <HAL_UART_Receive+0xa4>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d104      	bne.n	8003168 <HAL_UART_Receive+0x9a>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	22ff      	movs	r2, #255	@ 0xff
 8003162:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003166:	e01b      	b.n	80031a0 <HAL_UART_Receive+0xd2>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	227f      	movs	r2, #127	@ 0x7f
 800316c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003170:	e016      	b.n	80031a0 <HAL_UART_Receive+0xd2>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800317a:	d10d      	bne.n	8003198 <HAL_UART_Receive+0xca>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <HAL_UART_Receive+0xc0>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	227f      	movs	r2, #127	@ 0x7f
 8003188:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800318c:	e008      	b.n	80031a0 <HAL_UART_Receive+0xd2>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	223f      	movs	r2, #63	@ 0x3f
 8003192:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003196:	e003      	b.n	80031a0 <HAL_UART_Receive+0xd2>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80031a6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b0:	d108      	bne.n	80031c4 <HAL_UART_Receive+0xf6>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e003      	b.n	80031cc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031cc:	e036      	b.n	800323c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2200      	movs	r2, #0
 80031d6:	2120      	movs	r1, #32
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fbef 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e032      	b.n	8003256 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	8a7b      	ldrh	r3, [r7, #18]
 8003200:	4013      	ands	r3, r2
 8003202:	b29a      	uxth	r2, r3
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	3302      	adds	r3, #2
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	e00c      	b.n	800322a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	b2da      	uxtb	r2, r3
 8003218:	8a7b      	ldrh	r3, [r7, #18]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	4013      	ands	r3, r2
 800321e:	b2da      	uxtb	r2, r3
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	3301      	adds	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1c2      	bne.n	80031ce <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4ba6      	ldr	r3, [pc, #664]	@ (8003524 <UART_SetConfig+0x2c4>)
 800328c:	4013      	ands	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	6979      	ldr	r1, [r7, #20]
 8003294:	430b      	orrs	r3, r1
 8003296:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a94      	ldr	r2, [pc, #592]	@ (8003528 <UART_SetConfig+0x2c8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d120      	bne.n	800331e <UART_SetConfig+0xbe>
 80032dc:	4b93      	ldr	r3, [pc, #588]	@ (800352c <UART_SetConfig+0x2cc>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d816      	bhi.n	8003318 <UART_SetConfig+0xb8>
 80032ea:	a201      	add	r2, pc, #4	@ (adr r2, 80032f0 <UART_SetConfig+0x90>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	08003301 	.word	0x08003301
 80032f4:	0800330d 	.word	0x0800330d
 80032f8:	08003307 	.word	0x08003307
 80032fc:	08003313 	.word	0x08003313
 8003300:	2301      	movs	r3, #1
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e150      	b.n	80035a8 <UART_SetConfig+0x348>
 8003306:	2302      	movs	r3, #2
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e14d      	b.n	80035a8 <UART_SetConfig+0x348>
 800330c:	2304      	movs	r3, #4
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e14a      	b.n	80035a8 <UART_SetConfig+0x348>
 8003312:	2308      	movs	r3, #8
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e147      	b.n	80035a8 <UART_SetConfig+0x348>
 8003318:	2310      	movs	r3, #16
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e144      	b.n	80035a8 <UART_SetConfig+0x348>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a83      	ldr	r2, [pc, #524]	@ (8003530 <UART_SetConfig+0x2d0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d132      	bne.n	800338e <UART_SetConfig+0x12e>
 8003328:	4b80      	ldr	r3, [pc, #512]	@ (800352c <UART_SetConfig+0x2cc>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d828      	bhi.n	8003388 <UART_SetConfig+0x128>
 8003336:	a201      	add	r2, pc, #4	@ (adr r2, 800333c <UART_SetConfig+0xdc>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	08003371 	.word	0x08003371
 8003340:	08003389 	.word	0x08003389
 8003344:	08003389 	.word	0x08003389
 8003348:	08003389 	.word	0x08003389
 800334c:	0800337d 	.word	0x0800337d
 8003350:	08003389 	.word	0x08003389
 8003354:	08003389 	.word	0x08003389
 8003358:	08003389 	.word	0x08003389
 800335c:	08003377 	.word	0x08003377
 8003360:	08003389 	.word	0x08003389
 8003364:	08003389 	.word	0x08003389
 8003368:	08003389 	.word	0x08003389
 800336c:	08003383 	.word	0x08003383
 8003370:	2300      	movs	r3, #0
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e118      	b.n	80035a8 <UART_SetConfig+0x348>
 8003376:	2302      	movs	r3, #2
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e115      	b.n	80035a8 <UART_SetConfig+0x348>
 800337c:	2304      	movs	r3, #4
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e112      	b.n	80035a8 <UART_SetConfig+0x348>
 8003382:	2308      	movs	r3, #8
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e10f      	b.n	80035a8 <UART_SetConfig+0x348>
 8003388:	2310      	movs	r3, #16
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e10c      	b.n	80035a8 <UART_SetConfig+0x348>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a68      	ldr	r2, [pc, #416]	@ (8003534 <UART_SetConfig+0x2d4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d120      	bne.n	80033da <UART_SetConfig+0x17a>
 8003398:	4b64      	ldr	r3, [pc, #400]	@ (800352c <UART_SetConfig+0x2cc>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033a2:	2b30      	cmp	r3, #48	@ 0x30
 80033a4:	d013      	beq.n	80033ce <UART_SetConfig+0x16e>
 80033a6:	2b30      	cmp	r3, #48	@ 0x30
 80033a8:	d814      	bhi.n	80033d4 <UART_SetConfig+0x174>
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d009      	beq.n	80033c2 <UART_SetConfig+0x162>
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d810      	bhi.n	80033d4 <UART_SetConfig+0x174>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <UART_SetConfig+0x15c>
 80033b6:	2b10      	cmp	r3, #16
 80033b8:	d006      	beq.n	80033c8 <UART_SetConfig+0x168>
 80033ba:	e00b      	b.n	80033d4 <UART_SetConfig+0x174>
 80033bc:	2300      	movs	r3, #0
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e0f2      	b.n	80035a8 <UART_SetConfig+0x348>
 80033c2:	2302      	movs	r3, #2
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e0ef      	b.n	80035a8 <UART_SetConfig+0x348>
 80033c8:	2304      	movs	r3, #4
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e0ec      	b.n	80035a8 <UART_SetConfig+0x348>
 80033ce:	2308      	movs	r3, #8
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e0e9      	b.n	80035a8 <UART_SetConfig+0x348>
 80033d4:	2310      	movs	r3, #16
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e0e6      	b.n	80035a8 <UART_SetConfig+0x348>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a56      	ldr	r2, [pc, #344]	@ (8003538 <UART_SetConfig+0x2d8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d120      	bne.n	8003426 <UART_SetConfig+0x1c6>
 80033e4:	4b51      	ldr	r3, [pc, #324]	@ (800352c <UART_SetConfig+0x2cc>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80033ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80033f0:	d013      	beq.n	800341a <UART_SetConfig+0x1ba>
 80033f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80033f4:	d814      	bhi.n	8003420 <UART_SetConfig+0x1c0>
 80033f6:	2b80      	cmp	r3, #128	@ 0x80
 80033f8:	d009      	beq.n	800340e <UART_SetConfig+0x1ae>
 80033fa:	2b80      	cmp	r3, #128	@ 0x80
 80033fc:	d810      	bhi.n	8003420 <UART_SetConfig+0x1c0>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <UART_SetConfig+0x1a8>
 8003402:	2b40      	cmp	r3, #64	@ 0x40
 8003404:	d006      	beq.n	8003414 <UART_SetConfig+0x1b4>
 8003406:	e00b      	b.n	8003420 <UART_SetConfig+0x1c0>
 8003408:	2300      	movs	r3, #0
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e0cc      	b.n	80035a8 <UART_SetConfig+0x348>
 800340e:	2302      	movs	r3, #2
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e0c9      	b.n	80035a8 <UART_SetConfig+0x348>
 8003414:	2304      	movs	r3, #4
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e0c6      	b.n	80035a8 <UART_SetConfig+0x348>
 800341a:	2308      	movs	r3, #8
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e0c3      	b.n	80035a8 <UART_SetConfig+0x348>
 8003420:	2310      	movs	r3, #16
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e0c0      	b.n	80035a8 <UART_SetConfig+0x348>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a44      	ldr	r2, [pc, #272]	@ (800353c <UART_SetConfig+0x2dc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d125      	bne.n	800347c <UART_SetConfig+0x21c>
 8003430:	4b3e      	ldr	r3, [pc, #248]	@ (800352c <UART_SetConfig+0x2cc>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800343a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800343e:	d017      	beq.n	8003470 <UART_SetConfig+0x210>
 8003440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003444:	d817      	bhi.n	8003476 <UART_SetConfig+0x216>
 8003446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800344a:	d00b      	beq.n	8003464 <UART_SetConfig+0x204>
 800344c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003450:	d811      	bhi.n	8003476 <UART_SetConfig+0x216>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <UART_SetConfig+0x1fe>
 8003456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345a:	d006      	beq.n	800346a <UART_SetConfig+0x20a>
 800345c:	e00b      	b.n	8003476 <UART_SetConfig+0x216>
 800345e:	2300      	movs	r3, #0
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e0a1      	b.n	80035a8 <UART_SetConfig+0x348>
 8003464:	2302      	movs	r3, #2
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e09e      	b.n	80035a8 <UART_SetConfig+0x348>
 800346a:	2304      	movs	r3, #4
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e09b      	b.n	80035a8 <UART_SetConfig+0x348>
 8003470:	2308      	movs	r3, #8
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	e098      	b.n	80035a8 <UART_SetConfig+0x348>
 8003476:	2310      	movs	r3, #16
 8003478:	77fb      	strb	r3, [r7, #31]
 800347a:	e095      	b.n	80035a8 <UART_SetConfig+0x348>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2f      	ldr	r2, [pc, #188]	@ (8003540 <UART_SetConfig+0x2e0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d125      	bne.n	80034d2 <UART_SetConfig+0x272>
 8003486:	4b29      	ldr	r3, [pc, #164]	@ (800352c <UART_SetConfig+0x2cc>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003490:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003494:	d017      	beq.n	80034c6 <UART_SetConfig+0x266>
 8003496:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800349a:	d817      	bhi.n	80034cc <UART_SetConfig+0x26c>
 800349c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034a0:	d00b      	beq.n	80034ba <UART_SetConfig+0x25a>
 80034a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034a6:	d811      	bhi.n	80034cc <UART_SetConfig+0x26c>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <UART_SetConfig+0x254>
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b0:	d006      	beq.n	80034c0 <UART_SetConfig+0x260>
 80034b2:	e00b      	b.n	80034cc <UART_SetConfig+0x26c>
 80034b4:	2301      	movs	r3, #1
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e076      	b.n	80035a8 <UART_SetConfig+0x348>
 80034ba:	2302      	movs	r3, #2
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e073      	b.n	80035a8 <UART_SetConfig+0x348>
 80034c0:	2304      	movs	r3, #4
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e070      	b.n	80035a8 <UART_SetConfig+0x348>
 80034c6:	2308      	movs	r3, #8
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e06d      	b.n	80035a8 <UART_SetConfig+0x348>
 80034cc:	2310      	movs	r3, #16
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e06a      	b.n	80035a8 <UART_SetConfig+0x348>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003544 <UART_SetConfig+0x2e4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d138      	bne.n	800354e <UART_SetConfig+0x2ee>
 80034dc:	4b13      	ldr	r3, [pc, #76]	@ (800352c <UART_SetConfig+0x2cc>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034ea:	d017      	beq.n	800351c <UART_SetConfig+0x2bc>
 80034ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034f0:	d82a      	bhi.n	8003548 <UART_SetConfig+0x2e8>
 80034f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f6:	d00b      	beq.n	8003510 <UART_SetConfig+0x2b0>
 80034f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034fc:	d824      	bhi.n	8003548 <UART_SetConfig+0x2e8>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <UART_SetConfig+0x2aa>
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003506:	d006      	beq.n	8003516 <UART_SetConfig+0x2b6>
 8003508:	e01e      	b.n	8003548 <UART_SetConfig+0x2e8>
 800350a:	2300      	movs	r3, #0
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e04b      	b.n	80035a8 <UART_SetConfig+0x348>
 8003510:	2302      	movs	r3, #2
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e048      	b.n	80035a8 <UART_SetConfig+0x348>
 8003516:	2304      	movs	r3, #4
 8003518:	77fb      	strb	r3, [r7, #31]
 800351a:	e045      	b.n	80035a8 <UART_SetConfig+0x348>
 800351c:	2308      	movs	r3, #8
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e042      	b.n	80035a8 <UART_SetConfig+0x348>
 8003522:	bf00      	nop
 8003524:	efff69f3 	.word	0xefff69f3
 8003528:	40011000 	.word	0x40011000
 800352c:	40023800 	.word	0x40023800
 8003530:	40004400 	.word	0x40004400
 8003534:	40004800 	.word	0x40004800
 8003538:	40004c00 	.word	0x40004c00
 800353c:	40005000 	.word	0x40005000
 8003540:	40011400 	.word	0x40011400
 8003544:	40007800 	.word	0x40007800
 8003548:	2310      	movs	r3, #16
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e02c      	b.n	80035a8 <UART_SetConfig+0x348>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a72      	ldr	r2, [pc, #456]	@ (800371c <UART_SetConfig+0x4bc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d125      	bne.n	80035a4 <UART_SetConfig+0x344>
 8003558:	4b71      	ldr	r3, [pc, #452]	@ (8003720 <UART_SetConfig+0x4c0>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003562:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003566:	d017      	beq.n	8003598 <UART_SetConfig+0x338>
 8003568:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800356c:	d817      	bhi.n	800359e <UART_SetConfig+0x33e>
 800356e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003572:	d00b      	beq.n	800358c <UART_SetConfig+0x32c>
 8003574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003578:	d811      	bhi.n	800359e <UART_SetConfig+0x33e>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <UART_SetConfig+0x326>
 800357e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003582:	d006      	beq.n	8003592 <UART_SetConfig+0x332>
 8003584:	e00b      	b.n	800359e <UART_SetConfig+0x33e>
 8003586:	2300      	movs	r3, #0
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e00d      	b.n	80035a8 <UART_SetConfig+0x348>
 800358c:	2302      	movs	r3, #2
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e00a      	b.n	80035a8 <UART_SetConfig+0x348>
 8003592:	2304      	movs	r3, #4
 8003594:	77fb      	strb	r3, [r7, #31]
 8003596:	e007      	b.n	80035a8 <UART_SetConfig+0x348>
 8003598:	2308      	movs	r3, #8
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e004      	b.n	80035a8 <UART_SetConfig+0x348>
 800359e:	2310      	movs	r3, #16
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e001      	b.n	80035a8 <UART_SetConfig+0x348>
 80035a4:	2310      	movs	r3, #16
 80035a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b0:	d15b      	bne.n	800366a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80035b2:	7ffb      	ldrb	r3, [r7, #31]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d828      	bhi.n	800360a <UART_SetConfig+0x3aa>
 80035b8:	a201      	add	r2, pc, #4	@ (adr r2, 80035c0 <UART_SetConfig+0x360>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035e5 	.word	0x080035e5
 80035c4:	080035ed 	.word	0x080035ed
 80035c8:	080035f5 	.word	0x080035f5
 80035cc:	0800360b 	.word	0x0800360b
 80035d0:	080035fb 	.word	0x080035fb
 80035d4:	0800360b 	.word	0x0800360b
 80035d8:	0800360b 	.word	0x0800360b
 80035dc:	0800360b 	.word	0x0800360b
 80035e0:	08003603 	.word	0x08003603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e4:	f7ff f84c 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 80035e8:	61b8      	str	r0, [r7, #24]
        break;
 80035ea:	e013      	b.n	8003614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035ec:	f7ff f85c 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 80035f0:	61b8      	str	r0, [r7, #24]
        break;
 80035f2:	e00f      	b.n	8003614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003724 <UART_SetConfig+0x4c4>)
 80035f6:	61bb      	str	r3, [r7, #24]
        break;
 80035f8:	e00c      	b.n	8003614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fa:	f7fe ff6f 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 80035fe:	61b8      	str	r0, [r7, #24]
        break;
 8003600:	e008      	b.n	8003614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003606:	61bb      	str	r3, [r7, #24]
        break;
 8003608:	e004      	b.n	8003614 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	77bb      	strb	r3, [r7, #30]
        break;
 8003612:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d074      	beq.n	8003704 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	005a      	lsls	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	441a      	add	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	fbb2 f3f3 	udiv	r3, r2, r3
 800362e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b0f      	cmp	r3, #15
 8003634:	d916      	bls.n	8003664 <UART_SetConfig+0x404>
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800363c:	d212      	bcs.n	8003664 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	b29b      	uxth	r3, r3
 8003642:	f023 030f 	bic.w	r3, r3, #15
 8003646:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	b29b      	uxth	r3, r3
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	b29a      	uxth	r2, r3
 8003654:	89fb      	ldrh	r3, [r7, #14]
 8003656:	4313      	orrs	r3, r2
 8003658:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	89fa      	ldrh	r2, [r7, #14]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	e04f      	b.n	8003704 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	77bb      	strb	r3, [r7, #30]
 8003668:	e04c      	b.n	8003704 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800366a:	7ffb      	ldrb	r3, [r7, #31]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d828      	bhi.n	80036c2 <UART_SetConfig+0x462>
 8003670:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <UART_SetConfig+0x418>)
 8003672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003676:	bf00      	nop
 8003678:	0800369d 	.word	0x0800369d
 800367c:	080036a5 	.word	0x080036a5
 8003680:	080036ad 	.word	0x080036ad
 8003684:	080036c3 	.word	0x080036c3
 8003688:	080036b3 	.word	0x080036b3
 800368c:	080036c3 	.word	0x080036c3
 8003690:	080036c3 	.word	0x080036c3
 8003694:	080036c3 	.word	0x080036c3
 8003698:	080036bb 	.word	0x080036bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800369c:	f7fe fff0 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 80036a0:	61b8      	str	r0, [r7, #24]
        break;
 80036a2:	e013      	b.n	80036cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a4:	f7ff f800 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 80036a8:	61b8      	str	r0, [r7, #24]
        break;
 80036aa:	e00f      	b.n	80036cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003724 <UART_SetConfig+0x4c4>)
 80036ae:	61bb      	str	r3, [r7, #24]
        break;
 80036b0:	e00c      	b.n	80036cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036b2:	f7fe ff13 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 80036b6:	61b8      	str	r0, [r7, #24]
        break;
 80036b8:	e008      	b.n	80036cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036be:	61bb      	str	r3, [r7, #24]
        break;
 80036c0:	e004      	b.n	80036cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	77bb      	strb	r3, [r7, #30]
        break;
 80036ca:	bf00      	nop
    }

    if (pclk != 0U)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d018      	beq.n	8003704 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	085a      	lsrs	r2, r3, #1
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	441a      	add	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b0f      	cmp	r3, #15
 80036ea:	d909      	bls.n	8003700 <UART_SetConfig+0x4a0>
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f2:	d205      	bcs.n	8003700 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	e001      	b.n	8003704 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003710:	7fbb      	ldrb	r3, [r7, #30]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40007c00 	.word	0x40007c00
 8003720:	40023800 	.word	0x40023800
 8003724:	00f42400 	.word	0x00f42400

08003728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01a      	beq.n	800383e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003826:	d10a      	bne.n	800383e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]
  }
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b098      	sub	sp, #96	@ 0x60
 8003870:	af02      	add	r7, sp, #8
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800387c:	f7fd fcee 	bl	800125c <HAL_GetTick>
 8003880:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b08      	cmp	r3, #8
 800388e:	d12e      	bne.n	80038ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003890:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003898:	2200      	movs	r2, #0
 800389a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f88c 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d021      	beq.n	80038ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038be:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e6      	bne.n	80038aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e062      	b.n	80039b4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d149      	bne.n	8003990 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f856 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d03c      	beq.n	8003990 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	623b      	str	r3, [r7, #32]
   return(result);
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800392a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003934:	633b      	str	r3, [r7, #48]	@ 0x30
 8003936:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800393a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e6      	bne.n	8003916 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	60fb      	str	r3, [r7, #12]
   return(result);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3308      	adds	r3, #8
 8003966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003968:	61fa      	str	r2, [r7, #28]
 800396a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	69b9      	ldr	r1, [r7, #24]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	617b      	str	r3, [r7, #20]
   return(result);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e5      	bne.n	8003948 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e011      	b.n	80039b4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3758      	adds	r7, #88	@ 0x58
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039cc:	e04f      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d04b      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d6:	f7fd fc41 	bl	800125c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d302      	bcc.n	80039ec <UART_WaitOnFlagUntilTimeout+0x30>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e04e      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d037      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b80      	cmp	r3, #128	@ 0x80
 8003a02:	d034      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b40      	cmp	r3, #64	@ 0x40
 8003a08:	d031      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d110      	bne.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f838 	bl	8003a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e029      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a48:	d111      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f81e 	bl	8003a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e00f      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d0a0      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b095      	sub	sp, #84	@ 0x54
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003abe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ac2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e6      	bne.n	8003a9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3308      	adds	r3, #8
 8003aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e5      	bne.n	8003ad0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d118      	bne.n	8003b3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f023 0310 	bic.w	r3, r3, #16
 8003b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6979      	ldr	r1, [r7, #20]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	613b      	str	r3, [r7, #16]
   return(result);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e6      	bne.n	8003b0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b52:	bf00      	nop
 8003b54:	3754      	adds	r7, #84	@ 0x54
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
	...

08003b60 <std>:
 8003b60:	2300      	movs	r3, #0
 8003b62:	b510      	push	{r4, lr}
 8003b64:	4604      	mov	r4, r0
 8003b66:	e9c0 3300 	strd	r3, r3, [r0]
 8003b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b6e:	6083      	str	r3, [r0, #8]
 8003b70:	8181      	strh	r1, [r0, #12]
 8003b72:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b74:	81c2      	strh	r2, [r0, #14]
 8003b76:	6183      	str	r3, [r0, #24]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	305c      	adds	r0, #92	@ 0x5c
 8003b7e:	f000 f9f9 	bl	8003f74 <memset>
 8003b82:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb8 <std+0x58>)
 8003b84:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b86:	4b0d      	ldr	r3, [pc, #52]	@ (8003bbc <std+0x5c>)
 8003b88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc0 <std+0x60>)
 8003b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <std+0x64>)
 8003b90:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b92:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc8 <std+0x68>)
 8003b94:	6224      	str	r4, [r4, #32]
 8003b96:	429c      	cmp	r4, r3
 8003b98:	d006      	beq.n	8003ba8 <std+0x48>
 8003b9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b9e:	4294      	cmp	r4, r2
 8003ba0:	d002      	beq.n	8003ba8 <std+0x48>
 8003ba2:	33d0      	adds	r3, #208	@ 0xd0
 8003ba4:	429c      	cmp	r4, r3
 8003ba6:	d105      	bne.n	8003bb4 <std+0x54>
 8003ba8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb0:	f000 ba58 	b.w	8004064 <__retarget_lock_init_recursive>
 8003bb4:	bd10      	pop	{r4, pc}
 8003bb6:	bf00      	nop
 8003bb8:	08003dc5 	.word	0x08003dc5
 8003bbc:	08003de7 	.word	0x08003de7
 8003bc0:	08003e1f 	.word	0x08003e1f
 8003bc4:	08003e43 	.word	0x08003e43
 8003bc8:	200005d0 	.word	0x200005d0

08003bcc <stdio_exit_handler>:
 8003bcc:	4a02      	ldr	r2, [pc, #8]	@ (8003bd8 <stdio_exit_handler+0xc>)
 8003bce:	4903      	ldr	r1, [pc, #12]	@ (8003bdc <stdio_exit_handler+0x10>)
 8003bd0:	4803      	ldr	r0, [pc, #12]	@ (8003be0 <stdio_exit_handler+0x14>)
 8003bd2:	f000 b869 	b.w	8003ca8 <_fwalk_sglue>
 8003bd6:	bf00      	nop
 8003bd8:	2000000c 	.word	0x2000000c
 8003bdc:	08004905 	.word	0x08004905
 8003be0:	2000001c 	.word	0x2000001c

08003be4 <cleanup_stdio>:
 8003be4:	6841      	ldr	r1, [r0, #4]
 8003be6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <cleanup_stdio+0x34>)
 8003be8:	4299      	cmp	r1, r3
 8003bea:	b510      	push	{r4, lr}
 8003bec:	4604      	mov	r4, r0
 8003bee:	d001      	beq.n	8003bf4 <cleanup_stdio+0x10>
 8003bf0:	f000 fe88 	bl	8004904 <_fflush_r>
 8003bf4:	68a1      	ldr	r1, [r4, #8]
 8003bf6:	4b09      	ldr	r3, [pc, #36]	@ (8003c1c <cleanup_stdio+0x38>)
 8003bf8:	4299      	cmp	r1, r3
 8003bfa:	d002      	beq.n	8003c02 <cleanup_stdio+0x1e>
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f000 fe81 	bl	8004904 <_fflush_r>
 8003c02:	68e1      	ldr	r1, [r4, #12]
 8003c04:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <cleanup_stdio+0x3c>)
 8003c06:	4299      	cmp	r1, r3
 8003c08:	d004      	beq.n	8003c14 <cleanup_stdio+0x30>
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c10:	f000 be78 	b.w	8004904 <_fflush_r>
 8003c14:	bd10      	pop	{r4, pc}
 8003c16:	bf00      	nop
 8003c18:	200005d0 	.word	0x200005d0
 8003c1c:	20000638 	.word	0x20000638
 8003c20:	200006a0 	.word	0x200006a0

08003c24 <global_stdio_init.part.0>:
 8003c24:	b510      	push	{r4, lr}
 8003c26:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <global_stdio_init.part.0+0x30>)
 8003c28:	4c0b      	ldr	r4, [pc, #44]	@ (8003c58 <global_stdio_init.part.0+0x34>)
 8003c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c5c <global_stdio_init.part.0+0x38>)
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	4620      	mov	r0, r4
 8003c30:	2200      	movs	r2, #0
 8003c32:	2104      	movs	r1, #4
 8003c34:	f7ff ff94 	bl	8003b60 <std>
 8003c38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	2109      	movs	r1, #9
 8003c40:	f7ff ff8e 	bl	8003b60 <std>
 8003c44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c48:	2202      	movs	r2, #2
 8003c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c4e:	2112      	movs	r1, #18
 8003c50:	f7ff bf86 	b.w	8003b60 <std>
 8003c54:	20000708 	.word	0x20000708
 8003c58:	200005d0 	.word	0x200005d0
 8003c5c:	08003bcd 	.word	0x08003bcd

08003c60 <__sfp_lock_acquire>:
 8003c60:	4801      	ldr	r0, [pc, #4]	@ (8003c68 <__sfp_lock_acquire+0x8>)
 8003c62:	f000 ba00 	b.w	8004066 <__retarget_lock_acquire_recursive>
 8003c66:	bf00      	nop
 8003c68:	20000711 	.word	0x20000711

08003c6c <__sfp_lock_release>:
 8003c6c:	4801      	ldr	r0, [pc, #4]	@ (8003c74 <__sfp_lock_release+0x8>)
 8003c6e:	f000 b9fb 	b.w	8004068 <__retarget_lock_release_recursive>
 8003c72:	bf00      	nop
 8003c74:	20000711 	.word	0x20000711

08003c78 <__sinit>:
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	f7ff fff0 	bl	8003c60 <__sfp_lock_acquire>
 8003c80:	6a23      	ldr	r3, [r4, #32]
 8003c82:	b11b      	cbz	r3, 8003c8c <__sinit+0x14>
 8003c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c88:	f7ff bff0 	b.w	8003c6c <__sfp_lock_release>
 8003c8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ca0 <__sinit+0x28>)
 8003c8e:	6223      	str	r3, [r4, #32]
 8003c90:	4b04      	ldr	r3, [pc, #16]	@ (8003ca4 <__sinit+0x2c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f5      	bne.n	8003c84 <__sinit+0xc>
 8003c98:	f7ff ffc4 	bl	8003c24 <global_stdio_init.part.0>
 8003c9c:	e7f2      	b.n	8003c84 <__sinit+0xc>
 8003c9e:	bf00      	nop
 8003ca0:	08003be5 	.word	0x08003be5
 8003ca4:	20000708 	.word	0x20000708

08003ca8 <_fwalk_sglue>:
 8003ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cac:	4607      	mov	r7, r0
 8003cae:	4688      	mov	r8, r1
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cb8:	f1b9 0901 	subs.w	r9, r9, #1
 8003cbc:	d505      	bpl.n	8003cca <_fwalk_sglue+0x22>
 8003cbe:	6824      	ldr	r4, [r4, #0]
 8003cc0:	2c00      	cmp	r4, #0
 8003cc2:	d1f7      	bne.n	8003cb4 <_fwalk_sglue+0xc>
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cca:	89ab      	ldrh	r3, [r5, #12]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d907      	bls.n	8003ce0 <_fwalk_sglue+0x38>
 8003cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	d003      	beq.n	8003ce0 <_fwalk_sglue+0x38>
 8003cd8:	4629      	mov	r1, r5
 8003cda:	4638      	mov	r0, r7
 8003cdc:	47c0      	blx	r8
 8003cde:	4306      	orrs	r6, r0
 8003ce0:	3568      	adds	r5, #104	@ 0x68
 8003ce2:	e7e9      	b.n	8003cb8 <_fwalk_sglue+0x10>

08003ce4 <iprintf>:
 8003ce4:	b40f      	push	{r0, r1, r2, r3}
 8003ce6:	b507      	push	{r0, r1, r2, lr}
 8003ce8:	4906      	ldr	r1, [pc, #24]	@ (8003d04 <iprintf+0x20>)
 8003cea:	ab04      	add	r3, sp, #16
 8003cec:	6808      	ldr	r0, [r1, #0]
 8003cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cf2:	6881      	ldr	r1, [r0, #8]
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	f000 fadb 	bl	80042b0 <_vfiprintf_r>
 8003cfa:	b003      	add	sp, #12
 8003cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d00:	b004      	add	sp, #16
 8003d02:	4770      	bx	lr
 8003d04:	20000018 	.word	0x20000018

08003d08 <_puts_r>:
 8003d08:	6a03      	ldr	r3, [r0, #32]
 8003d0a:	b570      	push	{r4, r5, r6, lr}
 8003d0c:	6884      	ldr	r4, [r0, #8]
 8003d0e:	4605      	mov	r5, r0
 8003d10:	460e      	mov	r6, r1
 8003d12:	b90b      	cbnz	r3, 8003d18 <_puts_r+0x10>
 8003d14:	f7ff ffb0 	bl	8003c78 <__sinit>
 8003d18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d1a:	07db      	lsls	r3, r3, #31
 8003d1c:	d405      	bmi.n	8003d2a <_puts_r+0x22>
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	0598      	lsls	r0, r3, #22
 8003d22:	d402      	bmi.n	8003d2a <_puts_r+0x22>
 8003d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d26:	f000 f99e 	bl	8004066 <__retarget_lock_acquire_recursive>
 8003d2a:	89a3      	ldrh	r3, [r4, #12]
 8003d2c:	0719      	lsls	r1, r3, #28
 8003d2e:	d502      	bpl.n	8003d36 <_puts_r+0x2e>
 8003d30:	6923      	ldr	r3, [r4, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d135      	bne.n	8003da2 <_puts_r+0x9a>
 8003d36:	4621      	mov	r1, r4
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f000 f8c5 	bl	8003ec8 <__swsetup_r>
 8003d3e:	b380      	cbz	r0, 8003da2 <_puts_r+0x9a>
 8003d40:	f04f 35ff 	mov.w	r5, #4294967295
 8003d44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d46:	07da      	lsls	r2, r3, #31
 8003d48:	d405      	bmi.n	8003d56 <_puts_r+0x4e>
 8003d4a:	89a3      	ldrh	r3, [r4, #12]
 8003d4c:	059b      	lsls	r3, r3, #22
 8003d4e:	d402      	bmi.n	8003d56 <_puts_r+0x4e>
 8003d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d52:	f000 f989 	bl	8004068 <__retarget_lock_release_recursive>
 8003d56:	4628      	mov	r0, r5
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da04      	bge.n	8003d68 <_puts_r+0x60>
 8003d5e:	69a2      	ldr	r2, [r4, #24]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	dc17      	bgt.n	8003d94 <_puts_r+0x8c>
 8003d64:	290a      	cmp	r1, #10
 8003d66:	d015      	beq.n	8003d94 <_puts_r+0x8c>
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	6022      	str	r2, [r4, #0]
 8003d6e:	7019      	strb	r1, [r3, #0]
 8003d70:	68a3      	ldr	r3, [r4, #8]
 8003d72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d76:	3b01      	subs	r3, #1
 8003d78:	60a3      	str	r3, [r4, #8]
 8003d7a:	2900      	cmp	r1, #0
 8003d7c:	d1ed      	bne.n	8003d5a <_puts_r+0x52>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	da11      	bge.n	8003da6 <_puts_r+0x9e>
 8003d82:	4622      	mov	r2, r4
 8003d84:	210a      	movs	r1, #10
 8003d86:	4628      	mov	r0, r5
 8003d88:	f000 f85f 	bl	8003e4a <__swbuf_r>
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d0d7      	beq.n	8003d40 <_puts_r+0x38>
 8003d90:	250a      	movs	r5, #10
 8003d92:	e7d7      	b.n	8003d44 <_puts_r+0x3c>
 8003d94:	4622      	mov	r2, r4
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 f857 	bl	8003e4a <__swbuf_r>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d1e7      	bne.n	8003d70 <_puts_r+0x68>
 8003da0:	e7ce      	b.n	8003d40 <_puts_r+0x38>
 8003da2:	3e01      	subs	r6, #1
 8003da4:	e7e4      	b.n	8003d70 <_puts_r+0x68>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	6022      	str	r2, [r4, #0]
 8003dac:	220a      	movs	r2, #10
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	e7ee      	b.n	8003d90 <_puts_r+0x88>
	...

08003db4 <puts>:
 8003db4:	4b02      	ldr	r3, [pc, #8]	@ (8003dc0 <puts+0xc>)
 8003db6:	4601      	mov	r1, r0
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	f7ff bfa5 	b.w	8003d08 <_puts_r>
 8003dbe:	bf00      	nop
 8003dc0:	20000018 	.word	0x20000018

08003dc4 <__sread>:
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dcc:	f000 f8fc 	bl	8003fc8 <_read_r>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	bfab      	itete	ge
 8003dd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8003dd8:	181b      	addge	r3, r3, r0
 8003dda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003dde:	bfac      	ite	ge
 8003de0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003de2:	81a3      	strhlt	r3, [r4, #12]
 8003de4:	bd10      	pop	{r4, pc}

08003de6 <__swrite>:
 8003de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dea:	461f      	mov	r7, r3
 8003dec:	898b      	ldrh	r3, [r1, #12]
 8003dee:	05db      	lsls	r3, r3, #23
 8003df0:	4605      	mov	r5, r0
 8003df2:	460c      	mov	r4, r1
 8003df4:	4616      	mov	r6, r2
 8003df6:	d505      	bpl.n	8003e04 <__swrite+0x1e>
 8003df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f000 f8d0 	bl	8003fa4 <_lseek_r>
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e0e:	81a3      	strh	r3, [r4, #12]
 8003e10:	4632      	mov	r2, r6
 8003e12:	463b      	mov	r3, r7
 8003e14:	4628      	mov	r0, r5
 8003e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e1a:	f000 b8e7 	b.w	8003fec <_write_r>

08003e1e <__sseek>:
 8003e1e:	b510      	push	{r4, lr}
 8003e20:	460c      	mov	r4, r1
 8003e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e26:	f000 f8bd 	bl	8003fa4 <_lseek_r>
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	bf15      	itete	ne
 8003e30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e3a:	81a3      	strheq	r3, [r4, #12]
 8003e3c:	bf18      	it	ne
 8003e3e:	81a3      	strhne	r3, [r4, #12]
 8003e40:	bd10      	pop	{r4, pc}

08003e42 <__sclose>:
 8003e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e46:	f000 b89d 	b.w	8003f84 <_close_r>

08003e4a <__swbuf_r>:
 8003e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4c:	460e      	mov	r6, r1
 8003e4e:	4614      	mov	r4, r2
 8003e50:	4605      	mov	r5, r0
 8003e52:	b118      	cbz	r0, 8003e5c <__swbuf_r+0x12>
 8003e54:	6a03      	ldr	r3, [r0, #32]
 8003e56:	b90b      	cbnz	r3, 8003e5c <__swbuf_r+0x12>
 8003e58:	f7ff ff0e 	bl	8003c78 <__sinit>
 8003e5c:	69a3      	ldr	r3, [r4, #24]
 8003e5e:	60a3      	str	r3, [r4, #8]
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	071a      	lsls	r2, r3, #28
 8003e64:	d501      	bpl.n	8003e6a <__swbuf_r+0x20>
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	b943      	cbnz	r3, 8003e7c <__swbuf_r+0x32>
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f000 f82b 	bl	8003ec8 <__swsetup_r>
 8003e72:	b118      	cbz	r0, 8003e7c <__swbuf_r+0x32>
 8003e74:	f04f 37ff 	mov.w	r7, #4294967295
 8003e78:	4638      	mov	r0, r7
 8003e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	6922      	ldr	r2, [r4, #16]
 8003e80:	1a98      	subs	r0, r3, r2
 8003e82:	6963      	ldr	r3, [r4, #20]
 8003e84:	b2f6      	uxtb	r6, r6
 8003e86:	4283      	cmp	r3, r0
 8003e88:	4637      	mov	r7, r6
 8003e8a:	dc05      	bgt.n	8003e98 <__swbuf_r+0x4e>
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f000 fd38 	bl	8004904 <_fflush_r>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d1ed      	bne.n	8003e74 <__swbuf_r+0x2a>
 8003e98:	68a3      	ldr	r3, [r4, #8]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	60a3      	str	r3, [r4, #8]
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	6022      	str	r2, [r4, #0]
 8003ea4:	701e      	strb	r6, [r3, #0]
 8003ea6:	6962      	ldr	r2, [r4, #20]
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d004      	beq.n	8003eb8 <__swbuf_r+0x6e>
 8003eae:	89a3      	ldrh	r3, [r4, #12]
 8003eb0:	07db      	lsls	r3, r3, #31
 8003eb2:	d5e1      	bpl.n	8003e78 <__swbuf_r+0x2e>
 8003eb4:	2e0a      	cmp	r6, #10
 8003eb6:	d1df      	bne.n	8003e78 <__swbuf_r+0x2e>
 8003eb8:	4621      	mov	r1, r4
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f000 fd22 	bl	8004904 <_fflush_r>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d0d9      	beq.n	8003e78 <__swbuf_r+0x2e>
 8003ec4:	e7d6      	b.n	8003e74 <__swbuf_r+0x2a>
	...

08003ec8 <__swsetup_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4b29      	ldr	r3, [pc, #164]	@ (8003f70 <__swsetup_r+0xa8>)
 8003ecc:	4605      	mov	r5, r0
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	b118      	cbz	r0, 8003edc <__swsetup_r+0x14>
 8003ed4:	6a03      	ldr	r3, [r0, #32]
 8003ed6:	b90b      	cbnz	r3, 8003edc <__swsetup_r+0x14>
 8003ed8:	f7ff fece 	bl	8003c78 <__sinit>
 8003edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ee0:	0719      	lsls	r1, r3, #28
 8003ee2:	d422      	bmi.n	8003f2a <__swsetup_r+0x62>
 8003ee4:	06da      	lsls	r2, r3, #27
 8003ee6:	d407      	bmi.n	8003ef8 <__swsetup_r+0x30>
 8003ee8:	2209      	movs	r2, #9
 8003eea:	602a      	str	r2, [r5, #0]
 8003eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ef0:	81a3      	strh	r3, [r4, #12]
 8003ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef6:	e033      	b.n	8003f60 <__swsetup_r+0x98>
 8003ef8:	0758      	lsls	r0, r3, #29
 8003efa:	d512      	bpl.n	8003f22 <__swsetup_r+0x5a>
 8003efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003efe:	b141      	cbz	r1, 8003f12 <__swsetup_r+0x4a>
 8003f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d002      	beq.n	8003f0e <__swsetup_r+0x46>
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f000 f8af 	bl	800406c <_free_r>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f12:	89a3      	ldrh	r3, [r4, #12]
 8003f14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f18:	81a3      	strh	r3, [r4, #12]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6063      	str	r3, [r4, #4]
 8003f1e:	6923      	ldr	r3, [r4, #16]
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	f043 0308 	orr.w	r3, r3, #8
 8003f28:	81a3      	strh	r3, [r4, #12]
 8003f2a:	6923      	ldr	r3, [r4, #16]
 8003f2c:	b94b      	cbnz	r3, 8003f42 <__swsetup_r+0x7a>
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f38:	d003      	beq.n	8003f42 <__swsetup_r+0x7a>
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f000 fd2f 	bl	80049a0 <__smakebuf_r>
 8003f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f46:	f013 0201 	ands.w	r2, r3, #1
 8003f4a:	d00a      	beq.n	8003f62 <__swsetup_r+0x9a>
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	60a2      	str	r2, [r4, #8]
 8003f50:	6962      	ldr	r2, [r4, #20]
 8003f52:	4252      	negs	r2, r2
 8003f54:	61a2      	str	r2, [r4, #24]
 8003f56:	6922      	ldr	r2, [r4, #16]
 8003f58:	b942      	cbnz	r2, 8003f6c <__swsetup_r+0xa4>
 8003f5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f5e:	d1c5      	bne.n	8003eec <__swsetup_r+0x24>
 8003f60:	bd38      	pop	{r3, r4, r5, pc}
 8003f62:	0799      	lsls	r1, r3, #30
 8003f64:	bf58      	it	pl
 8003f66:	6962      	ldrpl	r2, [r4, #20]
 8003f68:	60a2      	str	r2, [r4, #8]
 8003f6a:	e7f4      	b.n	8003f56 <__swsetup_r+0x8e>
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	e7f7      	b.n	8003f60 <__swsetup_r+0x98>
 8003f70:	20000018 	.word	0x20000018

08003f74 <memset>:
 8003f74:	4402      	add	r2, r0
 8003f76:	4603      	mov	r3, r0
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d100      	bne.n	8003f7e <memset+0xa>
 8003f7c:	4770      	bx	lr
 8003f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f82:	e7f9      	b.n	8003f78 <memset+0x4>

08003f84 <_close_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4d06      	ldr	r5, [pc, #24]	@ (8003fa0 <_close_r+0x1c>)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	f7fd f86e 	bl	8001070 <_close>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_close_r+0x1a>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_close_r+0x1a>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	2000070c 	.word	0x2000070c

08003fa4 <_lseek_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d07      	ldr	r5, [pc, #28]	@ (8003fc4 <_lseek_r+0x20>)
 8003fa8:	4604      	mov	r4, r0
 8003faa:	4608      	mov	r0, r1
 8003fac:	4611      	mov	r1, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	602a      	str	r2, [r5, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7fd f883 	bl	80010be <_lseek>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_lseek_r+0x1e>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_lseek_r+0x1e>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	2000070c 	.word	0x2000070c

08003fc8 <_read_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	4d07      	ldr	r5, [pc, #28]	@ (8003fe8 <_read_r+0x20>)
 8003fcc:	4604      	mov	r4, r0
 8003fce:	4608      	mov	r0, r1
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	602a      	str	r2, [r5, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f7fd f811 	bl	8000ffe <_read>
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	d102      	bne.n	8003fe6 <_read_r+0x1e>
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	b103      	cbz	r3, 8003fe6 <_read_r+0x1e>
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	2000070c 	.word	0x2000070c

08003fec <_write_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4d07      	ldr	r5, [pc, #28]	@ (800400c <_write_r+0x20>)
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	4608      	mov	r0, r1
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	602a      	str	r2, [r5, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f7fd f81c 	bl	8001038 <_write>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d102      	bne.n	800400a <_write_r+0x1e>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	b103      	cbz	r3, 800400a <_write_r+0x1e>
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	2000070c 	.word	0x2000070c

08004010 <__errno>:
 8004010:	4b01      	ldr	r3, [pc, #4]	@ (8004018 <__errno+0x8>)
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000018 	.word	0x20000018

0800401c <__libc_init_array>:
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	4d0d      	ldr	r5, [pc, #52]	@ (8004054 <__libc_init_array+0x38>)
 8004020:	4c0d      	ldr	r4, [pc, #52]	@ (8004058 <__libc_init_array+0x3c>)
 8004022:	1b64      	subs	r4, r4, r5
 8004024:	10a4      	asrs	r4, r4, #2
 8004026:	2600      	movs	r6, #0
 8004028:	42a6      	cmp	r6, r4
 800402a:	d109      	bne.n	8004040 <__libc_init_array+0x24>
 800402c:	4d0b      	ldr	r5, [pc, #44]	@ (800405c <__libc_init_array+0x40>)
 800402e:	4c0c      	ldr	r4, [pc, #48]	@ (8004060 <__libc_init_array+0x44>)
 8004030:	f000 fd24 	bl	8004a7c <_init>
 8004034:	1b64      	subs	r4, r4, r5
 8004036:	10a4      	asrs	r4, r4, #2
 8004038:	2600      	movs	r6, #0
 800403a:	42a6      	cmp	r6, r4
 800403c:	d105      	bne.n	800404a <__libc_init_array+0x2e>
 800403e:	bd70      	pop	{r4, r5, r6, pc}
 8004040:	f855 3b04 	ldr.w	r3, [r5], #4
 8004044:	4798      	blx	r3
 8004046:	3601      	adds	r6, #1
 8004048:	e7ee      	b.n	8004028 <__libc_init_array+0xc>
 800404a:	f855 3b04 	ldr.w	r3, [r5], #4
 800404e:	4798      	blx	r3
 8004050:	3601      	adds	r6, #1
 8004052:	e7f2      	b.n	800403a <__libc_init_array+0x1e>
 8004054:	08004ce8 	.word	0x08004ce8
 8004058:	08004ce8 	.word	0x08004ce8
 800405c:	08004ce8 	.word	0x08004ce8
 8004060:	08004cec 	.word	0x08004cec

08004064 <__retarget_lock_init_recursive>:
 8004064:	4770      	bx	lr

08004066 <__retarget_lock_acquire_recursive>:
 8004066:	4770      	bx	lr

08004068 <__retarget_lock_release_recursive>:
 8004068:	4770      	bx	lr
	...

0800406c <_free_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4605      	mov	r5, r0
 8004070:	2900      	cmp	r1, #0
 8004072:	d041      	beq.n	80040f8 <_free_r+0x8c>
 8004074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004078:	1f0c      	subs	r4, r1, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	bfb8      	it	lt
 800407e:	18e4      	addlt	r4, r4, r3
 8004080:	f000 f8e0 	bl	8004244 <__malloc_lock>
 8004084:	4a1d      	ldr	r2, [pc, #116]	@ (80040fc <_free_r+0x90>)
 8004086:	6813      	ldr	r3, [r2, #0]
 8004088:	b933      	cbnz	r3, 8004098 <_free_r+0x2c>
 800408a:	6063      	str	r3, [r4, #4]
 800408c:	6014      	str	r4, [r2, #0]
 800408e:	4628      	mov	r0, r5
 8004090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004094:	f000 b8dc 	b.w	8004250 <__malloc_unlock>
 8004098:	42a3      	cmp	r3, r4
 800409a:	d908      	bls.n	80040ae <_free_r+0x42>
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	1821      	adds	r1, r4, r0
 80040a0:	428b      	cmp	r3, r1
 80040a2:	bf01      	itttt	eq
 80040a4:	6819      	ldreq	r1, [r3, #0]
 80040a6:	685b      	ldreq	r3, [r3, #4]
 80040a8:	1809      	addeq	r1, r1, r0
 80040aa:	6021      	streq	r1, [r4, #0]
 80040ac:	e7ed      	b.n	800408a <_free_r+0x1e>
 80040ae:	461a      	mov	r2, r3
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b10b      	cbz	r3, 80040b8 <_free_r+0x4c>
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	d9fa      	bls.n	80040ae <_free_r+0x42>
 80040b8:	6811      	ldr	r1, [r2, #0]
 80040ba:	1850      	adds	r0, r2, r1
 80040bc:	42a0      	cmp	r0, r4
 80040be:	d10b      	bne.n	80040d8 <_free_r+0x6c>
 80040c0:	6820      	ldr	r0, [r4, #0]
 80040c2:	4401      	add	r1, r0
 80040c4:	1850      	adds	r0, r2, r1
 80040c6:	4283      	cmp	r3, r0
 80040c8:	6011      	str	r1, [r2, #0]
 80040ca:	d1e0      	bne.n	800408e <_free_r+0x22>
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	6053      	str	r3, [r2, #4]
 80040d2:	4408      	add	r0, r1
 80040d4:	6010      	str	r0, [r2, #0]
 80040d6:	e7da      	b.n	800408e <_free_r+0x22>
 80040d8:	d902      	bls.n	80040e0 <_free_r+0x74>
 80040da:	230c      	movs	r3, #12
 80040dc:	602b      	str	r3, [r5, #0]
 80040de:	e7d6      	b.n	800408e <_free_r+0x22>
 80040e0:	6820      	ldr	r0, [r4, #0]
 80040e2:	1821      	adds	r1, r4, r0
 80040e4:	428b      	cmp	r3, r1
 80040e6:	bf04      	itt	eq
 80040e8:	6819      	ldreq	r1, [r3, #0]
 80040ea:	685b      	ldreq	r3, [r3, #4]
 80040ec:	6063      	str	r3, [r4, #4]
 80040ee:	bf04      	itt	eq
 80040f0:	1809      	addeq	r1, r1, r0
 80040f2:	6021      	streq	r1, [r4, #0]
 80040f4:	6054      	str	r4, [r2, #4]
 80040f6:	e7ca      	b.n	800408e <_free_r+0x22>
 80040f8:	bd38      	pop	{r3, r4, r5, pc}
 80040fa:	bf00      	nop
 80040fc:	20000718 	.word	0x20000718

08004100 <sbrk_aligned>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	4e0f      	ldr	r6, [pc, #60]	@ (8004140 <sbrk_aligned+0x40>)
 8004104:	460c      	mov	r4, r1
 8004106:	6831      	ldr	r1, [r6, #0]
 8004108:	4605      	mov	r5, r0
 800410a:	b911      	cbnz	r1, 8004112 <sbrk_aligned+0x12>
 800410c:	f000 fca6 	bl	8004a5c <_sbrk_r>
 8004110:	6030      	str	r0, [r6, #0]
 8004112:	4621      	mov	r1, r4
 8004114:	4628      	mov	r0, r5
 8004116:	f000 fca1 	bl	8004a5c <_sbrk_r>
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	d103      	bne.n	8004126 <sbrk_aligned+0x26>
 800411e:	f04f 34ff 	mov.w	r4, #4294967295
 8004122:	4620      	mov	r0, r4
 8004124:	bd70      	pop	{r4, r5, r6, pc}
 8004126:	1cc4      	adds	r4, r0, #3
 8004128:	f024 0403 	bic.w	r4, r4, #3
 800412c:	42a0      	cmp	r0, r4
 800412e:	d0f8      	beq.n	8004122 <sbrk_aligned+0x22>
 8004130:	1a21      	subs	r1, r4, r0
 8004132:	4628      	mov	r0, r5
 8004134:	f000 fc92 	bl	8004a5c <_sbrk_r>
 8004138:	3001      	adds	r0, #1
 800413a:	d1f2      	bne.n	8004122 <sbrk_aligned+0x22>
 800413c:	e7ef      	b.n	800411e <sbrk_aligned+0x1e>
 800413e:	bf00      	nop
 8004140:	20000714 	.word	0x20000714

08004144 <_malloc_r>:
 8004144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004148:	1ccd      	adds	r5, r1, #3
 800414a:	f025 0503 	bic.w	r5, r5, #3
 800414e:	3508      	adds	r5, #8
 8004150:	2d0c      	cmp	r5, #12
 8004152:	bf38      	it	cc
 8004154:	250c      	movcc	r5, #12
 8004156:	2d00      	cmp	r5, #0
 8004158:	4606      	mov	r6, r0
 800415a:	db01      	blt.n	8004160 <_malloc_r+0x1c>
 800415c:	42a9      	cmp	r1, r5
 800415e:	d904      	bls.n	800416a <_malloc_r+0x26>
 8004160:	230c      	movs	r3, #12
 8004162:	6033      	str	r3, [r6, #0]
 8004164:	2000      	movs	r0, #0
 8004166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800416a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004240 <_malloc_r+0xfc>
 800416e:	f000 f869 	bl	8004244 <__malloc_lock>
 8004172:	f8d8 3000 	ldr.w	r3, [r8]
 8004176:	461c      	mov	r4, r3
 8004178:	bb44      	cbnz	r4, 80041cc <_malloc_r+0x88>
 800417a:	4629      	mov	r1, r5
 800417c:	4630      	mov	r0, r6
 800417e:	f7ff ffbf 	bl	8004100 <sbrk_aligned>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	4604      	mov	r4, r0
 8004186:	d158      	bne.n	800423a <_malloc_r+0xf6>
 8004188:	f8d8 4000 	ldr.w	r4, [r8]
 800418c:	4627      	mov	r7, r4
 800418e:	2f00      	cmp	r7, #0
 8004190:	d143      	bne.n	800421a <_malloc_r+0xd6>
 8004192:	2c00      	cmp	r4, #0
 8004194:	d04b      	beq.n	800422e <_malloc_r+0xea>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	4639      	mov	r1, r7
 800419a:	4630      	mov	r0, r6
 800419c:	eb04 0903 	add.w	r9, r4, r3
 80041a0:	f000 fc5c 	bl	8004a5c <_sbrk_r>
 80041a4:	4581      	cmp	r9, r0
 80041a6:	d142      	bne.n	800422e <_malloc_r+0xea>
 80041a8:	6821      	ldr	r1, [r4, #0]
 80041aa:	1a6d      	subs	r5, r5, r1
 80041ac:	4629      	mov	r1, r5
 80041ae:	4630      	mov	r0, r6
 80041b0:	f7ff ffa6 	bl	8004100 <sbrk_aligned>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d03a      	beq.n	800422e <_malloc_r+0xea>
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	442b      	add	r3, r5
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	f8d8 3000 	ldr.w	r3, [r8]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	bb62      	cbnz	r2, 8004220 <_malloc_r+0xdc>
 80041c6:	f8c8 7000 	str.w	r7, [r8]
 80041ca:	e00f      	b.n	80041ec <_malloc_r+0xa8>
 80041cc:	6822      	ldr	r2, [r4, #0]
 80041ce:	1b52      	subs	r2, r2, r5
 80041d0:	d420      	bmi.n	8004214 <_malloc_r+0xd0>
 80041d2:	2a0b      	cmp	r2, #11
 80041d4:	d917      	bls.n	8004206 <_malloc_r+0xc2>
 80041d6:	1961      	adds	r1, r4, r5
 80041d8:	42a3      	cmp	r3, r4
 80041da:	6025      	str	r5, [r4, #0]
 80041dc:	bf18      	it	ne
 80041de:	6059      	strne	r1, [r3, #4]
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	bf08      	it	eq
 80041e4:	f8c8 1000 	streq.w	r1, [r8]
 80041e8:	5162      	str	r2, [r4, r5]
 80041ea:	604b      	str	r3, [r1, #4]
 80041ec:	4630      	mov	r0, r6
 80041ee:	f000 f82f 	bl	8004250 <__malloc_unlock>
 80041f2:	f104 000b 	add.w	r0, r4, #11
 80041f6:	1d23      	adds	r3, r4, #4
 80041f8:	f020 0007 	bic.w	r0, r0, #7
 80041fc:	1ac2      	subs	r2, r0, r3
 80041fe:	bf1c      	itt	ne
 8004200:	1a1b      	subne	r3, r3, r0
 8004202:	50a3      	strne	r3, [r4, r2]
 8004204:	e7af      	b.n	8004166 <_malloc_r+0x22>
 8004206:	6862      	ldr	r2, [r4, #4]
 8004208:	42a3      	cmp	r3, r4
 800420a:	bf0c      	ite	eq
 800420c:	f8c8 2000 	streq.w	r2, [r8]
 8004210:	605a      	strne	r2, [r3, #4]
 8004212:	e7eb      	b.n	80041ec <_malloc_r+0xa8>
 8004214:	4623      	mov	r3, r4
 8004216:	6864      	ldr	r4, [r4, #4]
 8004218:	e7ae      	b.n	8004178 <_malloc_r+0x34>
 800421a:	463c      	mov	r4, r7
 800421c:	687f      	ldr	r7, [r7, #4]
 800421e:	e7b6      	b.n	800418e <_malloc_r+0x4a>
 8004220:	461a      	mov	r2, r3
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	42a3      	cmp	r3, r4
 8004226:	d1fb      	bne.n	8004220 <_malloc_r+0xdc>
 8004228:	2300      	movs	r3, #0
 800422a:	6053      	str	r3, [r2, #4]
 800422c:	e7de      	b.n	80041ec <_malloc_r+0xa8>
 800422e:	230c      	movs	r3, #12
 8004230:	6033      	str	r3, [r6, #0]
 8004232:	4630      	mov	r0, r6
 8004234:	f000 f80c 	bl	8004250 <__malloc_unlock>
 8004238:	e794      	b.n	8004164 <_malloc_r+0x20>
 800423a:	6005      	str	r5, [r0, #0]
 800423c:	e7d6      	b.n	80041ec <_malloc_r+0xa8>
 800423e:	bf00      	nop
 8004240:	20000718 	.word	0x20000718

08004244 <__malloc_lock>:
 8004244:	4801      	ldr	r0, [pc, #4]	@ (800424c <__malloc_lock+0x8>)
 8004246:	f7ff bf0e 	b.w	8004066 <__retarget_lock_acquire_recursive>
 800424a:	bf00      	nop
 800424c:	20000710 	.word	0x20000710

08004250 <__malloc_unlock>:
 8004250:	4801      	ldr	r0, [pc, #4]	@ (8004258 <__malloc_unlock+0x8>)
 8004252:	f7ff bf09 	b.w	8004068 <__retarget_lock_release_recursive>
 8004256:	bf00      	nop
 8004258:	20000710 	.word	0x20000710

0800425c <__sfputc_r>:
 800425c:	6893      	ldr	r3, [r2, #8]
 800425e:	3b01      	subs	r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	b410      	push	{r4}
 8004264:	6093      	str	r3, [r2, #8]
 8004266:	da08      	bge.n	800427a <__sfputc_r+0x1e>
 8004268:	6994      	ldr	r4, [r2, #24]
 800426a:	42a3      	cmp	r3, r4
 800426c:	db01      	blt.n	8004272 <__sfputc_r+0x16>
 800426e:	290a      	cmp	r1, #10
 8004270:	d103      	bne.n	800427a <__sfputc_r+0x1e>
 8004272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004276:	f7ff bde8 	b.w	8003e4a <__swbuf_r>
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	1c58      	adds	r0, r3, #1
 800427e:	6010      	str	r0, [r2, #0]
 8004280:	7019      	strb	r1, [r3, #0]
 8004282:	4608      	mov	r0, r1
 8004284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004288:	4770      	bx	lr

0800428a <__sfputs_r>:
 800428a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428c:	4606      	mov	r6, r0
 800428e:	460f      	mov	r7, r1
 8004290:	4614      	mov	r4, r2
 8004292:	18d5      	adds	r5, r2, r3
 8004294:	42ac      	cmp	r4, r5
 8004296:	d101      	bne.n	800429c <__sfputs_r+0x12>
 8004298:	2000      	movs	r0, #0
 800429a:	e007      	b.n	80042ac <__sfputs_r+0x22>
 800429c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a0:	463a      	mov	r2, r7
 80042a2:	4630      	mov	r0, r6
 80042a4:	f7ff ffda 	bl	800425c <__sfputc_r>
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	d1f3      	bne.n	8004294 <__sfputs_r+0xa>
 80042ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042b0 <_vfiprintf_r>:
 80042b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	460d      	mov	r5, r1
 80042b6:	b09d      	sub	sp, #116	@ 0x74
 80042b8:	4614      	mov	r4, r2
 80042ba:	4698      	mov	r8, r3
 80042bc:	4606      	mov	r6, r0
 80042be:	b118      	cbz	r0, 80042c8 <_vfiprintf_r+0x18>
 80042c0:	6a03      	ldr	r3, [r0, #32]
 80042c2:	b90b      	cbnz	r3, 80042c8 <_vfiprintf_r+0x18>
 80042c4:	f7ff fcd8 	bl	8003c78 <__sinit>
 80042c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042ca:	07d9      	lsls	r1, r3, #31
 80042cc:	d405      	bmi.n	80042da <_vfiprintf_r+0x2a>
 80042ce:	89ab      	ldrh	r3, [r5, #12]
 80042d0:	059a      	lsls	r2, r3, #22
 80042d2:	d402      	bmi.n	80042da <_vfiprintf_r+0x2a>
 80042d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042d6:	f7ff fec6 	bl	8004066 <__retarget_lock_acquire_recursive>
 80042da:	89ab      	ldrh	r3, [r5, #12]
 80042dc:	071b      	lsls	r3, r3, #28
 80042de:	d501      	bpl.n	80042e4 <_vfiprintf_r+0x34>
 80042e0:	692b      	ldr	r3, [r5, #16]
 80042e2:	b99b      	cbnz	r3, 800430c <_vfiprintf_r+0x5c>
 80042e4:	4629      	mov	r1, r5
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7ff fdee 	bl	8003ec8 <__swsetup_r>
 80042ec:	b170      	cbz	r0, 800430c <_vfiprintf_r+0x5c>
 80042ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042f0:	07dc      	lsls	r4, r3, #31
 80042f2:	d504      	bpl.n	80042fe <_vfiprintf_r+0x4e>
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	b01d      	add	sp, #116	@ 0x74
 80042fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fe:	89ab      	ldrh	r3, [r5, #12]
 8004300:	0598      	lsls	r0, r3, #22
 8004302:	d4f7      	bmi.n	80042f4 <_vfiprintf_r+0x44>
 8004304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004306:	f7ff feaf 	bl	8004068 <__retarget_lock_release_recursive>
 800430a:	e7f3      	b.n	80042f4 <_vfiprintf_r+0x44>
 800430c:	2300      	movs	r3, #0
 800430e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004310:	2320      	movs	r3, #32
 8004312:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004316:	f8cd 800c 	str.w	r8, [sp, #12]
 800431a:	2330      	movs	r3, #48	@ 0x30
 800431c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80044cc <_vfiprintf_r+0x21c>
 8004320:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004324:	f04f 0901 	mov.w	r9, #1
 8004328:	4623      	mov	r3, r4
 800432a:	469a      	mov	sl, r3
 800432c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004330:	b10a      	cbz	r2, 8004336 <_vfiprintf_r+0x86>
 8004332:	2a25      	cmp	r2, #37	@ 0x25
 8004334:	d1f9      	bne.n	800432a <_vfiprintf_r+0x7a>
 8004336:	ebba 0b04 	subs.w	fp, sl, r4
 800433a:	d00b      	beq.n	8004354 <_vfiprintf_r+0xa4>
 800433c:	465b      	mov	r3, fp
 800433e:	4622      	mov	r2, r4
 8004340:	4629      	mov	r1, r5
 8004342:	4630      	mov	r0, r6
 8004344:	f7ff ffa1 	bl	800428a <__sfputs_r>
 8004348:	3001      	adds	r0, #1
 800434a:	f000 80a7 	beq.w	800449c <_vfiprintf_r+0x1ec>
 800434e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004350:	445a      	add	r2, fp
 8004352:	9209      	str	r2, [sp, #36]	@ 0x24
 8004354:	f89a 3000 	ldrb.w	r3, [sl]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 809f 	beq.w	800449c <_vfiprintf_r+0x1ec>
 800435e:	2300      	movs	r3, #0
 8004360:	f04f 32ff 	mov.w	r2, #4294967295
 8004364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004368:	f10a 0a01 	add.w	sl, sl, #1
 800436c:	9304      	str	r3, [sp, #16]
 800436e:	9307      	str	r3, [sp, #28]
 8004370:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004374:	931a      	str	r3, [sp, #104]	@ 0x68
 8004376:	4654      	mov	r4, sl
 8004378:	2205      	movs	r2, #5
 800437a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800437e:	4853      	ldr	r0, [pc, #332]	@ (80044cc <_vfiprintf_r+0x21c>)
 8004380:	f7fb ff5e 	bl	8000240 <memchr>
 8004384:	9a04      	ldr	r2, [sp, #16]
 8004386:	b9d8      	cbnz	r0, 80043c0 <_vfiprintf_r+0x110>
 8004388:	06d1      	lsls	r1, r2, #27
 800438a:	bf44      	itt	mi
 800438c:	2320      	movmi	r3, #32
 800438e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004392:	0713      	lsls	r3, r2, #28
 8004394:	bf44      	itt	mi
 8004396:	232b      	movmi	r3, #43	@ 0x2b
 8004398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800439c:	f89a 3000 	ldrb.w	r3, [sl]
 80043a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80043a2:	d015      	beq.n	80043d0 <_vfiprintf_r+0x120>
 80043a4:	9a07      	ldr	r2, [sp, #28]
 80043a6:	4654      	mov	r4, sl
 80043a8:	2000      	movs	r0, #0
 80043aa:	f04f 0c0a 	mov.w	ip, #10
 80043ae:	4621      	mov	r1, r4
 80043b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043b4:	3b30      	subs	r3, #48	@ 0x30
 80043b6:	2b09      	cmp	r3, #9
 80043b8:	d94b      	bls.n	8004452 <_vfiprintf_r+0x1a2>
 80043ba:	b1b0      	cbz	r0, 80043ea <_vfiprintf_r+0x13a>
 80043bc:	9207      	str	r2, [sp, #28]
 80043be:	e014      	b.n	80043ea <_vfiprintf_r+0x13a>
 80043c0:	eba0 0308 	sub.w	r3, r0, r8
 80043c4:	fa09 f303 	lsl.w	r3, r9, r3
 80043c8:	4313      	orrs	r3, r2
 80043ca:	9304      	str	r3, [sp, #16]
 80043cc:	46a2      	mov	sl, r4
 80043ce:	e7d2      	b.n	8004376 <_vfiprintf_r+0xc6>
 80043d0:	9b03      	ldr	r3, [sp, #12]
 80043d2:	1d19      	adds	r1, r3, #4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	9103      	str	r1, [sp, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bfbb      	ittet	lt
 80043dc:	425b      	neglt	r3, r3
 80043de:	f042 0202 	orrlt.w	r2, r2, #2
 80043e2:	9307      	strge	r3, [sp, #28]
 80043e4:	9307      	strlt	r3, [sp, #28]
 80043e6:	bfb8      	it	lt
 80043e8:	9204      	strlt	r2, [sp, #16]
 80043ea:	7823      	ldrb	r3, [r4, #0]
 80043ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80043ee:	d10a      	bne.n	8004406 <_vfiprintf_r+0x156>
 80043f0:	7863      	ldrb	r3, [r4, #1]
 80043f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043f4:	d132      	bne.n	800445c <_vfiprintf_r+0x1ac>
 80043f6:	9b03      	ldr	r3, [sp, #12]
 80043f8:	1d1a      	adds	r2, r3, #4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	9203      	str	r2, [sp, #12]
 80043fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004402:	3402      	adds	r4, #2
 8004404:	9305      	str	r3, [sp, #20]
 8004406:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80044dc <_vfiprintf_r+0x22c>
 800440a:	7821      	ldrb	r1, [r4, #0]
 800440c:	2203      	movs	r2, #3
 800440e:	4650      	mov	r0, sl
 8004410:	f7fb ff16 	bl	8000240 <memchr>
 8004414:	b138      	cbz	r0, 8004426 <_vfiprintf_r+0x176>
 8004416:	9b04      	ldr	r3, [sp, #16]
 8004418:	eba0 000a 	sub.w	r0, r0, sl
 800441c:	2240      	movs	r2, #64	@ 0x40
 800441e:	4082      	lsls	r2, r0
 8004420:	4313      	orrs	r3, r2
 8004422:	3401      	adds	r4, #1
 8004424:	9304      	str	r3, [sp, #16]
 8004426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800442a:	4829      	ldr	r0, [pc, #164]	@ (80044d0 <_vfiprintf_r+0x220>)
 800442c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004430:	2206      	movs	r2, #6
 8004432:	f7fb ff05 	bl	8000240 <memchr>
 8004436:	2800      	cmp	r0, #0
 8004438:	d03f      	beq.n	80044ba <_vfiprintf_r+0x20a>
 800443a:	4b26      	ldr	r3, [pc, #152]	@ (80044d4 <_vfiprintf_r+0x224>)
 800443c:	bb1b      	cbnz	r3, 8004486 <_vfiprintf_r+0x1d6>
 800443e:	9b03      	ldr	r3, [sp, #12]
 8004440:	3307      	adds	r3, #7
 8004442:	f023 0307 	bic.w	r3, r3, #7
 8004446:	3308      	adds	r3, #8
 8004448:	9303      	str	r3, [sp, #12]
 800444a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800444c:	443b      	add	r3, r7
 800444e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004450:	e76a      	b.n	8004328 <_vfiprintf_r+0x78>
 8004452:	fb0c 3202 	mla	r2, ip, r2, r3
 8004456:	460c      	mov	r4, r1
 8004458:	2001      	movs	r0, #1
 800445a:	e7a8      	b.n	80043ae <_vfiprintf_r+0xfe>
 800445c:	2300      	movs	r3, #0
 800445e:	3401      	adds	r4, #1
 8004460:	9305      	str	r3, [sp, #20]
 8004462:	4619      	mov	r1, r3
 8004464:	f04f 0c0a 	mov.w	ip, #10
 8004468:	4620      	mov	r0, r4
 800446a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800446e:	3a30      	subs	r2, #48	@ 0x30
 8004470:	2a09      	cmp	r2, #9
 8004472:	d903      	bls.n	800447c <_vfiprintf_r+0x1cc>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0c6      	beq.n	8004406 <_vfiprintf_r+0x156>
 8004478:	9105      	str	r1, [sp, #20]
 800447a:	e7c4      	b.n	8004406 <_vfiprintf_r+0x156>
 800447c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004480:	4604      	mov	r4, r0
 8004482:	2301      	movs	r3, #1
 8004484:	e7f0      	b.n	8004468 <_vfiprintf_r+0x1b8>
 8004486:	ab03      	add	r3, sp, #12
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	462a      	mov	r2, r5
 800448c:	4b12      	ldr	r3, [pc, #72]	@ (80044d8 <_vfiprintf_r+0x228>)
 800448e:	a904      	add	r1, sp, #16
 8004490:	4630      	mov	r0, r6
 8004492:	f3af 8000 	nop.w
 8004496:	4607      	mov	r7, r0
 8004498:	1c78      	adds	r0, r7, #1
 800449a:	d1d6      	bne.n	800444a <_vfiprintf_r+0x19a>
 800449c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800449e:	07d9      	lsls	r1, r3, #31
 80044a0:	d405      	bmi.n	80044ae <_vfiprintf_r+0x1fe>
 80044a2:	89ab      	ldrh	r3, [r5, #12]
 80044a4:	059a      	lsls	r2, r3, #22
 80044a6:	d402      	bmi.n	80044ae <_vfiprintf_r+0x1fe>
 80044a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044aa:	f7ff fddd 	bl	8004068 <__retarget_lock_release_recursive>
 80044ae:	89ab      	ldrh	r3, [r5, #12]
 80044b0:	065b      	lsls	r3, r3, #25
 80044b2:	f53f af1f 	bmi.w	80042f4 <_vfiprintf_r+0x44>
 80044b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044b8:	e71e      	b.n	80042f8 <_vfiprintf_r+0x48>
 80044ba:	ab03      	add	r3, sp, #12
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	462a      	mov	r2, r5
 80044c0:	4b05      	ldr	r3, [pc, #20]	@ (80044d8 <_vfiprintf_r+0x228>)
 80044c2:	a904      	add	r1, sp, #16
 80044c4:	4630      	mov	r0, r6
 80044c6:	f000 f879 	bl	80045bc <_printf_i>
 80044ca:	e7e4      	b.n	8004496 <_vfiprintf_r+0x1e6>
 80044cc:	08004cac 	.word	0x08004cac
 80044d0:	08004cb6 	.word	0x08004cb6
 80044d4:	00000000 	.word	0x00000000
 80044d8:	0800428b 	.word	0x0800428b
 80044dc:	08004cb2 	.word	0x08004cb2

080044e0 <_printf_common>:
 80044e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e4:	4616      	mov	r6, r2
 80044e6:	4698      	mov	r8, r3
 80044e8:	688a      	ldr	r2, [r1, #8]
 80044ea:	690b      	ldr	r3, [r1, #16]
 80044ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044f0:	4293      	cmp	r3, r2
 80044f2:	bfb8      	it	lt
 80044f4:	4613      	movlt	r3, r2
 80044f6:	6033      	str	r3, [r6, #0]
 80044f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044fc:	4607      	mov	r7, r0
 80044fe:	460c      	mov	r4, r1
 8004500:	b10a      	cbz	r2, 8004506 <_printf_common+0x26>
 8004502:	3301      	adds	r3, #1
 8004504:	6033      	str	r3, [r6, #0]
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	0699      	lsls	r1, r3, #26
 800450a:	bf42      	ittt	mi
 800450c:	6833      	ldrmi	r3, [r6, #0]
 800450e:	3302      	addmi	r3, #2
 8004510:	6033      	strmi	r3, [r6, #0]
 8004512:	6825      	ldr	r5, [r4, #0]
 8004514:	f015 0506 	ands.w	r5, r5, #6
 8004518:	d106      	bne.n	8004528 <_printf_common+0x48>
 800451a:	f104 0a19 	add.w	sl, r4, #25
 800451e:	68e3      	ldr	r3, [r4, #12]
 8004520:	6832      	ldr	r2, [r6, #0]
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	42ab      	cmp	r3, r5
 8004526:	dc26      	bgt.n	8004576 <_printf_common+0x96>
 8004528:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	3b00      	subs	r3, #0
 8004530:	bf18      	it	ne
 8004532:	2301      	movne	r3, #1
 8004534:	0692      	lsls	r2, r2, #26
 8004536:	d42b      	bmi.n	8004590 <_printf_common+0xb0>
 8004538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800453c:	4641      	mov	r1, r8
 800453e:	4638      	mov	r0, r7
 8004540:	47c8      	blx	r9
 8004542:	3001      	adds	r0, #1
 8004544:	d01e      	beq.n	8004584 <_printf_common+0xa4>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	6922      	ldr	r2, [r4, #16]
 800454a:	f003 0306 	and.w	r3, r3, #6
 800454e:	2b04      	cmp	r3, #4
 8004550:	bf02      	ittt	eq
 8004552:	68e5      	ldreq	r5, [r4, #12]
 8004554:	6833      	ldreq	r3, [r6, #0]
 8004556:	1aed      	subeq	r5, r5, r3
 8004558:	68a3      	ldr	r3, [r4, #8]
 800455a:	bf0c      	ite	eq
 800455c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004560:	2500      	movne	r5, #0
 8004562:	4293      	cmp	r3, r2
 8004564:	bfc4      	itt	gt
 8004566:	1a9b      	subgt	r3, r3, r2
 8004568:	18ed      	addgt	r5, r5, r3
 800456a:	2600      	movs	r6, #0
 800456c:	341a      	adds	r4, #26
 800456e:	42b5      	cmp	r5, r6
 8004570:	d11a      	bne.n	80045a8 <_printf_common+0xc8>
 8004572:	2000      	movs	r0, #0
 8004574:	e008      	b.n	8004588 <_printf_common+0xa8>
 8004576:	2301      	movs	r3, #1
 8004578:	4652      	mov	r2, sl
 800457a:	4641      	mov	r1, r8
 800457c:	4638      	mov	r0, r7
 800457e:	47c8      	blx	r9
 8004580:	3001      	adds	r0, #1
 8004582:	d103      	bne.n	800458c <_printf_common+0xac>
 8004584:	f04f 30ff 	mov.w	r0, #4294967295
 8004588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458c:	3501      	adds	r5, #1
 800458e:	e7c6      	b.n	800451e <_printf_common+0x3e>
 8004590:	18e1      	adds	r1, r4, r3
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	2030      	movs	r0, #48	@ 0x30
 8004596:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800459a:	4422      	add	r2, r4
 800459c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045a4:	3302      	adds	r3, #2
 80045a6:	e7c7      	b.n	8004538 <_printf_common+0x58>
 80045a8:	2301      	movs	r3, #1
 80045aa:	4622      	mov	r2, r4
 80045ac:	4641      	mov	r1, r8
 80045ae:	4638      	mov	r0, r7
 80045b0:	47c8      	blx	r9
 80045b2:	3001      	adds	r0, #1
 80045b4:	d0e6      	beq.n	8004584 <_printf_common+0xa4>
 80045b6:	3601      	adds	r6, #1
 80045b8:	e7d9      	b.n	800456e <_printf_common+0x8e>
	...

080045bc <_printf_i>:
 80045bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045c0:	7e0f      	ldrb	r7, [r1, #24]
 80045c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045c4:	2f78      	cmp	r7, #120	@ 0x78
 80045c6:	4691      	mov	r9, r2
 80045c8:	4680      	mov	r8, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	469a      	mov	sl, r3
 80045ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045d2:	d807      	bhi.n	80045e4 <_printf_i+0x28>
 80045d4:	2f62      	cmp	r7, #98	@ 0x62
 80045d6:	d80a      	bhi.n	80045ee <_printf_i+0x32>
 80045d8:	2f00      	cmp	r7, #0
 80045da:	f000 80d2 	beq.w	8004782 <_printf_i+0x1c6>
 80045de:	2f58      	cmp	r7, #88	@ 0x58
 80045e0:	f000 80b9 	beq.w	8004756 <_printf_i+0x19a>
 80045e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045ec:	e03a      	b.n	8004664 <_printf_i+0xa8>
 80045ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045f2:	2b15      	cmp	r3, #21
 80045f4:	d8f6      	bhi.n	80045e4 <_printf_i+0x28>
 80045f6:	a101      	add	r1, pc, #4	@ (adr r1, 80045fc <_printf_i+0x40>)
 80045f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045fc:	08004655 	.word	0x08004655
 8004600:	08004669 	.word	0x08004669
 8004604:	080045e5 	.word	0x080045e5
 8004608:	080045e5 	.word	0x080045e5
 800460c:	080045e5 	.word	0x080045e5
 8004610:	080045e5 	.word	0x080045e5
 8004614:	08004669 	.word	0x08004669
 8004618:	080045e5 	.word	0x080045e5
 800461c:	080045e5 	.word	0x080045e5
 8004620:	080045e5 	.word	0x080045e5
 8004624:	080045e5 	.word	0x080045e5
 8004628:	08004769 	.word	0x08004769
 800462c:	08004693 	.word	0x08004693
 8004630:	08004723 	.word	0x08004723
 8004634:	080045e5 	.word	0x080045e5
 8004638:	080045e5 	.word	0x080045e5
 800463c:	0800478b 	.word	0x0800478b
 8004640:	080045e5 	.word	0x080045e5
 8004644:	08004693 	.word	0x08004693
 8004648:	080045e5 	.word	0x080045e5
 800464c:	080045e5 	.word	0x080045e5
 8004650:	0800472b 	.word	0x0800472b
 8004654:	6833      	ldr	r3, [r6, #0]
 8004656:	1d1a      	adds	r2, r3, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6032      	str	r2, [r6, #0]
 800465c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004660:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004664:	2301      	movs	r3, #1
 8004666:	e09d      	b.n	80047a4 <_printf_i+0x1e8>
 8004668:	6833      	ldr	r3, [r6, #0]
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	1d19      	adds	r1, r3, #4
 800466e:	6031      	str	r1, [r6, #0]
 8004670:	0606      	lsls	r6, r0, #24
 8004672:	d501      	bpl.n	8004678 <_printf_i+0xbc>
 8004674:	681d      	ldr	r5, [r3, #0]
 8004676:	e003      	b.n	8004680 <_printf_i+0xc4>
 8004678:	0645      	lsls	r5, r0, #25
 800467a:	d5fb      	bpl.n	8004674 <_printf_i+0xb8>
 800467c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004680:	2d00      	cmp	r5, #0
 8004682:	da03      	bge.n	800468c <_printf_i+0xd0>
 8004684:	232d      	movs	r3, #45	@ 0x2d
 8004686:	426d      	negs	r5, r5
 8004688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800468c:	4859      	ldr	r0, [pc, #356]	@ (80047f4 <_printf_i+0x238>)
 800468e:	230a      	movs	r3, #10
 8004690:	e011      	b.n	80046b6 <_printf_i+0xfa>
 8004692:	6821      	ldr	r1, [r4, #0]
 8004694:	6833      	ldr	r3, [r6, #0]
 8004696:	0608      	lsls	r0, r1, #24
 8004698:	f853 5b04 	ldr.w	r5, [r3], #4
 800469c:	d402      	bmi.n	80046a4 <_printf_i+0xe8>
 800469e:	0649      	lsls	r1, r1, #25
 80046a0:	bf48      	it	mi
 80046a2:	b2ad      	uxthmi	r5, r5
 80046a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80046a6:	4853      	ldr	r0, [pc, #332]	@ (80047f4 <_printf_i+0x238>)
 80046a8:	6033      	str	r3, [r6, #0]
 80046aa:	bf14      	ite	ne
 80046ac:	230a      	movne	r3, #10
 80046ae:	2308      	moveq	r3, #8
 80046b0:	2100      	movs	r1, #0
 80046b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046b6:	6866      	ldr	r6, [r4, #4]
 80046b8:	60a6      	str	r6, [r4, #8]
 80046ba:	2e00      	cmp	r6, #0
 80046bc:	bfa2      	ittt	ge
 80046be:	6821      	ldrge	r1, [r4, #0]
 80046c0:	f021 0104 	bicge.w	r1, r1, #4
 80046c4:	6021      	strge	r1, [r4, #0]
 80046c6:	b90d      	cbnz	r5, 80046cc <_printf_i+0x110>
 80046c8:	2e00      	cmp	r6, #0
 80046ca:	d04b      	beq.n	8004764 <_printf_i+0x1a8>
 80046cc:	4616      	mov	r6, r2
 80046ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80046d2:	fb03 5711 	mls	r7, r3, r1, r5
 80046d6:	5dc7      	ldrb	r7, [r0, r7]
 80046d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046dc:	462f      	mov	r7, r5
 80046de:	42bb      	cmp	r3, r7
 80046e0:	460d      	mov	r5, r1
 80046e2:	d9f4      	bls.n	80046ce <_printf_i+0x112>
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d10b      	bne.n	8004700 <_printf_i+0x144>
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	07df      	lsls	r7, r3, #31
 80046ec:	d508      	bpl.n	8004700 <_printf_i+0x144>
 80046ee:	6923      	ldr	r3, [r4, #16]
 80046f0:	6861      	ldr	r1, [r4, #4]
 80046f2:	4299      	cmp	r1, r3
 80046f4:	bfde      	ittt	le
 80046f6:	2330      	movle	r3, #48	@ 0x30
 80046f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004700:	1b92      	subs	r2, r2, r6
 8004702:	6122      	str	r2, [r4, #16]
 8004704:	f8cd a000 	str.w	sl, [sp]
 8004708:	464b      	mov	r3, r9
 800470a:	aa03      	add	r2, sp, #12
 800470c:	4621      	mov	r1, r4
 800470e:	4640      	mov	r0, r8
 8004710:	f7ff fee6 	bl	80044e0 <_printf_common>
 8004714:	3001      	adds	r0, #1
 8004716:	d14a      	bne.n	80047ae <_printf_i+0x1f2>
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	b004      	add	sp, #16
 800471e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	f043 0320 	orr.w	r3, r3, #32
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	4833      	ldr	r0, [pc, #204]	@ (80047f8 <_printf_i+0x23c>)
 800472c:	2778      	movs	r7, #120	@ 0x78
 800472e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	6831      	ldr	r1, [r6, #0]
 8004736:	061f      	lsls	r7, r3, #24
 8004738:	f851 5b04 	ldr.w	r5, [r1], #4
 800473c:	d402      	bmi.n	8004744 <_printf_i+0x188>
 800473e:	065f      	lsls	r7, r3, #25
 8004740:	bf48      	it	mi
 8004742:	b2ad      	uxthmi	r5, r5
 8004744:	6031      	str	r1, [r6, #0]
 8004746:	07d9      	lsls	r1, r3, #31
 8004748:	bf44      	itt	mi
 800474a:	f043 0320 	orrmi.w	r3, r3, #32
 800474e:	6023      	strmi	r3, [r4, #0]
 8004750:	b11d      	cbz	r5, 800475a <_printf_i+0x19e>
 8004752:	2310      	movs	r3, #16
 8004754:	e7ac      	b.n	80046b0 <_printf_i+0xf4>
 8004756:	4827      	ldr	r0, [pc, #156]	@ (80047f4 <_printf_i+0x238>)
 8004758:	e7e9      	b.n	800472e <_printf_i+0x172>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	f023 0320 	bic.w	r3, r3, #32
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	e7f6      	b.n	8004752 <_printf_i+0x196>
 8004764:	4616      	mov	r6, r2
 8004766:	e7bd      	b.n	80046e4 <_printf_i+0x128>
 8004768:	6833      	ldr	r3, [r6, #0]
 800476a:	6825      	ldr	r5, [r4, #0]
 800476c:	6961      	ldr	r1, [r4, #20]
 800476e:	1d18      	adds	r0, r3, #4
 8004770:	6030      	str	r0, [r6, #0]
 8004772:	062e      	lsls	r6, r5, #24
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	d501      	bpl.n	800477c <_printf_i+0x1c0>
 8004778:	6019      	str	r1, [r3, #0]
 800477a:	e002      	b.n	8004782 <_printf_i+0x1c6>
 800477c:	0668      	lsls	r0, r5, #25
 800477e:	d5fb      	bpl.n	8004778 <_printf_i+0x1bc>
 8004780:	8019      	strh	r1, [r3, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	6123      	str	r3, [r4, #16]
 8004786:	4616      	mov	r6, r2
 8004788:	e7bc      	b.n	8004704 <_printf_i+0x148>
 800478a:	6833      	ldr	r3, [r6, #0]
 800478c:	1d1a      	adds	r2, r3, #4
 800478e:	6032      	str	r2, [r6, #0]
 8004790:	681e      	ldr	r6, [r3, #0]
 8004792:	6862      	ldr	r2, [r4, #4]
 8004794:	2100      	movs	r1, #0
 8004796:	4630      	mov	r0, r6
 8004798:	f7fb fd52 	bl	8000240 <memchr>
 800479c:	b108      	cbz	r0, 80047a2 <_printf_i+0x1e6>
 800479e:	1b80      	subs	r0, r0, r6
 80047a0:	6060      	str	r0, [r4, #4]
 80047a2:	6863      	ldr	r3, [r4, #4]
 80047a4:	6123      	str	r3, [r4, #16]
 80047a6:	2300      	movs	r3, #0
 80047a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047ac:	e7aa      	b.n	8004704 <_printf_i+0x148>
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	4632      	mov	r2, r6
 80047b2:	4649      	mov	r1, r9
 80047b4:	4640      	mov	r0, r8
 80047b6:	47d0      	blx	sl
 80047b8:	3001      	adds	r0, #1
 80047ba:	d0ad      	beq.n	8004718 <_printf_i+0x15c>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	079b      	lsls	r3, r3, #30
 80047c0:	d413      	bmi.n	80047ea <_printf_i+0x22e>
 80047c2:	68e0      	ldr	r0, [r4, #12]
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	4298      	cmp	r0, r3
 80047c8:	bfb8      	it	lt
 80047ca:	4618      	movlt	r0, r3
 80047cc:	e7a6      	b.n	800471c <_printf_i+0x160>
 80047ce:	2301      	movs	r3, #1
 80047d0:	4632      	mov	r2, r6
 80047d2:	4649      	mov	r1, r9
 80047d4:	4640      	mov	r0, r8
 80047d6:	47d0      	blx	sl
 80047d8:	3001      	adds	r0, #1
 80047da:	d09d      	beq.n	8004718 <_printf_i+0x15c>
 80047dc:	3501      	adds	r5, #1
 80047de:	68e3      	ldr	r3, [r4, #12]
 80047e0:	9903      	ldr	r1, [sp, #12]
 80047e2:	1a5b      	subs	r3, r3, r1
 80047e4:	42ab      	cmp	r3, r5
 80047e6:	dcf2      	bgt.n	80047ce <_printf_i+0x212>
 80047e8:	e7eb      	b.n	80047c2 <_printf_i+0x206>
 80047ea:	2500      	movs	r5, #0
 80047ec:	f104 0619 	add.w	r6, r4, #25
 80047f0:	e7f5      	b.n	80047de <_printf_i+0x222>
 80047f2:	bf00      	nop
 80047f4:	08004cbd 	.word	0x08004cbd
 80047f8:	08004cce 	.word	0x08004cce

080047fc <__sflush_r>:
 80047fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004804:	0716      	lsls	r6, r2, #28
 8004806:	4605      	mov	r5, r0
 8004808:	460c      	mov	r4, r1
 800480a:	d454      	bmi.n	80048b6 <__sflush_r+0xba>
 800480c:	684b      	ldr	r3, [r1, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	dc02      	bgt.n	8004818 <__sflush_r+0x1c>
 8004812:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	dd48      	ble.n	80048aa <__sflush_r+0xae>
 8004818:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800481a:	2e00      	cmp	r6, #0
 800481c:	d045      	beq.n	80048aa <__sflush_r+0xae>
 800481e:	2300      	movs	r3, #0
 8004820:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004824:	682f      	ldr	r7, [r5, #0]
 8004826:	6a21      	ldr	r1, [r4, #32]
 8004828:	602b      	str	r3, [r5, #0]
 800482a:	d030      	beq.n	800488e <__sflush_r+0x92>
 800482c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	0759      	lsls	r1, r3, #29
 8004832:	d505      	bpl.n	8004840 <__sflush_r+0x44>
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	1ad2      	subs	r2, r2, r3
 8004838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800483a:	b10b      	cbz	r3, 8004840 <__sflush_r+0x44>
 800483c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	2300      	movs	r3, #0
 8004842:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004844:	6a21      	ldr	r1, [r4, #32]
 8004846:	4628      	mov	r0, r5
 8004848:	47b0      	blx	r6
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	d106      	bne.n	800485e <__sflush_r+0x62>
 8004850:	6829      	ldr	r1, [r5, #0]
 8004852:	291d      	cmp	r1, #29
 8004854:	d82b      	bhi.n	80048ae <__sflush_r+0xb2>
 8004856:	4a2a      	ldr	r2, [pc, #168]	@ (8004900 <__sflush_r+0x104>)
 8004858:	410a      	asrs	r2, r1
 800485a:	07d6      	lsls	r6, r2, #31
 800485c:	d427      	bmi.n	80048ae <__sflush_r+0xb2>
 800485e:	2200      	movs	r2, #0
 8004860:	6062      	str	r2, [r4, #4]
 8004862:	04d9      	lsls	r1, r3, #19
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	6022      	str	r2, [r4, #0]
 8004868:	d504      	bpl.n	8004874 <__sflush_r+0x78>
 800486a:	1c42      	adds	r2, r0, #1
 800486c:	d101      	bne.n	8004872 <__sflush_r+0x76>
 800486e:	682b      	ldr	r3, [r5, #0]
 8004870:	b903      	cbnz	r3, 8004874 <__sflush_r+0x78>
 8004872:	6560      	str	r0, [r4, #84]	@ 0x54
 8004874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004876:	602f      	str	r7, [r5, #0]
 8004878:	b1b9      	cbz	r1, 80048aa <__sflush_r+0xae>
 800487a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800487e:	4299      	cmp	r1, r3
 8004880:	d002      	beq.n	8004888 <__sflush_r+0x8c>
 8004882:	4628      	mov	r0, r5
 8004884:	f7ff fbf2 	bl	800406c <_free_r>
 8004888:	2300      	movs	r3, #0
 800488a:	6363      	str	r3, [r4, #52]	@ 0x34
 800488c:	e00d      	b.n	80048aa <__sflush_r+0xae>
 800488e:	2301      	movs	r3, #1
 8004890:	4628      	mov	r0, r5
 8004892:	47b0      	blx	r6
 8004894:	4602      	mov	r2, r0
 8004896:	1c50      	adds	r0, r2, #1
 8004898:	d1c9      	bne.n	800482e <__sflush_r+0x32>
 800489a:	682b      	ldr	r3, [r5, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0c6      	beq.n	800482e <__sflush_r+0x32>
 80048a0:	2b1d      	cmp	r3, #29
 80048a2:	d001      	beq.n	80048a8 <__sflush_r+0xac>
 80048a4:	2b16      	cmp	r3, #22
 80048a6:	d11e      	bne.n	80048e6 <__sflush_r+0xea>
 80048a8:	602f      	str	r7, [r5, #0]
 80048aa:	2000      	movs	r0, #0
 80048ac:	e022      	b.n	80048f4 <__sflush_r+0xf8>
 80048ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048b2:	b21b      	sxth	r3, r3
 80048b4:	e01b      	b.n	80048ee <__sflush_r+0xf2>
 80048b6:	690f      	ldr	r7, [r1, #16]
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	d0f6      	beq.n	80048aa <__sflush_r+0xae>
 80048bc:	0793      	lsls	r3, r2, #30
 80048be:	680e      	ldr	r6, [r1, #0]
 80048c0:	bf08      	it	eq
 80048c2:	694b      	ldreq	r3, [r1, #20]
 80048c4:	600f      	str	r7, [r1, #0]
 80048c6:	bf18      	it	ne
 80048c8:	2300      	movne	r3, #0
 80048ca:	eba6 0807 	sub.w	r8, r6, r7
 80048ce:	608b      	str	r3, [r1, #8]
 80048d0:	f1b8 0f00 	cmp.w	r8, #0
 80048d4:	dde9      	ble.n	80048aa <__sflush_r+0xae>
 80048d6:	6a21      	ldr	r1, [r4, #32]
 80048d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80048da:	4643      	mov	r3, r8
 80048dc:	463a      	mov	r2, r7
 80048de:	4628      	mov	r0, r5
 80048e0:	47b0      	blx	r6
 80048e2:	2800      	cmp	r0, #0
 80048e4:	dc08      	bgt.n	80048f8 <__sflush_r+0xfc>
 80048e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295
 80048f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f8:	4407      	add	r7, r0
 80048fa:	eba8 0800 	sub.w	r8, r8, r0
 80048fe:	e7e7      	b.n	80048d0 <__sflush_r+0xd4>
 8004900:	dfbffffe 	.word	0xdfbffffe

08004904 <_fflush_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	690b      	ldr	r3, [r1, #16]
 8004908:	4605      	mov	r5, r0
 800490a:	460c      	mov	r4, r1
 800490c:	b913      	cbnz	r3, 8004914 <_fflush_r+0x10>
 800490e:	2500      	movs	r5, #0
 8004910:	4628      	mov	r0, r5
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	b118      	cbz	r0, 800491e <_fflush_r+0x1a>
 8004916:	6a03      	ldr	r3, [r0, #32]
 8004918:	b90b      	cbnz	r3, 800491e <_fflush_r+0x1a>
 800491a:	f7ff f9ad 	bl	8003c78 <__sinit>
 800491e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f3      	beq.n	800490e <_fflush_r+0xa>
 8004926:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004928:	07d0      	lsls	r0, r2, #31
 800492a:	d404      	bmi.n	8004936 <_fflush_r+0x32>
 800492c:	0599      	lsls	r1, r3, #22
 800492e:	d402      	bmi.n	8004936 <_fflush_r+0x32>
 8004930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004932:	f7ff fb98 	bl	8004066 <__retarget_lock_acquire_recursive>
 8004936:	4628      	mov	r0, r5
 8004938:	4621      	mov	r1, r4
 800493a:	f7ff ff5f 	bl	80047fc <__sflush_r>
 800493e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004940:	07da      	lsls	r2, r3, #31
 8004942:	4605      	mov	r5, r0
 8004944:	d4e4      	bmi.n	8004910 <_fflush_r+0xc>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	059b      	lsls	r3, r3, #22
 800494a:	d4e1      	bmi.n	8004910 <_fflush_r+0xc>
 800494c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800494e:	f7ff fb8b 	bl	8004068 <__retarget_lock_release_recursive>
 8004952:	e7dd      	b.n	8004910 <_fflush_r+0xc>

08004954 <__swhatbuf_r>:
 8004954:	b570      	push	{r4, r5, r6, lr}
 8004956:	460c      	mov	r4, r1
 8004958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800495c:	2900      	cmp	r1, #0
 800495e:	b096      	sub	sp, #88	@ 0x58
 8004960:	4615      	mov	r5, r2
 8004962:	461e      	mov	r6, r3
 8004964:	da0d      	bge.n	8004982 <__swhatbuf_r+0x2e>
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800496c:	f04f 0100 	mov.w	r1, #0
 8004970:	bf14      	ite	ne
 8004972:	2340      	movne	r3, #64	@ 0x40
 8004974:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004978:	2000      	movs	r0, #0
 800497a:	6031      	str	r1, [r6, #0]
 800497c:	602b      	str	r3, [r5, #0]
 800497e:	b016      	add	sp, #88	@ 0x58
 8004980:	bd70      	pop	{r4, r5, r6, pc}
 8004982:	466a      	mov	r2, sp
 8004984:	f000 f848 	bl	8004a18 <_fstat_r>
 8004988:	2800      	cmp	r0, #0
 800498a:	dbec      	blt.n	8004966 <__swhatbuf_r+0x12>
 800498c:	9901      	ldr	r1, [sp, #4]
 800498e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004992:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004996:	4259      	negs	r1, r3
 8004998:	4159      	adcs	r1, r3
 800499a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800499e:	e7eb      	b.n	8004978 <__swhatbuf_r+0x24>

080049a0 <__smakebuf_r>:
 80049a0:	898b      	ldrh	r3, [r1, #12]
 80049a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049a4:	079d      	lsls	r5, r3, #30
 80049a6:	4606      	mov	r6, r0
 80049a8:	460c      	mov	r4, r1
 80049aa:	d507      	bpl.n	80049bc <__smakebuf_r+0x1c>
 80049ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	6123      	str	r3, [r4, #16]
 80049b4:	2301      	movs	r3, #1
 80049b6:	6163      	str	r3, [r4, #20]
 80049b8:	b003      	add	sp, #12
 80049ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049bc:	ab01      	add	r3, sp, #4
 80049be:	466a      	mov	r2, sp
 80049c0:	f7ff ffc8 	bl	8004954 <__swhatbuf_r>
 80049c4:	9f00      	ldr	r7, [sp, #0]
 80049c6:	4605      	mov	r5, r0
 80049c8:	4639      	mov	r1, r7
 80049ca:	4630      	mov	r0, r6
 80049cc:	f7ff fbba 	bl	8004144 <_malloc_r>
 80049d0:	b948      	cbnz	r0, 80049e6 <__smakebuf_r+0x46>
 80049d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d6:	059a      	lsls	r2, r3, #22
 80049d8:	d4ee      	bmi.n	80049b8 <__smakebuf_r+0x18>
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	f043 0302 	orr.w	r3, r3, #2
 80049e2:	81a3      	strh	r3, [r4, #12]
 80049e4:	e7e2      	b.n	80049ac <__smakebuf_r+0xc>
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	6020      	str	r0, [r4, #0]
 80049ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ee:	81a3      	strh	r3, [r4, #12]
 80049f0:	9b01      	ldr	r3, [sp, #4]
 80049f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049f6:	b15b      	cbz	r3, 8004a10 <__smakebuf_r+0x70>
 80049f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049fc:	4630      	mov	r0, r6
 80049fe:	f000 f81d 	bl	8004a3c <_isatty_r>
 8004a02:	b128      	cbz	r0, 8004a10 <__smakebuf_r+0x70>
 8004a04:	89a3      	ldrh	r3, [r4, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	81a3      	strh	r3, [r4, #12]
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	431d      	orrs	r5, r3
 8004a14:	81a5      	strh	r5, [r4, #12]
 8004a16:	e7cf      	b.n	80049b8 <__smakebuf_r+0x18>

08004a18 <_fstat_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4d07      	ldr	r5, [pc, #28]	@ (8004a38 <_fstat_r+0x20>)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	602b      	str	r3, [r5, #0]
 8004a26:	f7fc fb2f 	bl	8001088 <_fstat>
 8004a2a:	1c43      	adds	r3, r0, #1
 8004a2c:	d102      	bne.n	8004a34 <_fstat_r+0x1c>
 8004a2e:	682b      	ldr	r3, [r5, #0]
 8004a30:	b103      	cbz	r3, 8004a34 <_fstat_r+0x1c>
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	bd38      	pop	{r3, r4, r5, pc}
 8004a36:	bf00      	nop
 8004a38:	2000070c 	.word	0x2000070c

08004a3c <_isatty_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4d06      	ldr	r5, [pc, #24]	@ (8004a58 <_isatty_r+0x1c>)
 8004a40:	2300      	movs	r3, #0
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	f7fc fb2e 	bl	80010a8 <_isatty>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_isatty_r+0x1a>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_isatty_r+0x1a>
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	2000070c 	.word	0x2000070c

08004a5c <_sbrk_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	4d06      	ldr	r5, [pc, #24]	@ (8004a78 <_sbrk_r+0x1c>)
 8004a60:	2300      	movs	r3, #0
 8004a62:	4604      	mov	r4, r0
 8004a64:	4608      	mov	r0, r1
 8004a66:	602b      	str	r3, [r5, #0]
 8004a68:	f7fc fb36 	bl	80010d8 <_sbrk>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_sbrk_r+0x1a>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_sbrk_r+0x1a>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	2000070c 	.word	0x2000070c

08004a7c <_init>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr

08004a88 <_fini>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr
